<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="API%20Hooking%20-%20Custom%20Code_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="API%20Hooking%20-%20Custom%20Code_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="API%20Hooking%20-%20Custom%20Code_files/css2.css" rel="stylesheet">
        <link href="API%20Hooking%20-%20Custom%20Code_files/css2_002.css" rel="stylesheet">
        <title>API Hooking - Custom Code</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="API%20Hooking%20-%20Custom%20Code_files/app.fdbb573b.css"><link rel="stylesheet" href="API%20Hooking%20-%20Custom%20Code_files/app.fdbb573b.css"><link rel="stylesheet" href="API%20Hooking%20-%20Custom%20Code_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="API%20Hooking%20-%20Custom%20Code_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 61 - API Hooking - Custom Code
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="API%20Hooking%20-%20Custom%20Code_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="API%20Hooking%20-%20Custom%20Code_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="API%20Hooking%20-%20Custom%20Code_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/CustomTrampoline" target="_blank">
                    <img src="API%20Hooking%20-%20Custom%20Code_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>API Hooking - Custom Code</h2>
<h3>Introduction</h3>
<p>So far, open source libraries have been used to implement API 
hooking. However, a major issue with this approach is that the source 
code for these libraries is publicly available, making it 
straightforward for security researchers and security product vendors to
 build IoCs. For this reason, API hooking will be implemented manually 
in this module, although not as sophisticated as the previously 
demonstrated libraries, but enough to achieve the desired result without
 IoCs.</p>
<p>Custom hooking code can be a better option if the intent is to hook a
 single function. This avoids the additional effort of linking other 
libraries, and avoiding the additional weight these libraries add to the
 binary's size.</p>
<h3>Creating The Trampoline Shellcode</h3>
<p>One of the ways to hook a function is to overwrite its first few 
instructions with new ones. These new instructions are the trampoline 
which is responsible for altering the execution flow of the function to 
the replacement function. This trampoline is typically a small jump 
shellcode that executes a <code>jmp</code> instruction to the address of the function to be executed. To execute the <code>jmp</code>
 instruction, the address that needs to be jumped to must be saved 
inside of a register. In the presented example, the register will be <code>eax</code> on a 32-bit processor and <code>r10</code> on a 64-bit processor. A <code>mov</code> instruction will be used to save the address inside of these registers.</p>
<p>This is all that is needed for the trampoline, a <code>mov</code> and a <code>jmp</code>
 instruction. Diving deeper into how these instructions are used is not 
the focus of this module. If one would like to explore them further, <a href="https://www.felixcloutier.com/x86/mov" target="_blank">felixcloutier.com/x86/mov</a> and <a href="https://www.felixcloutier.com/x86/jmp" target="_blank">felixcloutier.com/x86/jmp</a> can provide more details.</p>
<h4>64-bit Jump Shellcode</h4>
<p>The 64-bit jump shellcode should be as follows:</p>
<pre><code>mov r10, pAddress  
jmp r10
</code></pre>
<p>Where <code>pAddres</code> is the address of the function to jump to (e.g. <code>0x0000FFFEC32A300</code>). To use these instructions in the code they must first be converted to <em>opcode</em>.</p>
<pre><code>0x49, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov r10, pAddress
0x41, 0xFF, 0xE2                                            // jmp r10
</code></pre>
<h4>32-bit Jump Shellcode</h4>
<p>And the 32-bit version:</p>
<pre><code>mov eax, pAddress  
jmp eax
</code></pre>
<p>Again, convert the instructions to opcode.</p>
<pre><code>0xB8, 0x00, 0x00, 0x00, 0x00,     // mov eax, pAddress
0xFF, 0xE0                        // jmp eax
</code></pre>
<p>Note that <code>pAddress</code> is represented as <code>NULL</code>, which explains the <code>0x00</code> sequence. These <code>0x00</code> opcodes are placeholders that will be overwritten during runtime.</p>
<h3>Retrieving pAddress</h3>
<p>Since the hooks are installed during runtime, the <code>pAddress</code> value must be retrieved and added to the shellcode during runtime. The retrieval of the address can be done using <code>GetProcAddress</code> and once that's completed, <code>memcpy</code> is used to copy the address to the correct location in the shellcode.</p>
<h4>64-bit Patching</h4>
<pre><code>uint8_t		uTrampoline[] = {
			0x49, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov r10, pFunctionToRun
			0x41, 0xFF, 0xE2                                            // jmp r10
};

uint64_t uPatch = (uint64_t)pAddress;
memcpy(&amp;uTrampoline[2], &amp;uPatch, sizeof(uPatch)); // copying the address to the offset '2' in uTrampoline
</code></pre>
<h4>32-bit Patching</h4>
<pre><code>uint8_t		uTrampoline[] = {
	   0xB8, 0x00, 0x00, 0x00, 0x00,     // mov eax, pFunctionToRun
	   0xFF, 0xE0                        // jmp eax
};
  
uint32_t uPatch = (uint32_t)pAddress;
memcpy(&amp;uTrampoline[1], &amp;uPatch, sizeof(uPatch)); // copying the address to the offset '1' in uTrampoline
</code></pre>
<p>As previously mentioned, <code>pAddress</code> is the address of the function to jump to. The <code>uint32_t</code> and <code>uint64_t</code>
 data types are used to ensure that the address is the correct number of
 bytes, that is 4 bytes for 32-bit machines and 8 bytes for 64-bit 
machines. <code>uint32_t</code> is of size 4 bytes, and <code>uint64_t</code> is of size 8 bytes. <code>memcpy</code> will then place the address into the trampoline by overwriting the <code>0x00</code> placeholder bytes.</p>
<h3>Writing The Trampoline</h3>
<p>Before overwriting the target function's first few instructions with 
the prepared shellcode, it is important to mark the memory where the 
trampoline will be written as writable. In most cases, the memory region
 will not be writable, requiring the <code>VirtualProtect</code> WinAPI to change the memory permissions to <code>PAGE_EXECUTE_READWRITE</code>.
 It is worth noting that it must be writable and executable because when
 the program calls the function, it needs to execute instructions that 
will not be permitted on write-only memory.</p>
<p>With that in mind, the trampoline should first modify the permissions of the target function and then copy the shellcode over.</p>
<pre><code>// Changing the memory permissons at 'pFunctionToHook' to be PAGE_EXECUTE_READWRITE
if (!VirtualProtect(pFunctionToHook, sizeof(uTrampoline), PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
	return FALSE;
}

// Copying the trampoline shellcode to 'pFunctionToHook'
memcpy(pFunctionToHook, uTrampoline, sizeof(uTrampoline));
</code></pre>
<p>Where <code>pFunctionToHook</code> is the address of the function to hook, and <code>uTrampoline</code> is the jump shellcode.</p>
<h3>Unhooking</h3>
<p>When the hooked function is called, the trampoline shellcode should 
be able to work for both 64-bit and 32-bit architectures. However, the 
unhooking of the hooked function has not been discussed. To do this, the
 original bytes which were overwritten by the trampoline should be 
restored by using a buffer containing these bytes that were created 
prior to the installation of the trampoline shellcode. This buffer 
should then be used as the source buffer in the <code>memcpy</code> function when unhooking the function.</p>
<pre><code>memcpy(pFunctionToHook, pOriginalBytes, sizeof(pOriginalBytes));
</code></pre>
<p>Where <code>pFunctionToHook</code> is the address of the hooked function and <code>pOriginalBytes</code>
 is the buffer that's holding the original bytes of the function which 
should have been saved before hooking, and can be done via a <code>memcpy</code> call. The size of the <code>pOriginalBytes</code>
 buffer should be the same as the trampoline shellcode size that way 
only the shellcode is overwritten. Lastly, it's recommended to revert 
the memory permissions which can be done via the code snippet below.</p>
<pre><code>if (!VirtualProtect(pFunctionToHook, sizeof(uTrampoline), dwOldProtection, &amp;dwOldProtection)) {
	return FALSE;
}
</code></pre>
<p>Where <code>dwOldProtection</code> is the old memory permission returned by the first <code>VirtualProtect</code> call.</p>
<h3>HookSt Structure</h3>
<p>To make the implementation easier, the <code>HookSt</code> structure was created. This structure will contain the needed information to hook and unhook a certain function. The value <code>TRAMPOLINE_SIZE</code> is set to <em>13</em> if the program is set to be compiled as a 64-bit application, and its set to <em>7</em> if the program is to be compiled in 32-bit mode. The values 13 and 7 are the sizes of the trampoline shellcode, denoted in the <code>uTrampoline</code> variable previously shown, in 64-bit and 32-bit systems, respectively.</p>
<pre><code>typedef struct _HookSt{

	PVOID	pFunctionToHook;                  // address of the function to hook
	PVOID	pFunctionToRun;                   // address of the function to run instead
	BYTE	pOriginalBytes[TRAMPOLINE_SIZE];  // buffer to keep some original bytes (needed for cleanup)
	DWORD	dwOldProtection;                  // holds the old memory protection of the "function to hook" address (needed for cleanup)

}HookSt, *PHookSt;
</code></pre>
<p>Setting the <code>TRAMPOLINE_SIZE</code> value is done via the following preprocessor code</p>
<pre><code>// if compiling as 64-bit
#ifdef _M_X64
#define TRAMPOLINE_SIZE		13
#endif // _M_X64

// if compiling as 32-bit
#ifdef _M_IX86
#define TRAMPOLINE_SIZE		7
#endif // _M_IX86
</code></pre>
<h3>Installing Hooks</h3>
<p>The following function uses <code>HookSt</code> to install hooks.</p>
<pre><code>BOOL InstallHook (IN PHookSt Hook) {

#ifdef _M_X64
	// 64-bit trampoline
	uint8_t	uTrampoline [] = {
			0x49, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov r10, pFunctionToRun
			0x41, 0xFF, 0xE2                                            // jmp r10
	};

	// Patching the shellcode with the address to jump to (pFunctionToRun)
	uint64_t uPatch = (uint64_t)(Hook-&gt;pFunctionToRun);
	// Copying the address of the function to jump to, to the offset '2' in uTrampoline
	memcpy(&amp;uTrampoline[2], &amp;uPatch, sizeof(uPatch));
#endif // _M_X64


#ifdef _M_IX86
	// 32-bit trampoline
	uint8_t	uTrampoline[] = {
	   0xB8, 0x00, 0x00, 0x00, 0x00,     // mov eax, pFunctionToRun
	   0xFF, 0xE0                        // jmp eax
	};
	
	// Patching the shellcode with the address to jump to (pFunctionToRun)
	uint32_t uPatch = (uint32_t)(Hook-&gt;pFunctionToRun);
	// Copying the address of the function to jump to, to the offset '1' in uTrampoline
	memcpy(&amp;uTrampoline[1], &amp;uPatch, sizeof(uPatch));
#endif // _M_IX86

	
	// Placing the trampoline function - installing the hook
	memcpy(Hook-&gt;pFunctionToHook, uTrampoline, sizeof(uTrampoline));

	return TRUE;
}

</code></pre>
<h3>Removing Hooks</h3>
<p>The function below uses <code>HookSt</code> to remove hooks.</p>
<pre><code>BOOL RemoveHook (IN PHookSt Hook) {

	DWORD	dwOldProtection		= NULL;

	// Copying the original bytes over
	memcpy(Hook-&gt;pFunctionToHook, Hook-&gt;pOriginalBytes, TRAMPOLINE_SIZE);
	// Cleaning up our buffer
	memset(Hook-&gt;pOriginalBytes, '\0', TRAMPOLINE_SIZE);
	// Setting the old memory protection back to what it was before hooking 
	if (!VirtualProtect(Hook-&gt;pFunctionToHook, TRAMPOLINE_SIZE, Hook-&gt;dwOldProtection, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Setting all to null
	Hook-&gt;pFunctionToHook   = NULL;
	Hook-&gt;pFunctionToRun    = NULL;
	Hook-&gt;dwOldProtection   = NULL;

	return TRUE;
}

</code></pre>
<h4>Populating The HookSt Structure</h4>
<p>The <code>InitializeHookStruct</code> function is used to populate the <code>HookSt</code> structure with the necessary information to perform hooking.</p>
<pre><code>BOOL InitializeHookStruct(IN PVOID pFunctionToHook, IN PVOID pFunctionToRun, OUT PHookSt Hook) {

	// Filling up the struct
	Hook-&gt;pFunctionToHook   = pFunctionToHook;
	Hook-&gt;pFunctionToRun    = pFunctionToRun;

	// Save original bytes of the same size that we will overwrite (that is TRAMPOLINE_SIZE)
	// This is done to be able to do cleanups when done
	memcpy(Hook-&gt;pOriginalBytes, pFunctionToHook, TRAMPOLINE_SIZE);

	// Changing the protection to RWX so that we can modify the bytes 
	// We are saving the old protection to the struct (to re-place it at cleanup)
	if (!VirtualProtect(pFunctionToHook, TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &amp;Hook-&gt;dwOldProtection)) {
		printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h4>The Main function</h4>
<p>The main function below calls the previously demonstrated functions and hooks the <code>MessageBoxA</code> WinAPI.</p>
<pre><code>int main() {

	// Initializing the structure (needed before installing/removing the hook)
	HookSt st = { 0 };

	if (!InitializeHookStruct(&amp;MessageBoxA, &amp;MyMessageBoxA, &amp;st)) {
		return -1;
	}

	// will run
	MessageBoxA(NULL, "What Do You Think About Malware Development ?", "Original MsgBox", MB_OK | MB_ICONQUESTION);

	//  hooking
	if (!InstallHook(&amp;st)) {
		return -1;
	}
	
	//  wont run - hooked
	MessageBoxA(NULL, "Malware Development Is Bad", "Original MsgBox", MB_OK | MB_ICONWARNING);


	//  unhooking
	if (!RemoveHook(&amp;st)) {
		return -1;
	}


	//  will run - hook disabled
	MessageBoxA(NULL, "Normal MsgBox Again", "Original MsgBox", MB_OK | MB_ICONINFORMATION);


	return 0;
}
</code></pre>
<br>
<h3>Demo</h3>
<p>Due to the trampoline-based hook, it is impossible to have a global 
original function pointer be called to resume execution. Therefore, the <code>MessageBoxW</code> WinAPI will be called in the <code>MyMessageBoxA</code> detour function.</p>
<p>Running the first <code>MessageBoxA</code> (Unhooked).</p>
<p><img src="API%20Hooking%20-%20Custom%20Code_files/custom-trampoline-113731211-c0c71ee9-93b5-4e56-811e-b9595193.png" alt="image">
<br></p>
<p>The original <code>MessageBoxA</code> instructions before hooking.</p>
<p><img src="API%20Hooking%20-%20Custom%20Code_files/custom-trampoline-213732622-0d251a96-90b6-43fa-ae02-6bc14b0b.png" alt="image">
<br></p>
<p>Running the second <code>MessageBoxA</code> (Hooked).</p>
<p><img src="API%20Hooking%20-%20Custom%20Code_files/custom-trampoline-313731997-b35bff75-14b3-4b32-96d7-91313205.png" alt="image">
<br></p>
<p>The trampoline shellcode is in memory.</p>
<p><img src="API%20Hooking%20-%20Custom%20Code_files/custom-trampoline-413732637-5e2985c7-2bda-4e75-98c4-9ea6e8c1.png" alt="image">
<br></p>
<p>Running the third <code>MessageBoxA</code> (Unhooked).</p>
<p><img src="API%20Hooking%20-%20Custom%20Code_files/custom-trampoline-513732042-e95b475c-72ed-4797-b8e5-4d7cb545.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use the custom API hooking code to hook a WinAPI besides MessageBoxA</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/60"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/61/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/61/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/62"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="API%20Hooking%20-%20Custom%20Code_files/jquery-3.6.0.min.js"></script>
        <script src="API%20Hooking%20-%20Custom%20Code_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="API%20Hooking%20-%20Custom%20Code_files/app.4474f4d1.css"><link rel="modulepreload" href="API%20Hooking%20-%20Custom%20Code_files/app.5f3af5ce.js"><link rel="stylesheet" href="API%20Hooking%20-%20Custom%20Code_files/app.4474f4d1.css"><script type="module" src="API%20Hooking%20-%20Custom%20Code_files/app.5f3af5ce.js"></script><script src="API%20Hooking%20-%20Custom%20Code_files/navbar.js"></script>
<script src="API%20Hooking%20-%20Custom%20Code_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 61;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>