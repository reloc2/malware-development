<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="API%20Hooking%20-%20Detours%20Library_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="API%20Hooking%20-%20Detours%20Library_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="API%20Hooking%20-%20Detours%20Library_files/css2.css" rel="stylesheet">
        <link href="API%20Hooking%20-%20Detours%20Library_files/css2_002.css" rel="stylesheet">
        <title>API Hooking - Detours Library</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="API%20Hooking%20-%20Detours%20Library_files/app.fdbb573b.css"><link rel="stylesheet" href="API%20Hooking%20-%20Detours%20Library_files/app.fdbb573b.css"><link rel="stylesheet" href="API%20Hooking%20-%20Detours%20Library_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="API%20Hooking%20-%20Detours%20Library_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 59 - API Hooking - Detours Library
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="API%20Hooking%20-%20Detours%20Library_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="API%20Hooking%20-%20Detours%20Library_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="API%20Hooking%20-%20Detours%20Library_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/DetoursLibHooking" target="_blank">
                    <img src="API%20Hooking%20-%20Detours%20Library_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>API Hooking - Detours Library</h2>
<h3>Introduction</h3>
<p>The <a href="https://github.com/microsoft/Detours" target="_blank">Detours Hooking Library</a>,
 is a software library developed by Microsoft Research that allows for 
intercepting and redirecting function calls in Windows. The library 
redirect calls of specific functions to a user-defined replacement 
function that can then perform additional tasks or modify the behavior 
of the original function. Detours is typically used with C/C++ programs 
and can be used with both 32-bit and 64-bit applications.</p>
<p>The library's wiki page is available <a href="https://github.com/microsoft/Detours/wiki/" target="_blank">here</a>.</p>
<h3>Transactions</h3>
<p>The Detours library replaces the first few instructions of the target
 function, that is the function to be hooked, with an unconditional jump
 to the user-provided detour function, which is the function to be 
executed instead. The term unconditional jump is also referred to as 
trampoline.</p>
<p>The library uses <em>transactions</em> to install and uninstall hooks
 from a targeted function. Transactions allow hooking routines to group 
multiple function hooks together and apply them as a single unit, which 
can be beneficial when making multiple changes to a program's behavior. 
It also provides the advantage of enabling the user to easily undo all 
changes if necessary. When using transactions, a new transaction can be 
started, function hooks added, and then committed. Upon committing the 
transaction, all function hooks added to the transaction will be applied
 to the program, as would be the case with unhooking.</p>
<h3>Using The Detours Library</h3>
<p>To use the Detours library's functions, the Detours repository must 
be downloaded and compiled to get the static library files (.lib) files 
needed for the compilation. In addition to that the <a href="https://github.com/microsoft/Detours/blob/master/src/detours.h" target="_blank">detours.h</a> header file should be included, this is explained in the Detours wiki under the <a href="https://github.com/microsoft/Detours/wiki/Using-Detours" target="_blank">Using Detours</a> section.</p>
<p>For additional help adding .lib files to a project, review <a href="https://learn.microsoft.com/en-us/cpp/build/reference/dot-lib-files-as-linker-input?view=msvc-170" target="_blank">Microsoft's documentation</a>.</p>
<h3>32-bit vs 64-bit Detours Library</h3>
<p>The shared code in this module has preprocessor code that determines which version of the Detours <code>.lib</code> file to include, depending on the architecture of the machine being used. To do so, the <code>_M_X64</code> and <code>_M_IX86</code>
 macros are used. These macros are defined by the compiler to indicate 
whether the machine is running a 64-bit or 32-bit version of Windows. 
The preprocessor code looks like the following:</p>
<pre><code>// If compiling as 64-bit
#ifdef _M_X64
#pragma comment (lib, "detoursx64.lib")
#endif // _M_X64


// If compiling as 32-bit
#ifdef _M_IX86
#pragma comment (lib, "detoursx86.lib")
#endif // _M_IX86
</code></pre>
<p>The <code>#ifdef _M_X64</code> checks if the macro <code>_M_X64</code>
 is defined, and if it is, the code following it will be included in the
 compilation. If it is not defined, the code will be ignored. Similarly,
 <code>#ifdef _M_IX86</code> checks if the macro <code>_M_IX86</code> is defined, and if it is, the code following it will be included in the compilation. The <code>#pragma comment (lib, "detoursx64.lib")</code> is used to link the <em>detoursx64.lib</em> library during compilation for 64-bit systems, and <code>#pragma comment (lib, "detoursx86.lib")</code> is used to link the <em>detoursx86.lib</em> library during compilation for 32-bit systems.</p>
<p>Both <em>detoursx64.lib</em> and <em>detoursx86.lib</em> files are created when compiling the Detours library, <em>detoursx64.lib</em> is created when compiling the Detours library as a 64-bit project, likewise, the <em>detoursx86.lib</em> is created when compiling the Detours library as a 32-bit project.</p>
<h3>Detours API Functions</h3>
<p>When using any hooking method, the first step is to always retrieve 
the address of the WinAPI function to hook. The function's address is 
required to determine where the jump instructions will be placed. In 
this module, the <code>MessageBoxA</code> function will be utilized as a function to hook.</p>
<p>Below are the API functions the Detours Library offers:</p>
<ul>
<li>
<p><a href="https://github.com/microsoft/Detours/wiki/DetourTransactionBegin" target="_blank">DetourTransactionBegin</a> - Begin a new transaction for attaching or detaching detours. This function should be called first when hooking and unhooking.</p>
</li>
<li>
<p><a href="https://github.com/microsoft/Detours/wiki/DetourUpdateThread" target="_blank">DetourUpdateThread</a> - Update the current transaction. This is used by Detours library to <em>Enlist</em> a thread in the current transaction.</p>
</li>
<li>
<p><a href="https://github.com/microsoft/Detours/wiki/DetourAttach" target="_blank">DetourAttach</a> - Install the hook on the target function in a current transaction. This won't be committed until <code>DetourTransactionCommit</code> is called.</p>
</li>
<li>
<p><a href="https://github.com/microsoft/Detours/wiki/DetourDetach" target="_blank">DetourDetach</a> - Remove the hook from the targetted function in a current transaction. This won't be committed until <code>DetourTransactionCommit</code> is called.</p>
</li>
<li>
<p><a href="https://github.com/microsoft/Detours/wiki/DetourTransactionCommit" target="_blank">DetourTransactionCommit</a> - Commit the current transaction for attaching or detaching detours.</p>
</li>
</ul>
<p>The functions above return a <code>LONG</code> value which is used to understand the result of the function's execution. A Detours API will return <code>NO_ERROR</code>,
 which is a 0, if it succeeds and a non-zero value upon failure. The 
non-zero value can be used as an error code for debugging purposes.</p>
<h3>Replacing The Hooked API</h3>
<p>The next step is to create a function to replace the hooked API. The 
replacement function should be of the same data type, and optionally, 
take the same parameters. This allows for inspection or modification of 
the parameter values. For example, the following function can be used as
 a detour function for <code>MessageBoxA</code> which allows one to check the original parameter values.</p>
<pre><code>INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {
  // we can check hWnd - lpText - lpCaption - uType parametes
}
</code></pre>
<p>It is worth noting that the replacement function can take fewer 
parameters, but can't take more than the original function because then 
it would access an invalid address which will throw access violation 
exceptions.</p>
<h3>The Infinite Loop Problem</h3>
<p>When a hooked function is called and the hook is triggered, the 
custom function is executed, however, for the execution flow to 
continue, the custom function must return a valid value that the 
original hooked function was meant to return. A naive approach would be 
to return the same value by calling the original function inside of the 
hook. This can lead to problems as the replacement function will be 
called instead, resulting in an infinite loop. This is a general hooking
 issue and not a bug in the Detours library.</p>
<p>In order to gain a better understanding of this, the code snippet below shows the replacement function, <code>MyMessageBoxA</code> calling <code>MessageBoxA</code>. This results in an infinite loop. The program will get stuck running <code>MyMessageBoxA</code>, that is because <code>MyMessageBoxA</code> is calling <code>MessageBoxA</code>, and <code>MessageBoxA</code> leads to the <code>MyMessageBoxA</code> function again.</p>
<pre><code>INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {
  // Printing original parameters value
  printf("Original lpText Parameter	: %s\n", lpText);
  printf("Original lpCaption Parameter : %s\n", lpCaption);
  
  // DON'T DO THIS
  // Changing the parameters value
  return MessageBoxA(hWnd, "different lpText", "different lpCaption", uType); // Calling MessageBoxA (this is hooked)
}
</code></pre>
<h4>Solution 1 - Global Original Function Pointer</h4>
<p>The Detours library can resolve this issue by saving a pointer to the
 original function prior to hooking it. This pointer can be stored in a 
global variable and invoked instead of the hooked function within the 
detour function.</p>
<pre><code>// Used as a unhooked MessageBoxA in `MyMessageBoxA`
fnMessageBoxA g_pMessageBoxA = MessageBoxA;

INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {
  // Printing original parameters value
  printf("Original lpText Parameter	: %s\n", lpText);
  printf("Original lpCaption Parameter : %s\n", lpCaption);
  
  // Changing the parameters value
  // Calling an unhooked MessageBoxA
  return g_pMessageBoxA(hWnd, "different lpText", "different lpCaption", uType);
}
</code></pre>
<h4>Solution 2 - Using a Different API</h4>
<p>Another more general solution worth mentioning is calling a different <em>unhooked</em> function that has the same functionality as the hooked function. For example <code>MessageBoxA</code> and <code>MessageBoxW</code>, <code>VirtualAlloc</code> and <code>VirtualAllocEx</code>.</p>
<pre><code>INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {
  // Printing original parameters value
  printf("Original lpText Parameter	: %s\n", lpText);
  printf("Original lpCaption Parameter : %s\n", lpCaption);
  
  // Changing the parameters value
  return MessageBoxW(hWnd, L"different lpText", L"different lpCaption", uType);
}
</code></pre>
<h3>Detours Hooking Routine</h3>
<p>As previously explained, the Detours library works using transactions
 therefore to hook an API function, one must create a transaction, 
submit an action (hooking/unhooking) to the transaction, and then commit
 the transaction. The code snippet below performs these steps.</p>
<pre><code>
// Used as a unhooked MessageBoxA in `MyMessageBoxA`
// And used by `DetourAttach` &amp; `DetourDetach`
fnMessageBoxA g_pMessageBoxA = MessageBoxA;


// The function that will run instead MessageBoxA when hooked
INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {

	printf("[+] Original Parameters : \n");
	printf("\t - lpText	: %s\n", lpText);
	printf("\t - lpCaption	: %s\n", lpCaption);

	return g_pMessageBoxA(hWnd, "different lpText", "different lpCaption", uType);
}


BOOL InstallHook() {
	
	DWORD	dwDetoursErr = NULL;

  	// Creating the transaction &amp; updating it
	if ((dwDetoursErr = DetourTransactionBegin()) != NO_ERROR) {
		printf("[!] DetourTransactionBegin Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}
  
	if ((dwDetoursErr = DetourUpdateThread(GetCurrentThread())) != NO_ERROR) {
		printf("[!] DetourUpdateThread Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}
  
  	// Running MyMessageBoxA instead of g_pMessageBoxA that is MessageBoxA
	if ((dwDetoursErr = DetourAttach((PVOID)&amp;g_pMessageBoxA, MyMessageBoxA)) != NO_ERROR) {
		printf("[!] DetourAttach Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}

  	// Actual hook installing happen after `DetourTransactionCommit` - commiting the transaction
	if ((dwDetoursErr = DetourTransactionCommit()) != NO_ERROR) {
		printf("[!] DetourTransactionCommit Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h3>Detours Unhooking Routine</h3>
<p>The code snippet below shows the same routine as the previous section except this is for unhooking.</p>
<pre><code>
// Used as a unhooked MessageBoxA in `MyMessageBoxA`
// And used by `DetourAttach` &amp; `DetourDetach`
fnMessageBoxA g_pMessageBoxA = MessageBoxA;


// The function that will run instead MessageBoxA when hooked
INT WINAPI MyMessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {

	printf("[+] Original Parameters : \n");
	printf("\t - lpText	: %s\n", lpText);
	printf("\t - lpCaption	: %s\n", lpCaption);

	return g_pMessageBoxA(hWnd, "different lpText", "different lpCaption", uType);
}


BOOL Unhook() {

	DWORD	dwDetoursErr = NULL;

  	// Creating the transaction &amp; updating it
	if ((dwDetoursErr = DetourTransactionBegin()) != NO_ERROR) {
		printf("[!] DetourTransactionBegin Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}
  
	if ((dwDetoursErr = DetourUpdateThread(GetCurrentThread())) != NO_ERROR) {
		printf("[!] DetourUpdateThread Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}
  
  	// Removing the hook from MessageBoxA
	if ((dwDetoursErr = DetourDetach((PVOID)&amp;g_pMessageBoxA, MyMessageBoxA)) != NO_ERROR) {
		printf("[!] DetourDetach Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}

  	// Actual hook removal happen after `DetourTransactionCommit` - commiting the transaction
	if ((dwDetoursErr = DetourTransactionCommit()) != NO_ERROR) {
		printf("[!] DetourTransactionCommit Failed With Error : %d \n", dwDetoursErr);
		return FALSE;
	}

	return TRUE;
}

</code></pre>
<h3>The Main Function</h3>
<p>The hooking and unhooking routines previously shown do not include a 
main function. The main function is shown below which simply invokes the
 unhooked and hooked versions of <code>MessageBoxA</code>.</p>
<pre><code>int main() {

    // Will run - not hooked
	MessageBoxA(NULL, "What Do You Think About Malware Development ?", "Original MsgBox", MB_OK | MB_ICONQUESTION);


//------------------------------------------------------------------
    //  Hooking
	if (!InstallHook())
	    return -1;

//------------------------------------------------------------------	
    // Won't run - will run MyMessageBoxA instead
	MessageBoxA(NULL, "Malware Development Is Bad", "Original MsgBox", MB_OK | MB_ICONWARNING);


//------------------------------------------------------------------
    //  Unhooking
	if (!Unhook()) 
	    return -1;
		
//------------------------------------------------------------------
    //  Will run - hook removed
	MessageBoxA(NULL, "Normal MsgBox Again", "Original MsgBox", MB_OK | MB_ICONINFORMATION);
  
  	return 0;
}

</code></pre>
<h3>Demo</h3>
<p>Running the first MessageBoxA (Unhooked)</p>
<p><img src="API%20Hooking%20-%20Detours%20Library_files/detours-113692112-13168cc0-dd84-4b71-9c9a-c639b6bcd3e8.png" alt="image"></p>
<br>
<p>Running the second MessageBoxA (Hooked)
<img src="API%20Hooking%20-%20Detours%20Library_files/detours-213692174-164b9d16-059a-4587-a4d2-3e264f3ac539.png" alt="image"></p>
<br>
<p>Running the third MessageBoxA (Unhooked)
<img src="API%20Hooking%20-%20Detours%20Library_files/detours-313692221-be94d5d0-34a4-42a9-9545-a4934e5878ef.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Review the Detours library's wiki page</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Learn to utilize the Detours library to hook/unhook functions</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Compile and build the .lib file</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Test out the two provided solutions to avoid the infinite loop problem</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Hook a different WinAPI besides MessageBoxA</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-5" data-objective-id="5" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use a hooked function from within its detours function, observe the results</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/58"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/59/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/59/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/60"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="API%20Hooking%20-%20Detours%20Library_files/jquery-3.6.0.min.js"></script>
        <script src="API%20Hooking%20-%20Detours%20Library_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="API%20Hooking%20-%20Detours%20Library_files/app.4474f4d1.css"><link rel="modulepreload" href="API%20Hooking%20-%20Detours%20Library_files/app.5f3af5ce.js"><link rel="stylesheet" href="API%20Hooking%20-%20Detours%20Library_files/app.4474f4d1.css"><script type="module" src="API%20Hooking%20-%20Detours%20Library_files/app.5f3af5ce.js"></script><script src="API%20Hooking%20-%20Detours%20Library_files/navbar.js"></script>
<script src="API%20Hooking%20-%20Detours%20Library_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 59;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>