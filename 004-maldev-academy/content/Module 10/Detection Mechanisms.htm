<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Detection%20Mechanisms_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Detection%20Mechanisms_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Detection%20Mechanisms_files/css2_002.css" rel="stylesheet">
        <link href="Detection%20Mechanisms_files/css2.css" rel="stylesheet">
        <title>Detection Mechanisms</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Detection%20Mechanisms_files/app.fdbb573b.css"><link rel="stylesheet" href="Detection%20Mechanisms_files/app.fdbb573b.css"><link rel="stylesheet" href="Detection%20Mechanisms_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Detection%20Mechanisms_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 10 - Detection Mechanisms
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Detection%20Mechanisms_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Detection%20Mechanisms_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="Detection%20Mechanisms_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Detection Mechanisms</h2>
<h3>Introduction</h3>
<p>Security solutions use several techniques to detect malicious 
software. It's important for one to understand what techniques security 
solutions use to detect or classify software as being malicious.</p>
<h3>Static/Signature Detection</h3>
<p>A signature is a number of bytes or strings within a malware that 
uniquely identifies it. Other conditions can also be specified such as 
variable names and imported functions. Once the security solution scans a
 program, it attempts to match it to a list of known rules. These rules 
have to be pre-built and pushed to the security solution. <a href="https://virustotal.github.io/yara/" target="_blank">YARA</a>
 is one tool that is used by security vendors to build detection rules. 
For example, if a shellcode contains a byte sequence that begins with <code>FC 48 83 E4 F0 E8 C0 00 00 00 41 51 41 50 52 51</code>
 then this can be used to detect that the payload is a Msfvenom's x64 
exec payload. The same detection mechanism can be used against strings 
within the file.</p>
<p>Signature detection is easy to bypass but can be time-consuming. It's
 important to avoid hardcoding values in the malware that can be used to
 uniquely identify the implementation. The code that's presented 
throughout this course attempts to avoid hardcoding values that could be
 hardcoded and instead dynamically retrieves or calculates the values.</p>
<h4>Hashing Detection</h4>
<p>Hashing detection is a subset of static/signature detection. This is a
 very straightforward detection technique, and this is the fastest and 
simplest way a security solution can detect malware. This method is done
 by simply saving hashes (e.g. MD5, SHA256) about known malware in a 
database. The malware's file hash will be compared with the security 
solution's hash database to see if there's a positive match.</p>
<p>Evading hashing detection is extremely simple, although likely not 
enough on its own. By changing at least 1 byte in the file, the file 
hash will change for any hashing algorithm and therefore the file will 
have a file hash that is likely unique.</p>
<h3>Heuristic Detection</h3>
<p>Since signature detection methods are easily circumvented with minor 
changes to a malicious file, heuristic detection was introduced to spot 
suspicious characteristics that can be found in unknown, new and 
modified versions of existing malware. Depending on the security 
solution, heuristic models can consist of one or both of the following:</p>
<ul>
<li>
<p><strong>Static Heuristic Analysis</strong> - Involves decompiling the
 suspicious program and comparing code snippets to known malware that 
are already known and are in the heuristic database. If a particular 
percentage of the source code matches anything in the heuristic 
database, the program is flagged.</p>
</li>
<li>
<p><strong>Dynamic Heuristic Analysis</strong> - The program is placed inside a virtual environment or a <em>sandbox</em> which is then analyzed by the security solution for any suspicious behaviors.</p>
</li>
</ul>
<h4>Dynamic Heuristic Analysis (Sandbox Detection)</h4>
<p>Sandbox detection dynamically analyzes the behavior of a file by 
executing it in a sandboxed environment. While executing the file, the 
security solution will look for suspicious actions or actions that are 
classified as malicious. For example, allocating memory is not 
necessarily a malicious action but allocating memory, connecting to the 
internet to fetch shellcode, writing the shellcode to memory and 
executing it in that sequence is considered malicious behavior.</p>
<p>Malware developers will embed anti-sandbox techniques to detect the 
sandbox environment. If the malware confirms that it's being executed in
 a sandbox then it executes benign code, otherwise, it executes 
malicious code.</p>
<h3>Behavior-based Detection</h3>
<p>Once the malware is running, security solutions will continue to look
 for suspicious behavior committed by the running process. The security 
solution will look for suspicious indicators such as loading a DLL, 
calling a certain Windows API and connecting to the internet. Once the 
suspicious behavior is detected the security solution will conduct an 
in-memory scan of the running process. If the process is determined to 
be malicious, it is terminated.</p>
<p>Certain actions may terminate the process immediately without an 
in-memory scan being performed. For example, if the malware performs 
process injection into <code>notepad.exe</code> and connects to the 
internet, this will likely cause the process to be terminated 
immediately due to the high likelihood that this is malicious activity.</p>
<p>The best way to avoid behavior-based detection is by making the 
process behave as benign as possible (e.g. avoid spawning a cmd.exe 
child process). Additionally, in-memory scans can be circumvented with 
memory encryption. This is a more advanced topic that will be discussed 
in future modules.</p>
<h3>API Hooking</h3>
<p>API hooking is a technique used by security solutions, mainly EDRs, 
to monitor the process or code execution in real time for malicious 
behaviors. API hooking works by intercepting commonly abused APIs and 
then analyzing the parameters of these APIs in real time. This is a 
powerful way of detection because it allows the security solution to see
 the content passed to the API after it's been de-obfuscated or 
decrypted. This detection is considered a combination of real-time and 
behavior-based detection.</p>
<p>The diagram below shows a high level of API hooking.</p>
<p><img src="Detection%20Mechanisms_files/api-hooking.png" alt="API-Hooking"></p>
<p>There are several ways to bypass API hooks such as DLL unhooking and 
direct syscalls. These topics will be covered in future modules.</p>
<h3>IAT Checking</h3>
<p>One of the components that were discussed in the PE structure is the 
Import Address Table or IAT. To briefly summarize the IAT's 
functionality, it contains function names that are used in the PE at 
runtime. It also contains the libraries (DLLs) that export these 
functions. This information is valuable to a security solution since it 
knows what WinAPIs the executable is using.</p>
<p>For example, ransomware is used to encrypt files and therefore it 
will likely be using cryptographic and file management functions. When 
the security solution sees the IAT containing these types of functions 
such as <code>CreateFileA/W, SetFilePointer, Read/WriteFile, CryptCreateHash, CryptHashData, CryptGetHashParam</code>, then either the program is flagged or additional scrutiny is placed on it. The image below shows the <code>dumpbin.exe</code> tool being used to check a binary's IAT.</p>
<p><img src="Detection%20Mechanisms_files/dumpbin-imports.png" alt="image"></p>
<p>One solution that evades IAT scanning is the use of API hashing which will be discussed in future modules.</p>
<h3>Manual Analysis</h3>
<p>Despite bypassing all the aforementioned detection mechanisms, the 
blue team and malware analysts can still manually analyze the malware. A
 defender well-versed in malware reverse engineering will likely be able
 to detect the malware. Furthermore, security solutions will often send a
 copy of suspicious files to the cloud for further analysis.</p>
<p>Malware developers can implement anti-reversing techniques to make 
the process of reverse engineering more difficult. Some techniques 
include the detection of a debugger and the detection of a virtualized 
environment which are discussed in future modules.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with how YARA rules work to detect malware</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Search the following file hash on VirusTotal: e8ac867e5f51bdcf5ab7b06a8bced131</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Click the 'Behavior' tab on the file's results in VirusTotal. What suspicious/malicious behavior does this file perform?</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Click the 'Details' tab and scroll down to 'Imports'. What DLLs are imported? What WinAPIs are imported from User32.dll?</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/9"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/10/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/10/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/11"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Detection%20Mechanisms_files/jquery-3.6.0.min.js"></script>
        <script src="Detection%20Mechanisms_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Detection%20Mechanisms_files/app.4474f4d1.css"><link rel="modulepreload" href="Detection%20Mechanisms_files/app.5f3af5ce.js"><link rel="stylesheet" href="Detection%20Mechanisms_files/app.4474f4d1.css"><script type="module" src="Detection%20Mechanisms_files/app.5f3af5ce.js"></script><script src="Detection%20Mechanisms_files/navbar.js"></script>
<script src="Detection%20Mechanisms_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 10;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>