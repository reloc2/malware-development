<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/css2.css" rel="stylesheet">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/css2_002.css" rel="stylesheet">
        <title>IAT Hiding &amp; Obfuscation - API Hashing</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 55 - IAT Hiding &amp; Obfuscation - API Hashing
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/ApiHashing" target="_blank">
                    <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>IAT Hiding &amp; Obfuscation - API Hashing</h2>
<h3>Introduction</h3>
<p>In the previous two modules, two custom functions were created <code>GetProcAddressReplacement</code> and <code>GetModuleHandleReplacement</code> which replaced <code>GetProcAddress</code> and <code>GetModuleHandle</code>. This was sufficient for performing <em>Run-Time Dynamic Linking</em>
 which hides the imported functions from the IAT. However, the strings 
used within the code reveal which functions are being used. For example,
 the line below uses the functions to retrieve <code>VirtualAllocEx</code>.</p>
<pre><code>GetProcAddressReplacement(GetModuleHandleReplacement("ntdll.dll"),"VirtualAllocEx")
</code></pre>
<p>Security solutions can easily retrieve the strings within the compiled binary and recognize that <code>VirtualAllocEx</code> is being used. To solve this problem, a string hashing algorithm will be applied to both <code>GetProcAddressReplacement</code> and <code>GetModuleHandleReplacement</code>.
 Instead of performing string comparisons to acquire the specified 
module base address or function address, the functions will work with 
hash values instead.</p>
<h3>Implementing JenkinsOneAtATime32Bit</h3>
<p>The <code>GetProcAddressReplacement</code> and <code>GetModuleHandleReplacement</code> functions are renamed in this module to <code>GetProcAddressH</code> and <code>GetModuleHandleH</code>, respectively. These updated functions utilize the <em>Jenkins One At A Time</em>
 string hashing algorithm to replace the function and module name with a
 hash value that represents them. Recall that this algorithm was 
utilized through the <code>JenkinsOneAtATime32Bit</code> function that was introduced in the <em>String Hashing</em> module.</p>
<h4>Hashing Strings</h4>
<p>In order to use the functions shown in this module, it is necessary to obtain the hash value of a module name (e.g. <code>User32.dll</code>) and the hash value of the function name (e.g. <code>MessageBoxA</code>). This can be done by first printing the hashed values to the console. Ensure that the hashing algorithm uses the same seed.</p>
<pre><code>// ...

int main(){
	printf("[i] Hash Of \"%s\" Is : 0x%0.8X \n", "USER32.DLL", HASHA("USER32.DLL")); // Capitalized module name
	printf("[i] Hash Of \"%s\" Is : 0x%0.8X \n", "MessageBoxA", HASHA("MessageBoxA"));
	
  	return 0;
}
</code></pre>
<p>The above main function will output the following:</p>
<pre><code>[i] Hash Of "USER32.DLL" Is : 0x81E3778E
[i] Hash Of "MessageBoxA" Is : 0xF10E27CA
</code></pre>
<p>These hash values can now be used with the functions below.</p>
<h4>Usage</h4>
<p>The functions would be used the same way except now the hash value is passed rather than the string value.</p>
<pre><code>// 0x81E3778E is the hash of USER32.DLL
// 0xF10E27CA is the hash of MessageBoxA
fnMessageBoxA pMessageBoxA = GetProcAddressH(GetModuleHandleH(0x81E3778E),0xF10E27CA); 
</code></pre>
<h3>GetProcAddressH Function</h3>
<p><code>GetProcAddressH</code> is a function that is equivalent to <code>GetProcAddressReplacement</code> with the main difference being that the hash values of the <code>JenkinsOneAtATime32Bit</code> string hashing algorithm are employed to compare the exported function names to the input hash.</p>
<p>It's also worth noting that the code uses two macros to make the code cleaner and easier to update in the future.</p>
<ul>
<li>
<p><code>HASHA</code> - Calling HashStringJenkinsOneAtATime32BitA (ASCII)</p>
</li>
<li>
<p><code>HASHW</code> - Calling HashStringJenkinsOneAtATime32BitW (UNICODE)</p>
</li>
</ul>
<pre><code>#define HASHA(API) (HashStringJenkinsOneAtATime32BitA((PCHAR) API))
#define HASHW(API) (HashStringJenkinsOneAtATime32BitW((PWCHAR) API))
</code></pre>
<p>With that in mind, the <code>GetProcAddressH</code> is shown below. The function takes two parameters:</p>
<ul>
<li>
<p><code>hModule</code> - A handle to the DLL module that contains the function.</p>
</li>
<li>
<p><code>dwApiNameHash</code> - The hash value of the function name to get the address of.</p>
</li>
</ul>
<pre><code>FARPROC GetProcAddressH(HMODULE hModule, DWORD dwApiNameHash) {

	if (hModule == NULL || dwApiNameHash == NULL)
		return NULL;

	PBYTE pBase = (PBYTE)hModule;

	PIMAGE_DOS_HEADER         pImgDosHdr			  = (PIMAGE_DOS_HEADER)pBase;
	if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
		return NULL;

	PIMAGE_NT_HEADERS         pImgNtHdrs			  = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);
	if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
		return NULL;

	IMAGE_OPTIONAL_HEADER     ImgOptHdr			  = pImgNtHdrs-&gt;OptionalHeader;
	
	PIMAGE_EXPORT_DIRECTORY   pImgExportDir		  = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);


	PDWORD  FunctionNameArray	= (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);
	PDWORD  FunctionAddressArray	= (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);
	PWORD   FunctionOrdinalArray	= (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);

	for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++) {
		CHAR*	pFunctionName       = (CHAR*)(pBase + FunctionNameArray[i]);
		PVOID	pFunctionAddress    = (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);

		// Hashing every function name pFunctionName
		// If both hashes are equal then we found the function we want 
		if (dwApiNameHash == HASHA(pFunctionName)) {
			return pFunctionAddress;
		}
	}

	return NULL;
}
</code></pre>
<h3>GetModuleHandleH</h3>
<p>The <code>GetModuleHandleH</code> function is the same as <code>GetModuleHandleReplacement</code> with the main difference being that the hash values of the <code>JenkinsOneAtATime32Bit</code>
 string hashing algorithm will be used to compare the enumerated DLL 
names to the input hash. Notice how the function capitalizes the string 
in <code>FullDllName.Buffer</code>, therefore, the <code>dwModuleNameHash</code> parameter must be the hash value of a <strong>capitalized</strong> module name (e.g. USER32.DLL).</p>
<pre><code>HMODULE GetModuleHandleH(DWORD dwModuleNameHash) {

	if (dwModuleNameHash == NULL)
		return NULL;

#ifdef _WIN64
	PPEB      pPeb = (PEB*)(__readgsqword(0x60));
#elif _WIN32
	PPEB      pPeb = (PEB*)(__readfsdword(0x30));
#endif

	PPEB_LDR_DATA            pLdr  = (PPEB_LDR_DATA)(pPeb-&gt;Ldr);
	PLDR_DATA_TABLE_ENTRY	pDte  = (PLDR_DATA_TABLE_ENTRY)(pLdr-&gt;InMemoryOrderModuleList.Flink);

	while (pDte) {

		if (pDte-&gt;FullDllName.Length != NULL &amp;&amp; pDte-&gt;FullDllName.Length &lt; MAX_PATH) {
			
			// Converting `FullDllName.Buffer` to upper case string 
			CHAR UpperCaseDllName[MAX_PATH];

			DWORD i = 0;
			while (pDte-&gt;FullDllName.Buffer[i]) {
				UpperCaseDllName[i] = (CHAR)toupper(pDte-&gt;FullDllName.Buffer[i]);
				i++;
			}
			UpperCaseDllName[i] = '\0';

			// hashing `UpperCaseDllName` and comparing the hash value to that's of the input `dwModuleNameHash`
			if (HASHA(UpperCaseDllName) == dwModuleNameHash)
				return pDte-&gt;Reserved2[0];
			
		}
		else {
			break;
		}

		pDte = *(PLDR_DATA_TABLE_ENTRY*)(pDte);
	}

	return NULL;
}
</code></pre>
<h3>Demo</h3>
<p>This demo uses <code>GetModuleHandleH</code> and <code>GetProcAddressH</code> to call <code>MessageBoxA</code>.</p>
<pre><code>
#define USER32DLL_HASH      0x81E3778E
#define MessageBoxA_HASH    0xF10E27CA


int main() {
	
	// Load User32.dll to the current process so that GetModuleHandleH will work
	if (LoadLibraryA("USER32.DLL") == NULL) {
		printf("[!] LoadLibraryA Failed With Error : %d \n", GetLastError());
		return 0;
	}

	// Getting the handle of user32.dll using GetModuleHandleH 
	HMODULE hUser32Module = GetModuleHandleH(USER32DLL_HASH);
	if (hUser32Module == NULL){
		printf("[!] Cound'nt Get Handle To User32.dll \n");
		return -1;
	}

	// Getting the address of MessageBoxA function using GetProcAddressH
	fnMessageBoxA pMessageBoxA = (fnMessageBoxA)GetProcAddressH(hUser32Module, MessageBoxA_HASH);
	if (pMessageBoxA == NULL) {
		printf("[!] Cound'nt Find Address Of Specified Function \n");
		return -1;
	}

	// Calling MessageBoxA
	pMessageBoxA(NULL, "Building Malware With Maldev", "Wow", MB_OK | MB_ICONEXCLAMATION);

	printf("[#] Press &lt;Enter&gt; To Quit ... ");
	getchar();

	return 0;
}

</code></pre>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/api-hashing-110060375-e0d6069b-7538-4b31-add1-92f72003f85c.png" alt="image"></p>
<h3>Searching For MessageBox String</h3>
<p>Using the <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/strings" target="_blank">Strings.exe Sysinternal Tool</a> search for the string "MessageBox".</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/api-hashing-210060409-a932736a-ec54-4946-939f-750f44affa19.png" alt="image"></p>
<p>It can be observed that there is no corresponding string in our binary. <code>MessageBoxA</code>
 was successfully called without being imported into the IAT or exposed 
as a string in our binary. This is applicable for both 32-bit and 64-bit
 systems.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Read online about API hashing and its uses</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use a remote code injection technique but call the WinAPIs using GetProcAddressH and GetModuleHandleH</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/54"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/55/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/55/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/56"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/jquery-3.6.0.min.js"></script>
        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.4474f4d1.css"><link rel="modulepreload" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.5f3af5ce.js"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.4474f4d1.css"><script type="module" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/app.5f3af5ce.js"></script><script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/navbar.js"></script>
<script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20API%20Hashing_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 55;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>