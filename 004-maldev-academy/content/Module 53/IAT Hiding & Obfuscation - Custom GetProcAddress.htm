<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/css2.css" rel="stylesheet">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/css2_002.css" rel="stylesheet">
        <title>IAT Hiding &amp; Obfuscation - Custom GetProcAddress</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 53 - IAT Hiding &amp; Obfuscation - Custom GetProcAddress
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/GetProcAddressReplacement" target="_blank">
                    <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>IAT Hiding &amp; Obfuscation - Custom GetProcAddress</h2>
<h3>Introduction</h3>
<p>The <code>GetProcAddress</code> WinAPI retrieves the address of an exported function from a specified module handle. The function returns <code>NULL</code> if the function name is not found in the specified module handle.</p>
<p>In this module, a function that replaces <code>GetProcAddress</code> will be implemented. The new function's prototype is shown below.</p>
<pre><code>FARPROC GetProcAddressReplacement(IN HMODULE hModule, IN LPCSTR lpApiName) {}
</code></pre>
<h3>How GetProcAddress Works</h3>
<p>The first point that must be addressed is how a function's address is found and retrieved by the <code>GetProcAddress</code> WinAPI.</p>
<p>The <code>hModule</code> parameter is the base address of the loaded 
DLL. This is the address where the DLL module is found in the address 
space of the process. With that in mind, retrieving a function's address
 is found by looping through the exported functions inside the provided 
DLL and checking if the target function's name exists. If there's a 
valid match, retrieve the address.</p>
<p>To access the exported functions, it's necessary to access the DLL's 
export table and loop through it in search of the target function name.</p>
<h3>Recall - Export Table Structure</h3>
<p>Recall the <em>Parsing PE Headers</em> module, it was mentioned that the export table is a structure defined as <code>IMAGE_EXPORT_DIRECTORY</code>.</p>
<pre><code>typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     // RVA from base of image
    DWORD   AddressOfNames;         // RVA from base of image
    DWORD   AddressOfNameOrdinals;  // RVA from base of image
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
</code></pre>
<p>The relevant members of this structure for this module are the last three.</p>
<ul>
<li>
<p><code>AddressOfFunctions</code> - Specifies the address of an array of addresses of the exported functions.</p>
</li>
<li>
<p><code>AddressOfNames</code> - Specifies the address of an array of addresses of the names of the exported functions.</p>
</li>
<li>
<p><code>AddressOfNameOrdinals</code> - Specifies the address of an array of <em>ordinal numbers</em> for the exported functions.</p>
</li>
</ul>
<h3>Recall - Accessing the Export Table</h3>
<p>Let's recall how to retrieve the export directory, <code>IMAGE_EXPORT_DIRECTORY</code>. The code snippet below should be familiar since it was explained in the <em>Parsing PE Headers</em> module.</p>
<p>The <code>pBase</code> variable at the beginning of the function is 
the only new addition in the code snippet. This variable is created to 
avoid type-casting later on when converting relative virtual addresses 
(RVAs) to virtual addresses (VAs). The Visual Studio compiler will throw
 an error when adding a <code>PVOID</code> data type to a value, and therefore <code>hModule</code> was casted to <code>PBYTE</code> instead.</p>
<pre><code>FARPROC GetProcAddressReplacement(IN HMODULE hModule, IN LPCSTR lpApiName) {

	// We do this to avoid casting each time we use 'hModule'
	PBYTE pBase = (PBYTE) hModule;
	
	// Getting the DOS header and performing a signature check
	PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;
	if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE) 
		return NULL;
	
	// Getting the NT headers and performing a signature check
	PIMAGE_NT_HEADERS	pImgNtHdrs	= (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);
	if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE) 
		return NULL;

	// Getting the optional header
	IMAGE_OPTIONAL_HEADER ImgOptHdr = pImgNtHdrs-&gt;OptionalHeader;

	// Getting the image export table
	// This is the export directory
	PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY) (pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
  
    // ...
}
</code></pre>
<h3>Accessing Exported Functions</h3>
<p>After obtaining a pointer to the <code>IMAGE_EXPORT_DIRECTORY</code> structure, it's possible to loop through the exported functions. The <code>NumberOfFunctions</code> member specifies the number of functions exported by <code>hModule</code>. As a result, the maximum iterations of the loop should be equivalent to <code>NumberOfFunctions</code>.</p>
<pre><code>for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++){
  // Searching for the target exported function 
}
</code></pre>
<h3>Building The Search Logic</h3>
<p>The next step is to build the search logic for the functions. The building of the search logic requires the use of <code>AddressOfFunctions</code>, <code>AddressOfNames</code>, and <code>AddressOfNameOrdinals</code>, which are all arrays containing RVAs referencing a single unique function in the export table.</p>
<pre><code>typedef struct _IMAGE_EXPORT_DIRECTORY {
    // ...
	// ...
    DWORD   AddressOfFunctions;     // RVA from base of image
    DWORD   AddressOfNames;         // RVA from base of image
    DWORD   AddressOfNameOrdinals;  // RVA from base of image
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
</code></pre>
<p>Since these elements are RVAs, the base address of the module, <code>pBase</code>,
 must be added to get the VA. The first two code snippets should be 
straightforward. They retrieve the function's name and the function's 
address, respectively. The third snippet retrieves the function's <em>ordinal</em>, which is explained in detail in the next section.</p>
<pre><code>// Getting the function's names array pointer
PDWORD FunctionNameArray 	= (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);

// Getting the function's addresses array pointer
PDWORD FunctionAddressArray 	= (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);

// Getting the function's ordinal array pointer
PWORD  FunctionOrdinalArray 	= (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);
</code></pre>
<h3>Understanding Ordinals</h3>
<p>An ordinal of a function is an integer value that represents the 
position of the function within an exported function table in the DLL. 
The export table is organized as a list (array) of function pointers, 
with each function being assigned an ordinal value based on its position
 in the table.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/ordinals-getproc.png" alt="image"></p>
<p>It's important to note that the ordinal value is used to identify a function's <strong>address</strong>
 rather than its name. The export table operates this way to handle 
cases where the function name is not available or is not unique. In 
addition to that, fetching a function's address using its ordinal is 
faster than using its name. For this reason, the operating system uses 
the ordinal to retrieve a function's address.</p>
<p>For example, <code>VirtualAlloc</code>'s address is equal to <code>FunctionAddressArray[ordinal of VirtualAlloc]</code>, where <code>FunctionAddressArray</code> is the function's addresses array pointer fetched from the export table.</p>
<p>With this in mind, the following code snippet will print the ordinal 
value of each function in the function array of a specified module.</p>
<pre><code>// Getting the function's names array pointer
PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);
	
// Getting the function's addresses array pointer
PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);
	
// Getting the function's ordinal array pointer
PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);

// Looping through all the exported functions
for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++){

	// Getting the name of the function
	CHAR* pFunctionName		= (CHAR*)(pBase + FunctionNameArray[i]);
	
	// Getting the ordinal of the function
	WORD wFunctionOrdinal = FunctionOrdinalArray[i];
	
	// Printing
	printf("[ %0.4d ] NAME: %s -\t ORDINAL: %d\n", i, pFunctionName, wFunctionOrdinal);
}
</code></pre>
<h3>GetProcAddressReplacement Partial Demo</h3>
<p>Although <code>GetProcAddressReplacement</code> is not complete yet, 
it should now output the function names and their associated ordinal 
numbers. To test out what's been built so far, call the function with 
the following parameters:</p>
<pre><code>GetProcAddressReplacement(GetModuleHandleA("ntdll.dll"), NULL);
</code></pre>
<p>As expected, the function name and the function's ordinal are printed to the console.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/custom-getproc-109913387-f0fdcc3d-e9aa-48f3-bb97-615758130ba.png" alt="image"></p>
<h3>Ordinal To Address</h3>
<p>With the function's ordinal value, it's possible to get the function's address.</p>
<pre><code>// Getting the function's names array pointer
PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);
	
// Getting the function's addresses array pointer
PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);
	
// Getting the function's ordinal array pointer
PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);


// Looping through all the exported functions
for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++){

	// Getting the name of the function
	CHAR* pFunctionName = (CHAR*)(pBase + FunctionNameArray[i]);
	
	// Getting the ordinal of the function
	WORD wFunctionOrdinal = FunctionOrdinalArray[i];
	
	// Getting the address of the function through it's ordinal
	PVOID pFunctionAddress = (PVOID)(pBase + FunctionAddressArray[wFunctionOrdinal]);
	
	printf("[ %0.4d ] NAME: %s -\t ADDRESS: 0x%p  -\t ORDINAL: %d\n", i, pFunctionName, pFunctionAddress, wFunctionOrdinal);
}
</code></pre>
<p>To verify the functionality, open <code>notepad.exe</code> using xdbg and check the exports of <code>ntdll.dll</code>.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/custom-getproc-209914072-4c8104f3-6208-42c4-8822-479c44d291c.png" alt="image"></p>
<p>The image above shows the address of <code>A_SHAUpdate</code> being <code>0x00007FFD384D2D10</code> in both xdbg and using the <code>GetProcAddressReplacement</code>
 function. Although notice that the ordinals are different for the 
function due to the Windows Loader generating a new array of ordinals 
for every process.</p>
<h3>GetProcAddressReplacement Code</h3>
<p>The last bit of code needed for the function to be complete is a way 
to compare the exported function names to the target function name, <code>lpApiName</code>. This is easily done using <code>strcmp</code>. Then finally, return the function address when there is a match.</p>
<pre><code>FARPROC GetProcAddressReplacement(IN HMODULE hModule, IN LPCSTR lpApiName) {

	// We do this to avoid casting at each time we use 'hModule'
	PBYTE pBase = (PBYTE)hModule;
	
	// Getting the dos header and doing a signature check
	PIMAGE_DOS_HEADER	pImgDosHdr		= (PIMAGE_DOS_HEADER)pBase;
	if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE) 
		return NULL;
	
	// Getting the nt headers and doing a signature check
	PIMAGE_NT_HEADERS	pImgNtHdrs		= (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);
	if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE) 
		return NULL;

	// Getting the optional header
	IMAGE_OPTIONAL_HEADER	ImgOptHdr	= pImgNtHdrs-&gt;OptionalHeader;

	// Getting the image export table
	PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY) (pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

	// Getting the function's names array pointer
	PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);
	
	// Getting the function's addresses array pointer
	PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);
	
	// Getting the function's ordinal array pointer
	PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);


	// Looping through all the exported functions
	for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++){
		
		// Getting the name of the function
		CHAR* pFunctionName = (CHAR*)(pBase + FunctionNameArray[i]);
		
		// Getting the address of the function through its ordinal
		PVOID pFunctionAddress	= (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);
		
		// Searching for the function specified
		if (strcmp(lpApiName, pFunctionName) == 0){
			printf("[ %0.4d ] FOUND API -\t NAME: %s -\t ADDRESS: 0x%p  -\t ORDINAL: %d\n", i, pFunctionName, pFunctionAddress, FunctionOrdinalArray[i]);
			return pFunctionAddress;
		}
	}
	
	return NULL;
}
</code></pre>
<h3>GetProcAddressReplacement Final Demo</h3>
<p>The image below shows the output of both <code>GetProcAddress</code> and <code>GetProcAddressReplacement</code> searching for the address of <code>NtAllocateVirtualMemory</code>. As expected, both have resulted in the correct function address and therefore a custom implementation of <code>GetProcAddress</code> was successfully built.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/custom-getproc-309915517-9f411b29-61c3-4104-9d05-7fa8977ddec.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the relation between a function's ordinal and its address</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Fetch the export table of a module then loop through its exported functions</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use GetProcAddressReplacement with at least two WinAPI functions</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/52"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/53/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/53/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/54"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/jquery-3.6.0.min.js"></script>
        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.4474f4d1.css"><link rel="modulepreload" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.5f3af5ce.js"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.4474f4d1.css"><script type="module" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/app.5f3af5ce.js"></script><script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/navbar.js"></script>
<script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Custom%20GetProcAddress_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 53;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>