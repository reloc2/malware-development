<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/css2.css" rel="stylesheet">
        <link href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/css2_002.css" rel="stylesheet">
        <title>Anti-Virtual Environments - Multiple Techniques</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.fdbb573b.css"><link rel="stylesheet" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.fdbb573b.css"><link rel="stylesheet" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 73 - Anti-Virtual Environments - Multiple Techniques
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/AntiVirtualEnvTechs" target="_blank">
                    <img src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Anti-Virtual Environments - Multiple Techniques</h2>
<h3>Introduction</h3>
<p>Anti-virtualization was already introduced in an earlier module. This
 module will go through Anti-Virtual Environment (AVE) techniques.</p>
<h3>Anti-Virtualization Via Hardware Specs</h3>
<p>Generally speaking, virtualized environments do not have full access 
to the host machine's hardware. The lack of full access to the hardware 
can be used by malware to detect if it's being executed inside a virtual
 environment or sandbox. Keep in mind that there is no guarantee of 
complete accuracy because the machine could simply be running with low 
hardware specs. The hardware specs that will be checked are the 
following:</p>
<ul>
<li>
<p>CPU - Check if there are fewer than 2 processors.</p>
</li>
<li>
<p>RAM - Check if there are less than 2 gigabytes.</p>
</li>
<li>
<p>Number of USBs previously mounted - Check if there are fewer than 2 USBs.</p>
</li>
</ul>
<h4>CPU Check</h4>
<p>The CPU check can be done using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsysteminfo" target="_blank">GetSystemInfo</a> WinAPI. This function returns an <a href="https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/ns-sysinfoapi-system_info" target="_blank">SYSTEM_INFO</a> structure that contains information about the system, including the number of processors.</p>
<pre><code>  SYSTEM_INFO   SysInfo   = { 0 };
	
  GetSystemInfo(&amp;SysInfo);
  if (SysInfo.dwNumberOfProcessors &lt; 2){
    // possibly a virtualized environment
  }
</code></pre>
<h4>RAM Check</h4>
<p>Checking the RAM storage can be done via the <a href="https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-globalmemorystatusex" target="_blank">GlobalMemoryStatusEx</a> WinAPI. This function returns a <a href="https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/ns-sysinfoapi-memorystatusex" target="_blank">MEMORYSTATUSEX</a>
 structure containing information about the current state of the 
physical and virtual memory in the system. The RAM storage can be found 
through the <code>ullTotalPhys</code> member. It contains the amount of current physical memory in bytes.</p>
<pre><code>  MEMORYSTATUSEX MemStatus = { .dwLength = sizeof(MEMORYSTATUSEX) };
  
  if (!GlobalMemoryStatusEx(&amp;MemStatus)) {
    printf("\n\t[!] GlobalMemoryStatusEx Failed With Error : %d \n", GetLastError());
  }
  
  if ((DWORD)MemStatus.ullTotalPhys &lt;= (DWORD)(2 * 1073741824)) {
     // Possibly a virtualized environment
  }
</code></pre>
<p>Note that <code>2 * 1073741824</code> is the size of two gigabytes in bytes.</p>
<h4>Previously Mounted USBs Check</h4>
<p>Lastly, the number of USBs previously mounted in the system can be checked via the <code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Enum\USBSTOR</code> registry key. Retrieving the registry key's value is done using the <code>RegOpenKeyExA</code> and <code>RegQueryInfoKeyA</code> WinAPIs.</p>
<pre><code>
  HKEY    hKey            = NULL;
  DWORD   dwUsbNumber     = NULL;
  DWORD   dwRegErr        = NULL;
  
  
  if ((dwRegErr = RegOpenKeyExA(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Enum\\USBSTOR", NULL, KEY_READ, &amp;hKey)) != ERROR_SUCCESS) {
    printf("\n\t[!] RegOpenKeyExA Failed With Error : %d | 0x%0.8X \n", dwRegErr, dwRegErr);
  }

  if ((dwRegErr = RegQueryInfoKeyA(hKey, NULL, NULL, NULL, &amp;dwUsbNumber, NULL, NULL, NULL, NULL, NULL, NULL, NULL)) != ERROR_SUCCESS) {
    printf("\n\t[!] RegQueryInfoKeyA Failed With Error : %d | 0x%0.8X \n", dwRegErr, dwRegErr);
  }
	
  // Less than 2 USBs previously mounted 
  if (dwUsbNumber &lt; 2) {
    // possibly a virtualized environment
  }
  
</code></pre>
<h3>Anti-Virtualization Via Hardware Specs Code</h3>
<p>The previous code snippets are combined into one function, <code>IsVenvByHardwareCheck</code>. This function returns <code>TRUE</code> if it detects a virtualized environment.</p>
<pre><code>BOOL IsVenvByHardwareCheck() {

	SYSTEM_INFO		SysInfo			= { 0 };
	MEMORYSTATUSEX	MemStatus		= { .dwLength = sizeof(MEMORYSTATUSEX) };
	HKEY			hKey			= NULL;
	DWORD			dwUsbNumber		= NULL;
	DWORD			dwRegErr		= NULL;

	// CPU CHECK
	GetSystemInfo(&amp;SysInfo);

	// Less than 2 processors
	if (SysInfo.dwNumberOfProcessors &lt; 2){
		return TRUE;
	}
	
	// RAM CHECK
	if (!GlobalMemoryStatusEx(&amp;MemStatus)) {
		printf("\n\t[!] GlobalMemoryStatusEx Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Less than 2 gb of ram
	if ((DWORD)MemStatus.ullTotalPhys &lt; (DWORD)(2 * 1073741824)) {
		return TRUE;
	}

	
	// NUMBER OF USBs PREVIOUSLY MOUNTED
	if ((dwRegErr = RegOpenKeyExA(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Enum\\USBSTOR", NULL, KEY_READ, &amp;hKey)) != ERROR_SUCCESS) {
		printf("\n\t[!] RegOpenKeyExA Failed With Error : %d | 0x%0.8X \n", dwRegErr, dwRegErr);
		return FALSE;
	}

	if ((dwRegErr = RegQueryInfoKeyA(hKey, NULL, NULL, NULL, &amp;dwUsbNumber, NULL, NULL, NULL, NULL, NULL, NULL, NULL)) != ERROR_SUCCESS) {
		printf("\n\t[!] RegQueryInfoKeyA Failed With Error : %d | 0x%0.8X \n", dwRegErr, dwRegErr);
		return FALSE;
	}
	
	// Less than 2 usbs previously mounted 
	if (dwUsbNumber &lt; 2) {
		return TRUE;
	}
	
	RegCloseKey(hKey);
	
	return FALSE;
}
</code></pre>
<h3>Anti-Virtualization Via Machine Resolution</h3>
<p>In a sandbox environment, the resolution and display properties of 
the machine are often set to a standardized and consistent value, which 
can be different from the resolution and display properties of a 
real-world machine. Therefore, machines with low resolutions can be used
 as an indicator of a virtualized environment.</p>
<p>From a programming perspective, the first step will be to enumerate the display monitors of a system via the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors" target="_blank">EnumDisplayMonitors</a> WinAPI.</p>
<p>The <code>EnumDisplayMonitors</code> function requires a callback function to be executed for every display monitor it detects, in this callback function, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmonitorinfow" target="_blank">GetMonitorInfoW</a> WinAPI must be called. This function retrieves the resolution of the display monitor.</p>
<p>The fetched information is returned as a <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-monitorinfo" target="_blank">MONITORINFO</a> structure by <code>GetMonitorInfoW</code>, which is shown below.</p>
<pre><code>typedef struct tagMONITORINFO {
  DWORD cbSize;			// The size of the structure
  RECT  rcMonitor;		// Display monitor rectangle, expressed in virtual-screen coordinates
  RECT  rcWork;			// Work area rectangle of the display monitor, expressed in virtual-screen coordinates
  DWORD dwFlags;		    // Represents attributes of the display monito
} MONITORINFO, *LPMONITORINFO;
</code></pre>
<p>The <code>rcMonitor</code> member contains the information that's needed. This member is also a structure of type <a href="https://learn.microsoft.com/en-us/windows/win32/api/windef/ns-windef-rect" target="_blank">RECT</a> that defines a rectangle through the X and Y coordinates of its upper-left and lower-right corners.</p>
<p>After retrieving the values of the <code>RECT</code> structure, some calculations are made to determine the actual coordinates of the display:</p>
<ol>
<li>
<p><code>MONITORINFO.rcMonitor.right - MONITORINFO.rcMonitor.left</code> - This gives us the width (X value)</p>
</li>
<li>
<p><code>MONITORINFO.rcMonitor.top - MONITORINFO.rcMonitor.bottom</code> - This gives us the height (Y value)</p>
</li>
</ol>
<h3>Anti-Virtualization Via Machine Resolution Code</h3>
<p>The <code>CheckMachineResolution</code> function uses the described process in which the machine's resolution is calculated, by executing the <code>ResolutionCallback</code> callback.</p>
<pre><code>// The callback function called whenever 'EnumDisplayMonitors' detects an display
BOOL CALLBACK ResolutionCallback(HMONITOR hMonitor, HDC hdcMonitor, LPRECT lpRect, LPARAM ldata) {
	
	int             X       = 0,
	                Y       = 0;
	MONITORINFO     MI      = { .cbSize = sizeof(MONITORINFO) };

	if (!GetMonitorInfoW(hMonitor, &amp;MI)) {
		printf("\n\t[!] GetMonitorInfoW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Calculating the X coordinates of the desplay
	X = MI.rcMonitor.right - MI.rcMonitor.left;
	
	// Calculating the Y coordinates of the desplay
	Y = MI.rcMonitor.top - MI.rcMonitor.bottom;

	// If numbers are in negative value, reverse them 
	if (X &lt; 0)
		X = -X;
	if (Y &lt; 0)
		Y = -Y;
	
	if ((X != 1920 &amp;&amp; X != 2560 &amp;&amp; X != 1440) || (Y != 1080 &amp;&amp; Y != 1200 &amp;&amp; Y != 1600 &amp;&amp; Y != 900))
		*((BOOL*)ldata) = TRUE; // sandbox is detected

	return TRUE;
}


BOOL CheckMachineResolution() {

	BOOL	SANDBOX		= FALSE;
	
	// SANDBOX will be set to TRUE by 'EnumDisplayMonitors' if a sandbox is detected
	EnumDisplayMonitors(NULL, NULL, (MONITORENUMPROC)ResolutionCallback, (LPARAM)(&amp;SANDBOX));
	
	return SANDBOX;
}
</code></pre>
<h3>Anti-Virtualization Via File Name</h3>
<p>Sandboxes will often rename files as a method of classification (e.g.
 renaming it to its MD5 hash). This process generally results in an 
arbitrary file name with a mixture of letters and numbers.</p>
<p>The function <code>ExeDigitsInNameCheck</code> shown below is used to count the number of digits in the current filename. It uses <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea" target="_blank">GetModuleFileNameA</a> to get the file name (which includes the path) and then <a href="https://learn.microsoft.com/en-us/windows/win32/api/shlwapi/nf-shlwapi-pathfindfilenamea" target="_blank">PathFindFileNameA</a> to separate the file name from the path.</p>
<p>Finally, the <a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/isdigit-iswdigit-isdigit-l-iswdigit-l?view=msvc-170" target="_blank">isdigit</a> function is used to determine if the characters in the file name are digits. If more than 3 digits are in the file name, then <code>ExeDigitsInNameCheck</code> will assume it is in a sandbox and return <code>TRUE</code>.</p>
<pre><code>BOOL ExeDigitsInNameCheck() {

	CHAR	Path			[MAX_PATH * 3];
	CHAR	cName			[MAX_PATH];
	DWORD   dwNumberOfDigits	= NULL;

	// Getting the current filename (with the full path)
	if (!GetModuleFileNameA(NULL, Path, MAX_PATH * 3)) {
		printf("\n\t[!] GetModuleFileNameA Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	
	// Prevent a buffer overflow - getting the filename from the full path
	if (lstrlenA(PathFindFileNameA(Path)) &lt; MAX_PATH)
		lstrcpyA(cName, PathFindFileNameA(Path));

	// Counting number of digits
	for (int i = 0; i &lt; lstrlenA(cName); i++){
		if (isdigit(cName[i]))
			dwNumberOfDigits++;
	}

	// Max digits allowed: 3 
	if (dwNumberOfDigits &gt; 3){
		return TRUE;
	}

	return FALSE;
}
</code></pre>
<h3>Anti-Virtualization Via Number Of Running Processes</h3>
<p>Another way of detecting a virtualized environment is by checking the
 number of running processes on the system. Sandboxes will generally not
 have many applications installed and therefore will have fewer 
processes running. Similarly to the previous methods, this is not a 
silver bullet that will guarantee the system to be a sandbox. A Windows 
system should have at least 60-70 processes running.</p>
<p>The processes will be enumerated using the <code>EnumProcesses</code> technique. The <code>CheckMachineProcesses</code> function returns <code>TRUE</code> if it detects a sandbox which is if the system is running less than 50 processes.</p>
<pre><code>BOOL CheckMachineProcesses() {

	DWORD		adwProcesses	[1024];
	DWORD		dwReturnLen		= NULL,
			    dwNmbrOfPids		= NULL;

	if (!EnumProcesses(adwProcesses, sizeof(adwProcesses), &amp;dwReturnLen)) {
		printf("\n\t[!] EnumProcesses Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	dwNmbrOfPids = dwReturnLen / sizeof(DWORD);

	// If less than 50 process, it's possibly a sandbox	
	if (dwNmbrOfPids &lt; 50)	 
		return TRUE;

	return FALSE;
}
</code></pre>
<h3>Anti-Virtualization Via User Interaction</h3>
<p>Sandboxes often run in a headless environment, meaning that there is 
no display or peripherals, such as a keyboard and mouse. Headless 
environments are also typically automated and triggered by scripts or 
other tools. The lack of user interaction can be an indicator of a 
possible sandbox environment. For example, the malware can check if an 
environment does not receive any mouse clicks or keystrokes over a 
certain period.</p>
<p>Recall the <em>API Hooking - Using Windows APIs</em> module where the <code>SetWindowsHookExW</code> and <code>CallNextHookEx</code> WinAPIs were used to track mouse clicks. The same technique is applied in the function below, <code>MouseClicksLogger</code>.
 If it does not receive more than 5 mouse clicks over a period of 20 
seconds then it will assume it's inside a sandboxed environment.</p>
<pre><code>// Monitor mouse clicks for 20 seconds
#define MONITOR_TIME   20000 

// Global hook handle variable
HHOOK g_hMouseHook      = NULL;
// Global mouse clicks counter
DWORD g_dwMouseClicks   = NULL;

// The callback function that will be executed whenever the user clicked a mouse button
LRESULT CALLBACK HookEvent(int nCode, WPARAM wParam, LPARAM lParam){

    // WM_RBUTTONDOWN :         "Right Mouse Click"
    // WM_LBUTTONDOWN :         "Left Mouse Click"
    // WM_MBUTTONDOWN :         "Middle Mouse Click"

    if (wParam == WM_LBUTTONDOWN || wParam == WM_RBUTTONDOWN || wParam == WM_MBUTTONDOWN) {
        printf("[+] Mouse Click Recorded \n");
        g_dwMouseClicks++;
    }

    return CallNextHookEx(g_hMouseHook, nCode, wParam, lParam);
}


BOOL MouseClicksLogger(){
    
    MSG         Msg         = { 0 };

    // Installing hook 
    g_hMouseHook = SetWindowsHookExW(
        WH_MOUSE_LL,
        (HOOKPROC)HookEvent,
        NULL,
        NULL
    );
    if (!g_hMouseHook) {
        printf("[!] SetWindowsHookExW Failed With Error : %d \n", GetLastError());
    }

    // Process unhandled events
    while (GetMessageW(&amp;Msg, NULL, NULL, NULL)) {
        DefWindowProcW(Msg.hwnd, Msg.message, Msg.wParam, Msg.lParam);
    }
    
    return TRUE;
}



int main() {

    HANDLE  hThread         = NULL;
    DWORD   dwThreadId      = NULL;

    // running the hooking function in a seperate thread for 'MONITOR_TIME' ms
    hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)MouseClicksLogger, NULL, NULL, &amp;dwThreadId);
    if (hThread) {
        printf("\t\t&lt;&lt;&gt;&gt; Thread %d Is Created To Monitor Mouse Clicks For %d Seconds &lt;&lt;&gt;&gt;\n\n", dwThreadId, (MONITOR_TIME / 1000));
        WaitForSingleObject(hThread, MONITOR_TIME);
    }

    // unhooking
    if (g_hMouseHook &amp;&amp; !UnhookWindowsHookEx(g_hMouseHook)) {
        printf("[!] UnhookWindowsHookEx Failed With Error : %d \n", GetLastError());
    }

    // the test
    printf("[i] Monitored User's Mouse Clicks : %d ... ", g_dwMouseClicks);
    // if less than 5 clicks - its a sandbox
    if (g_dwMouseClicks &gt; 5)
        printf("[+] Passed The Test \n");
    else
        printf("[-] Posssibly A Virtual Environment \n");


    printf("[#] Press &lt;Enter&gt; To Quit ... ");
    getchar();

    return 0;
}
</code></pre>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Test out the various anti-virtualization techniques shown in the module</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Find other functions that can be used for anti-virtualization purposes</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement another anti-virtualization technique that isn't mentioned in this module</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/72"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/73/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/73/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/74"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/jquery-3.6.0.min.js"></script>
        <script src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.4474f4d1.css"><link rel="modulepreload" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.5f3af5ce.js"><link rel="stylesheet" href="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.4474f4d1.css"><script type="module" src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/app.5f3af5ce.js"></script><script src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/navbar.js"></script>
<script src="Anti-Virtual%20Environments%20-%20Multiple%20Techniques_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 73;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>