<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="String%20Hashing_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="String%20Hashing_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="String%20Hashing_files/css2.css" rel="stylesheet">
        <link href="String%20Hashing_files/css2_002.css" rel="stylesheet">
        <title>String Hashing</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="String%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="String%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="String%20Hashing_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="String%20Hashing_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 51 - String Hashing
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="String%20Hashing_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="String%20Hashing_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="String%20Hashing_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/StringHashing" target="_blank">
                    <img src="String%20Hashing_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>String Hashing</h2>
<h3>Introduction</h3>
<p>Hashing is a technique that is used to create a fixed-size 
representation of a piece of data, called a hash value or hash code. 
Hashing algorithms are designed to be one-way functions, meaning that it
 is computationally infeasible to determine the original input data 
using the hash value. The hash code is generally shorter in size, and 
faster to work with. When comparing strings, hashing can be used to 
quickly determine if two strings are equal, as compared to comparing the
 strings themselves, especially if the strings are long.</p>
<p>In the context of malware development, string hashing is a useful 
approach for hiding strings used in an implementation, as strings can be
 used as signatures to help security vendors detect malicious binaries.</p>
<h3>String hashing</h3>
<p>This module introduces some string hashing algorithms. It is 
essential to understand that the output of these algorithms is a number 
expressed in hexadecimal format, as it is neater and more compact. The 
following string hashing algorithms are discussed in this module.</p>
<ul>
<li>
<p>Dbj2</p>
</li>
<li>
<p>JenkinsOneAtATime32Bit</p>
</li>
<li>
<p>LoseLose</p>
</li>
<li>
<p>Rotr32</p>
</li>
</ul>
<p>There are many more string hashing algorithms available than those discussed in this module some of which can be found in <a href="https://github.com/vxunderground/VX-API" target="_blank">VX-API GitHub repository</a>.</p>
<h3>Djb2</h3>
<p>Djb2 is a simple and fast hashing algorithm, primarily used for 
generating hash values for strings, but also applicable to other types 
of data. It works by iterating over the characters in the input string 
and using each one to update a running hash value according to a 
specific algorithm which is demonstrated in the snippet below.</p>
<pre><code>hash = ((hash &lt;&lt; 5) + hash) + c
</code></pre>
<p><code>hash</code> is the current hash value, <code>c</code> is the current character in the input string, and <code>&lt;&lt;</code> is the bitwise left shift operator.</p>
<p>The resulting hash value is a positive integer that is unique to the 
input string. Djb2 is known to produce good distributions of hash 
values, resulting in a low probability of collisions between different 
strings and their respective hash values.</p>
<p>The Djb2 implementation shown below is from the <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/HashStringDjb2.cpp" target="_blank">VX-API GitHub repository</a>.</p>
<pre><code>#define INITIAL_HASH	3731  // added to randomize the hash
#define INITIAL_SEED	7     

// generate Djb2 hashes from Ascii input string
DWORD HashStringDjb2A(_In_ PCHAR String)
{
	ULONG Hash = INITIAL_HASH;
	INT c;

	while (c = *String++)
		Hash = ((Hash &lt;&lt; INITIAL_SEED) + Hash) + c;

	return Hash;
}

// generate Djb2 hashes from wide-character input string
DWORD HashStringDjb2W(_In_ PWCHAR String)
{
	ULONG Hash = INITIAL_HASH;
	INT c;

	while (c = *String++)
		Hash = ((Hash &lt;&lt; INITIAL_SEED) + Hash) + c;

	return Hash;
}
</code></pre>
<h3>JenkinsOneAtATime32Bit</h3>
<p>The JenkinsOneAtATime32Bit algorithm works by iterating over the 
characters of the input string and incrementally updating a running hash
 value according to the value of each character. The algorithm for 
updating the hash value is demonstrated in the snippet below.</p>
<pre><code>hash += c;
hash += (hash &lt;&lt; 10);
hash ^= (hash &gt;&gt; 6);
</code></pre>
<p><code>hash</code> is the current hash value and <code>c</code> is the current character in the input string.</p>
<p>The resulting hash value is a 32-bit integer that is unique to the 
input string. JenkinsOneAtATime32Bit is known to produce relatively good
 distributions of hash values, resulting in a low probability of 
collisions between different strings and their respective hash values.</p>
<p>The JenkinsOneAtATime32Bit implementation shown below is from the <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/HashStringJenkinsOneAtATime32Bit.cpp" target="_blank">VX-API GitHub repository</a>.</p>
<pre><code>#define INITIAL_SEED	7	

// Generate JenkinsOneAtATime32Bit hashes from Ascii input string
UINT32 HashStringJenkinsOneAtATime32BitA(_In_ PCHAR String)
{
	SIZE_T Index = 0;
	UINT32 Hash = 0;
	SIZE_T Length = lstrlenA(String);

	while (Index != Length)
	{
		Hash += String[Index++];
		Hash += Hash &lt;&lt; INITIAL_SEED;
		Hash ^= Hash &gt;&gt; 6;
	}

	Hash += Hash &lt;&lt; 3;
	Hash ^= Hash &gt;&gt; 11;
	Hash += Hash &lt;&lt; 15;

	return Hash;
}

// Generate JenkinsOneAtATime32Bit hashes from wide-character input string
UINT32 HashStringJenkinsOneAtATime32BitW(_In_ PWCHAR String)
{
	SIZE_T Index = 0;
	UINT32 Hash = 0;
	SIZE_T Length = lstrlenW(String);

	while (Index != Length)
	{
		Hash += String[Index++];
		Hash += Hash &lt;&lt; INITIAL_SEED;
		Hash ^= Hash &gt;&gt; 6;
	}

	Hash += Hash &lt;&lt; 3;
	Hash ^= Hash &gt;&gt; 11;
	Hash += Hash &lt;&lt; 15;

	return Hash;
}

</code></pre>
<h3>LoseLose</h3>
<p>The LoseLose algorithm calculates the hash value of an input string 
by iterating over each character in the string and summing the ASCII 
values of each character. The algorithm for updating the hash value is 
demonstrated in the snippet below.</p>
<pre><code>hash = 0;
hash += c; // For each character c in the input string perform
</code></pre>
<p>The hash value resulting from the LoseLose algorithm is an integer 
that is unique to the input string. However, due to the lack of good 
distribution of hash values, collisions are likely to occur. To address 
this, the formula of the algorithm has been updated, as shown below.</p>
<pre><code>hash = 0;
hash += c; // For each character c in the input string
hash *= c + 2;  // For more randomization
</code></pre>
<p>This does not make it a good hashing algorithm but does somewhat 
improve it. The LoseLose implementation shown below is from the <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/HashStringLoseLose.cpp" target="_blank">VX-API GitHub repository</a>.</p>
<pre><code>#define INITIAL_SEED	2

// Generate LoseLose hashes from ASCII input string
DWORD HashStringLoseLoseA(_In_ PCHAR String)
{
	ULONG Hash = 0;
	INT c;

	while (c = *String++) {
		Hash += c;
		Hash *= c + INITIAL_SEED;	// update
	}
	return Hash;
}

// Generate LoseLose hashes from wide-character input string
DWORD HashStringLoseLoseW(_In_ PWCHAR String)
{
	ULONG Hash = 0;
	INT c;

	while (c = *String++) {
		Hash += c;
		Hash *= c + INITIAL_SEED;	// update
	}

	return Hash;
}

</code></pre>
<h3>Rotr32</h3>
<p>The Rotr32 string hashing algorithm uses iterated characters in the 
input string to sum their ASCII values, followed by the application of a
 bitwise rotation to the current hash value. The input value and a count
 (the count being <code>INITIAL_SEED</code>) are used to carry out a right shift on the value, then OR'd with the original value left-shifted by the negation of the count.</p>
<p>The resulting hash value is a 32-bit integer that is unique to the 
input string. Rotr32 is known to produce relatively good distributions 
of hash values, resulting in a low probability of collisions between 
different strings and their respective hash values.</p>
<p>The Rotr32 implementation shown below is from the <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/HashStringRotr32.cpp" target="_blank">VX-API GitHub repository</a>.</p>
<pre><code>#define INITIAL_SEED	5	

// Helper function that apply the bitwise rotation
UINT32 HashStringRotr32Sub(UINT32 Value, UINT Count)
{
	DWORD Mask = (CHAR_BIT * sizeof(Value) - 1);
	Count &amp;= Mask;
#pragma warning( push )
#pragma warning( disable : 4146)
	return (Value &gt;&gt; Count) | (Value &lt;&lt; ((-Count) &amp; Mask));
#pragma warning( pop ) 
}

// Generate Rotr32 hashes from Ascii input string
INT HashStringRotr32A(_In_ PCHAR String)
{
	INT Value = 0;

	for (INT Index = 0; Index &lt; lstrlenA(String); Index++)
		Value = String[Index] + HashStringRotr32Sub(Value, INITIAL_SEED);

	return Value;
}

// Generate Rotr32 hashes from wide-character input string
INT HashStringRotr32W(_In_ PWCHAR String)
{
	INT Value = 0;

	for (INT Index = 0; Index &lt; lstrlenW(String); Index++)
		Value = String[Index] + HashStringRotr32Sub(Value, INITIAL_SEED);

	return Value;
}
</code></pre>
<h3>Stack Strings</h3>
<p>In C/C++ programming languages, a string can be represented as an 
array of characters thus separating characters from each other which 
helps in evading string-based detections. For example, the string "hello
 world" can be represented as the array below.</p>
<pre><code>	char string[] = { 'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '\0' };
</code></pre>
<p>Searching for the string "hello world" using the <code>HxD</code> binary editor will return nothing.</p>
<p><img src="String%20Hashing_files/string-hashing-020876979-d3fbb005-d0d5-4624-a302-9f0f0469d86.png" alt="image"></p>
<p>However, stack strings are not sufficient to hide the string from 
some debuggers and reverse engineering tools as they can contain plugins
 to detect them.</p>
<h3>Demo</h3>
<p>The string "MaldevAcademy" is hashed below using the algorithms 
mentioned in this module. The string is hashed in both ASCII and Wide 
formats. Keep in mind that depending on the hashing algorithm the ASCII 
and Wide formats may not always generate the same hash value.</p>
<p><img src="String%20Hashing_files/string-hashing-109826350-7f0ae4f9-76c6-4293-990a-16ff72de7e0.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Hide strings using the string hashing algorithms shown in the module</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Find other string hashing algorithms in VX-API repository</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/50"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/51/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/51/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/52"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="String%20Hashing_files/jquery-3.6.0.min.js"></script>
        <script src="String%20Hashing_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="String%20Hashing_files/app.4474f4d1.css"><link rel="modulepreload" href="String%20Hashing_files/app.5f3af5ce.js"><link rel="stylesheet" href="String%20Hashing_files/app.4474f4d1.css"><script type="module" src="String%20Hashing_files/app.5f3af5ce.js"></script><script src="String%20Hashing_files/navbar.js"></script>
<script src="String%20Hashing_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 51;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>