<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/css2.css" rel="stylesheet">
        <link href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/css2_002.css" rel="stylesheet">
        <title>CRT Library Removal &amp; Malware Compiling</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.fdbb573b.css"><link rel="stylesheet" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.fdbb573b.css"><link rel="stylesheet" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 79 - CRT Library Removal &amp; Malware Compiling
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>CRT Library Removal &amp; Malware Compiling</h2>
<h3>Introduction</h3>
<p>Up until this module, all of the code projects were compiled either using the <em>Release</em> or <em>Debug</em>
 option in Visual Studio. It is important for malware developers to 
understand the difference between the Release and Debug compilation 
options in Visual Studio, as well as the implications of changing the 
default compiler settings. Modifying Visual Studio's compiler settings 
can have changes on the produced binary such as reducing the size or 
lowering entropy.</p>
<h3>Release vs Debug Options</h3>
<p>Both "Release" and "Debug" build configurations determine how a 
program is compiled and executed with each option serving a different 
purpose and offering distinct features. The most important differences 
between the two options are shown below.</p>
<ul>
<li>
<p><strong>Performance</strong> - The Release build option is faster 
than that of the Debug. Some building optimizations are enabled in 
release mode that is disabled in Debug mode.</p>
</li>
<li>
<p><strong>Debugging</strong> - Debugging applications generated by the 
Debug build configuration is made easier because building optimizations 
are disabled in this mode, making code easier to debug. Furthermore, the
 Debug configuration generates Debug Symbol files (.pdb) which contain 
information about the source code compiled. This enables debuggers to 
display additional information such as variables, functions and line 
numbers.</p>
</li>
<li>
<p><strong>Deployment</strong> - The Release version of the application 
is deployed to users due to its increased compatibility with their 
machines, unlike the Debug version, which typically requires additional 
dynamic link libraries (DLLs) that are only available with Visual 
Studio, thus making Debug applications compatible only with machines 
that have Visual Studio installed.</p>
</li>
<li>
<p><strong>Exception handling</strong> - In Debug build configuration, 
Visual Studio can pause execution and show an error message as a message
 box when an exception is thrown, specifying the variable's name or line
 number that caused the stack corruption, for example. Such exceptions 
may cause the program to crash if compiled in Release mode.</p>
</li>
</ul>
<h3>Default Compiler Settings</h3>
<p>Based on the previous points, the Release option is favorable over 
the Debug option. With that said, the Release option still has several 
problems.</p>
<ul>
<li>
<strong>Compatibility</strong> - Some applications using the Release 
option can still result in errors similar to the one below if the target
 machine does not have Visual Studio installed.</li>
</ul>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-116939162-63627c0c-8e3c-4a1f-a7f3-0b2450c9e7dc.png" alt="image"></p>
<ul>
<li>
<strong>CRT Imported Functions</strong> - Several unresolved functions 
are present in the IAT which cannot be resolved using approaches such as
 API Hashing. These functions are imported from the CRT library, which 
will be explained later. For now, it is sufficient to understand that 
there are several unused imported functions in any application generated
 by Visual Studio's default compiler settings. As an example, the IAT of
 a 'Hello World' program should only import information regarding the <code>printf</code> function, however, it is importing the following functions (output is truncated due to the size).</li>
</ul>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-216062571-e46c5ade-4aa5-4d7f-8d8a-5562af6a5229.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-316062828-42c68fc5-365a-44f2-ae6b-9849e22aab17.png" alt="image"></p>
<ul>
<li>
<strong>Size</strong> - The generated files are often bigger than they 
should be due to the default compiler optimizations. For example, the 
following <code>Hello World</code> program is around 11kb.</li>
</ul>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-416058406-95d621d1-1329-47b2-8750-ebbcef912dc8.png" alt="image"></p>
<ul>
<li>
<strong>Debugging Information</strong> - Using the Release option can 
still include debugging-related information and other strings that can 
be used by security solutions to create static signatures. The images 
below show the output of executing <code>Strings.exe</code> on the <code>Hello World</code> program (output is truncated due to the size).</li>
</ul>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-516064966-265ea0cb-f8e7-4b06-920f-97a87a634e84.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-616065036-37ed8313-ecd4-4ac7-b902-fb407e0ae7e4.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-716065105-1ba22df8-af64-483a-8a38-803b75bb4ae4.png" alt="image"></p>
<h3>The CRT library</h3>
<p>The CRT library, also known as the <em>Microsoft C Run-Time Library</em>,
 is a set of low-level functions and macros that provide a foundation 
for standard C and C++ programs. It includes functions for memory 
management (e.g. <code>malloc</code>, <code>memset</code> and <code>free</code>), string manipulation (e.g. <code>strcpy</code> and <code>strlen</code>) and I/O functions (e.g. <code>printf</code>, <code>wprintf</code> and <code>scanf</code>).</p>
<p>The CRT library DLLs are named <code>vcruntimeXXX.dll</code> where XXX is the version number of the CRT library used. There are also DLLs such as <code>api-ms-win-crt-stdio-l1-1-0.dll</code>, <code>api-ms-win-crt-runtime-l1-1-0.dll</code> and <code>api-ms-win-crt-locale-l1-1-0.dll</code>
 that are also related to the CRT library. Each DLL serves a particular 
purpose and exports several functions. These DLLs are linked by the 
compiler at compile time and therefore are found in the IAT of the 
generated programs.</p>
<h3>Solving Compatibility Issues</h3>
<p>By default, when compiling an application, the <em>Runtime Library</em>
 option in Visual Studio is set to "Multi-threaded DLL (/MD)". With this
 option, the CRT Library DLLs are linked dynamically which means they 
are loaded at runtime. This creates the compatibility issues previously 
mentioned. To solve these issues, set the Runtime Library option to 
"Multi-threaded (/MT)", as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-816073627-98d49140-e86d-4622-88c8-a40f9a9db79c.png" alt="image"></p>
<h4>Multi-threaded (/MT)</h4>
<p>The Visual Studio compiler can be made to link CRT functions 
statically by selecting the "Multi-threaded (/MT)" option. This results 
in functions such as <code>printf</code> being directly represented in 
the generated program, rather than imported from CRT library DLLs. Note 
that this will increase the size of the final binary and adds more 
WinAPIs to the IAT, although it removes the CRT library DLLs.</p>
<p>Using the "Multi-threaded (/MT)" option to compile the <code>Hello World</code> program results in the following IAT.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-916075724-73b3ba91-3a72-4f93-9dd8-0ee03cd3fe2d.png" alt="image"></p>
<p>The binary becomes considerably larger as well, as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-11.png" alt="image"></p>
<h4>CRT Library &amp; Debugging</h4>
<p>After removing the CRT Library, the program can only be compiled in 
Release mode. This makes it more difficult to debug the code. Therefore,
 it is recommended that the removal of the CRT Library is only done 
after debugging and development are complete.</p>
<h3>Additional Compiler Changes</h3>
<p>The previous sections demonstrated how to statically link the CRT 
library. However, the ideal solution would be to avoid relying on the 
CRT library both statically and dynamically, as this can lead to a 
reduction in the binary size, as well as the removal of unnecessary 
imported functions and debug information.
To accomplish this, several Visual Studio compilation options must be 
modified.</p>
<h4>Disable C++ Exceptions</h4>
<p>The <em>Enable C++ Exceptions</em> option is used to generate code to
 correctly propagate exceptions thrown by the code, however, as the CRT 
Library is no longer linked, this option is not necessary and should be 
disabled.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-12.png" alt="image"></p>
<h4>Disable Whole Program Optimization</h4>
<p>The <em>Whole Program Optimization</em> should be disabled to prevent
 the compiler from performing optimizations that may affect the stack. 
Disabling this option provides complete control over the compiled code.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-13.png" alt="image"></p>
<h4>Disable Debug Info</h4>
<p>Disable the <em>Generate Debug Info</em> and <em>Generate Manifest</em> options to remove the added debugging information.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-14.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-15.png" alt="image"></p>
<h4>Ignore All Default Libraries</h4>
<p>Set the <em>Ignore All Default Libraries</em> option to "Yes 
(/NODEFAULTLIB)" to exclude the default system libraries from being 
linked by the compiler with the program. This will result in the 
exclusion of the linking of the CRT Library as well as other libraries. 
In this case, it is the responsibility of the user to provide any 
required functions that are usually provided by these default libraries.
 The image below shows the "Yes (/NODEFAULTLIB)" option being set.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-16.png" alt="image"></p>
<p>Unfortunately, compiling with that option results in several errors, as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-17.png" alt="image"></p>
<h4>Setting Entry Point Symbol</h4>
<p>The first error "LNK2001 - unresolved external symbol mainCRTStartup"
 implies that the compiler was unable to locate the definition for the 
"mainCRTStartup" symbol. This is expected as "mainCRTStartup" is the 
entry point for a program that has been linked with the CRT Library, 
which is not the case here. To resolve this issue, a new entry point 
symbol should be set as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-18.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-19.png" alt="image"></p>
<p>The entry "main" represents the main function in the source code. To 
choose a different function as an entry point, simply set the entry 
point symbol to that function's name. Recompiling results in fewer 
errors, as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-20.png" alt="image"></p>
<h4>Disable Security Check</h4>
<p>The next error, "LNK2001 - unresolved external symbol 
__security_check_cookie", means that the "__security_check_cookie" 
symbol was not found by the compiler. This is a symbol that is used to 
perform a stack cookie check which is a security feature that helps in 
preventing stack buffer overflows. To solve this, set the <em>Security Check</em> option to "Disable Security Check (/Gs-)" as shown below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-21.png" alt="image"></p>
<h4>Disable SDL Checks</h4>
<p>Once the security check is disabled, the error disappears but a new warning shows up.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-22.png" alt="image"></p>
<p>The "D9025 - overriding '/sdl' with '/GS-'" warning can be resolved by disabling the <a href="https://learn.microsoft.com/en-us/cpp/build/reference/sdl-enable-additional-security-checks?view=msvc-170" target="_blank">Security Development Lifecycle (SDL) checks</a>.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-23.png" alt="image"></p>
<p>Two unresolved symbol errors remain, which are resolved in the <em>Functions Replacement</em> section below.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-24.png" alt="image"></p>
<h3>Replacing CRT Library Functions</h3>
<p>Two errors remain unresolved due to the removal of the CRT Library. The <code>printf</code> function is currently being used to print to the console, although the CRT Library has been removed from the program.</p>
<p>When removing the CRT Library, writing one's own version of functions such as <code>printf</code>, <code>strlen</code>, <code>strcat</code>, <code>memcpy</code> is necessary. Libraries like <a href="https://github.com/vxunderground/VX-API" target="_blank">VX-API</a> may be used for this purpose. For example, <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/StringCompare.cpp" target="_blank">StringCompare.cpp</a> replaces the <code>strcmp</code> function for string comparison.</p>
<h4>Replacing Printf</h4>
<p>For the demo program used in this module, the <code>printf</code> function is replaced with the following macro.</p>
<pre><code>#define PRINTA( STR, ... )                                                                  \
    if (1) {                                                                                \
        LPSTR buf = (LPSTR)HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 );           \
        if ( buf != NULL ) {                                                                \
            int len = wsprintfA( buf, STR, __VA_ARGS__ );                                   \
            WriteConsoleA( GetStdHandle( STD_OUTPUT_HANDLE ), buf, len, NULL, NULL );       \
            HeapFree( GetProcessHeap(), 0, buf );                                           \
        }                                                                                   \
    }  
</code></pre>
<p>The <code>PRINTA</code> macro takes two arguments:</p>
<ul>
<li>
<p><code>STR</code> - The format string which represents how to print the output.</p>
</li>
<li>
<p><code>__VA_ARGS__</code> or <code>...</code> - Which are the arguments to be printed.</p>
</li>
</ul>
<p>The <code>PRINTA</code> macro allocates a heap buffer of size 1024 bytes, then uses the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfa" target="_blank">wsprintfA</a> function to write formatted data from the variable arguments (<code>__VA_ARGS__</code>) into the buffer using the format string (<code>STR</code>). Subsequently, the <a href="https://learn.microsoft.com/en-us/windows/console/writeconsole" target="_blank">WriteConsoleA</a> WinAPI is used to write the resulting string to the console, which is obtained via the <a href="https://learn.microsoft.com/en-us/windows/console/getstdhandle" target="_blank">GetStdHandle</a> WinAPI.</p>
<p>Replacing <code>printf</code> with <code>PRINTA</code> results in the <code>Hello World</code> program that is independent of the CRT Library. This code resolves any remaining errors and can now compile successfully.</p>
<pre><code>#include &lt;Windows.h&gt;
#include &lt;stdio.h&gt;

#define PRINTA( STR, ... )                                                                  \
    if (1) {                                                                                \
        LPSTR buf = (LPSTR)HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 );           \
        if ( buf != NULL ) {                                                                \
            int len = wsprintfA( buf, STR, __VA_ARGS__ );                                   \
            WriteConsoleA( GetStdHandle( STD_OUTPUT_HANDLE ), buf, len, NULL, NULL );       \
            HeapFree( GetProcessHeap(), 0, buf );                                           \
        }                                                                                   \
    }  


int main() {
   PRINTA("Hello World ! \n");
   return 0;
   
}
</code></pre>
<h3>Building a CRT Library Independent Malware</h3>
<p>When building malware that does not utilize the CRT Library, there are a few items to take note of.</p>
<h4>Intrinsic Function Usage</h4>
<p>Some functions and macros in Visual Studio use CRT functions to perform their tasks. For example, the <code>ZeroMemory</code> macro uses the CRT function <code>memset</code>
 to populate the specified buffer with zeros. This requires the 
developer to find an alternative to that macro since it cannot be used. 
In this case, the <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/CopyMemoryEx.cpp" target="_blank">CopyMemoryEx.cpp</a> function can be used as a replacement.</p>
<p>Another solution would be manually setting custom versions of CRT-based functions like <code>memset</code>. Forcing the compiler to deal with this custom function instead of using the CRT exported version. Sequentially, macros like <code>ZeroMemory</code> will also use this custom function.</p>
<p>To demonstrate this, a custom version of the <code>memset</code> function can be specified to the compiler in the following manner, using the <code>intrinsic</code> keyword.</p>
<pre><code>#include &lt;Windows.h&gt;

// The `extern` keyword sets the `memset` function as an external function.
extern void* __cdecl memset(void*, int, size_t);

// The `#pragma intrinsic(memset)` and #pragma function(memset) macros are Microsoft-specific compiler instructions.
// They force the compiler to generate code for the memset function using a built-in intrinsic function.
#pragma intrinsic(memset)
#pragma function(memset)

void* __cdecl memset(void* Destination, int Value, size_t Size) {
	// logic similar to memset's one
	unsigned char* p = (unsigned char*)Destination;
	while (Size &gt; 0) {
		*p = (unsigned char)Value;
		p++;
		Size--;
	}
	return Destination;
}


int main() {
	
	PVOID pBuff = HeapAlloc(GetProcessHeap(), 0, 0x100);
	if (pBuff == NULL)
		return -1;

    // this will use our version of 'memset' instead of CRT's Library version 
	ZeroMemory(pBuff, 0x100);

	HeapFree(GetProcessHeap(), 0, pBuff);

	return 0;
}
</code></pre>
<h4>Hiding The Console Window</h4>
<p>Malware should not spawn a console window when executed, as this is 
highly suspicious and allows the user to terminate the program by 
closing the window. To prevent this, <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow" target="_blank">ShowWindow(NULL, SW_HIDE)</a> can be used at the start of the entry point function, though this requires time (in milliseconds) and can cause a noticeable <em>flash</em>.</p>
<p>A better solution is to set the program to be compiled as a GUI program by setting the Visual Studio <em>SubSystem</em> option to "Windows (/SUBSYSTEM:WINDOWS)".</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-25.png" alt="image"></p>
<h3>Demo</h3>
<p>After performing all the steps explained in this module, the results are shown.</p>
<p>First, the binary size is reduced from 112.5kb to approximately 3kb.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-26.png" alt="image"></p>
<p>Next, no unused functions are found in the IAT.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-27.png" alt="image"></p>
<p>Fewer strings are found in the binary with no debug information.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-28.png" alt="image"></p>
<p>Finally, the removal of the CRT Library results in better evasion. 
The binary is uploaded to VirusTotal twice, the first time it is using 
the "Multi-threaded (/MT)" option to statically link the CRT library. 
The second time is when the CRT Library was completely removed.</p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-29.png" alt="image"></p>
<p><img src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/crt-30.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Read about the CRT library and understand its advantages and disadvantages</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Edit a project's properties to remove the CRT library and debugging information</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/78"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/79/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/79/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/80"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/jquery-3.6.0.min.js"></script>
        <script src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.4474f4d1.css"><link rel="modulepreload" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.5f3af5ce.js"><link rel="stylesheet" href="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.4474f4d1.css"><script type="module" src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/app.5f3af5ce.js"></script><script src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/navbar.js"></script>
<script src="CRT%20Library%20Removal%20&amp;%20Malware%20Compiling_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 79;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>