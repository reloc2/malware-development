<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Parsing%20PE%20Headers_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Parsing%20PE%20Headers_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Parsing%20PE%20Headers_files/css2.css" rel="stylesheet">
        <link href="Parsing%20PE%20Headers_files/css2_002.css" rel="stylesheet">
        <title>Parsing PE Headers</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Parsing%20PE%20Headers_files/app.fdbb573b.css"><link rel="stylesheet" href="Parsing%20PE%20Headers_files/app.fdbb573b.css"><link rel="stylesheet" href="Parsing%20PE%20Headers_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Parsing%20PE%20Headers_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 50 - Parsing PE Headers
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Parsing%20PE%20Headers_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Parsing%20PE%20Headers_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Parsing%20PE%20Headers_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/PeParser" target="_blank">
                    <img src="Parsing%20PE%20Headers_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Parsing PE Headers</h2>
<h3>Introduction</h3>
<p>Early on in a beginner module, the PE file format structure was 
briefly discussed. The module focused more on the theory rather than a 
programmatical perspective of accessing each header. This module will 
explain the process of extracting components of a PE file and provide 
more insight into the file structure, which will ultimately become a 
prerequisite for more advanced modules.</p>
<p>Review the introductory PE file structure module if the PE structure is not well understood.</p>
<h3>PE Structure</h3>
<p>Recall the diagram below from the introductory module which shows a 
simplified structure of the PE format. Every header shown in the image 
is defined as a data structure that holds information about the PE file.</p>
<p><img src="Parsing%20PE%20Headers_files/pe-structure.png" alt="image"></p>
<h3>Relative Virtual Addresses (RVAs)</h3>
<p>Relative Virtual Addresses (RVAs) are addresses that are used to 
reference locations within a PE file. They are used to specify the 
location of various data structures and sections within the PE file, 
such as code, data, and resources.</p>
<p>An RVA is a 32-bit value that specifies the <strong>offset</strong> 
of a data structure or section from the beginning of the PE file. It is 
called a "relative" address because it specifies the offset from the 
beginning of the file, rather than an absolute address in memory. This 
allows the same file to be loaded at different addresses in memory 
without requiring any changes to the RVAs within the file.</p>
<p>RVAs are used extensively in the PE file format to specify the 
location of various data structures and sections within the file. For 
example, the PE header contains several RVAs that specify the location 
of the code and data sections, the import and export tables, and other 
important data structures.</p>
<p>To convert an RVA to a virtual address (VA), the operating system 
adds the base address of the module (the location in memory where the 
module is loaded) to the RVA. This allows the operating system to access
 the data at the specified location within the module, regardless of 
where the module is loaded in memory.</p>
<h3>DOS Header (IMAGE_DOS_HEADER)</h3>
<p>The DOS header is located at the beginning of a PE file and contains 
information about the file, such as its size, and characteristics. Most 
importantly, it contains the RVA (offset) to the NT header.</p>
<p>The following snippet demonstrates how to retrieve the DOS header.</p>
<pre><code>// Pointer to the structure 
PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pPE;		
if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE){
	return -1;
}
</code></pre>
<p>Since the DOS header is located at the very beginning of a PE file, 
retrieving the DOS header is only a matter of typecasting the <code>pPE</code> variable to a <code>PIMAGE_DOS_HEADER</code>.
 This provides a pointer to the DOS header structure. After that, a DOS 
signature check is performed to verify that the DOS header is valid.</p>
<h3>NT Header (IMAGE_NT_HEADERS)</h3>
<p>The <code>e_lfanew</code> member of the DOS header is an RVA to the <code>IMAGE_NT_HEADERS</code> structure. To reach the NT header, simply add the base address of the PE file in memory to the offset (<code>e_lfanew</code>). This is done in the following code snippet.</p>
<pre><code>// Pointer to the structure
PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pPE + pImgDosHdr-&gt;e_lfanew);
if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE) {
	return -1;
}
</code></pre>
<p>The if statement is an NT Signature check to confirm the validity of the <code>IMAGE_NT_HEADERS</code> structure.</p>
<h3>File Header (IMAGE_FILE_HEADER)</h3>
<p>Since the file header is a member of the <code>IMAGE_NT_HEADERS</code> structure, it is can be accessed using the following line of code.</p>
<pre><code>IMAGE_FILE_HEADER		ImgFileHdr	= pImgNtHdrs-&gt;FileHeader;
</code></pre>
<h4>File Header Members</h4>
<p>The members of the <code>IMAGE_FILE_HEADER</code> structure are described below.</p>
<ul>
<li>
<p><code>Machine</code> - The type of machine for which the PE file or object file is intended.</p>
</li>
<li>
<p><code>NumberOfSections</code> - The number of sections in the PE file or object file.</p>
</li>
<li>
<p><code>TimeDateStamp</code> - Time and date when the PE file or object file was created.</p>
</li>
<li>
<p><code>Pointer#ymbolTable</code> - Offset in the file to the symbol table, if it exists.</p>
</li>
<li>
<p><code>NumberOfSymbols</code> - Number of symbols in the symbol table.</p>
</li>
<li>
<p><code>SizeOfOptionalHeader</code> - The size of the <em>optional header</em>.</p>
</li>
<li>
<p><code>Characteristics</code> - The characteristics of the PE file or 
object file. The values of this field are defined by the IMAGE_FILE_* 
constants; these specify the type of the PE file (.exe, .dll, .sys).</p>
</li>
</ul>
<h3>Optional Header (IMAGE_OPTIONAL_HEADER)</h3>
<p>Since the optional header is a member of the <code>IMAGE_NT_HEADERS</code> structure, it is can be accessed using the following code.</p>
<pre><code>IMAGE_OPTIONAL_HEADER	ImgOptHdr = pImgNtHdrs-&gt;OptionalHeader;
if (ImgOptHdr.Magic != IMAGE_NT_OPTIONAL_HDR_MAGIC) {
	return -1;
}
</code></pre>
<p>The if statement is used to verify the optional header. <code>IMAGE_NT_OPTIONAL_HDR_MAGIC</code>'s value depends on whether the application is 32 or 64-bit.</p>
<ul>
<li>
<p><code>IMAGE_NT_OPTIONAL_HDR32_MAGIC</code> - 32-bit</p>
</li>
<li>
<p><code>IMAGE_NT_OPTIONAL_HDR64_MAGIC</code> - 64-bit</p>
</li>
</ul>
<p>Depending on the compiler architecture, the <code>IMAGE_NT_OPTIONAL_HDR_MAGIC</code> constant will automatically expand to the correct value.</p>
<h4>Optional Header Important Members</h4>
<p>The most important members of the <code>IMAGE_OPTIONAL_HEADER</code> structure are explained below.</p>
<ul>
<li>
<p><code>Magic</code> - Specifies the type of optional header that is present in the file.</p>
</li>
<li>
<p><code>MajorLinkerVersion</code> and <code>MinorLinkerVersion</code> - Specify the version of the linker that was used to create the PE file.</p>
</li>
<li>
<p><code>SizeOfCode</code>, <code>SizeOfInitializedData</code>, and <code>SizeOfUninitializedData</code> - Specifies the sizes of the code, initialized data, and uninitialized data sections in the PE file, respectively.</p>
</li>
<li>
<p><code>AddressOfEntryPoint</code> - Specifies the address of the entry point function in the PE file, This is an <code>RVA</code> to the entry point.</p>
</li>
<li>
<p><code>BaseOfCode</code> and <code>BaseOfData</code> - Specify the base addresses of the code and data sections in the PE file, respectively, These are <code>RVAs</code>.</p>
</li>
<li>
<p><code>ImageBase</code> - specifies the <em>preferred</em> base address at which the PE file should be loaded.</p>
</li>
<li>
<p><code>MajorOperatingSystemVersion</code> and <code>MinorOperatingSystemVersion</code> - Specify the minimum version of the operating system required to run the PE file.</p>
</li>
<li>
<p><code>MajorImageVersion</code> and <code>MinorImageVersion</code> - Specify the version of the PE file.</p>
</li>
<li>
<p><code>DataDirectory</code> - One of the most important members in the optional header. This is an array of <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_data_directory" target="_blank">IMAGE_DATA_DIRECTORY</a>, which contains the directories in a PE file (discussed below).</p>
</li>
</ul>
<h3>DataDirectory (IMAGE_DATA_DIRECTORY)</h3>
<p>The Data Directory can be accessed from the optional's header last member. This is an array of <code>IMAGE_DATA_DIRECTORY</code> meaning each element in the array is an <code>IMAGE_DATA_DIRECTORY</code> structure that references a special data directory. The <code>IMAGE_DATA_DIRECTORY</code> structure is shown below.</p>
<pre><code>typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

</code></pre>
<p>The fields of the structure contain information such as:</p>
<ul>
<li>
<p><code>VirtualAddress</code> - Specifies the virtual address of the specified structure in the PE file, these are <code>RVAs</code>.</p>
</li>
<li>
<p><code>Size</code> - Specifies the size of the data directory.</p>
</li>
</ul>
<h4>Accessing Data Directories</h4>
<p>Some of the predefined data directories in a PE file include:</p>
<ul>
<li>
<p><code>IMAGE_DIRECTORY_ENTRY_EXPORT</code> - Contains information about the functions and data that are exported from the PE file.</p>
</li>
<li>
<p><code>IMAGE_DIRECTORY_ENTRY_IMPORT</code> - Contains information about the functions and data that are imported from other modules.</p>
</li>
<li>
<p><code>IMAGE_DIRECTORY_ENTRY_RESOURCE</code> - Contains information about the resources (such as icons, strings, and bitmaps) that are included in the PE file.</p>
</li>
<li>
<p><code>IMAGE_DIRECTORY_ENTRY_EXCEPTION</code> - Contains information about the exception handling tables in the PE file.</p>
</li>
</ul>
<p>The data directories can be accessed using the following line of code.</p>
<pre><code>IMAGE_DATA_DIRECTORY DataDir = ImgOptHdr.DataDirectory[#INDEX IN THE ARRAY#];
</code></pre>
<p>For example, retrieving the data directory of the export directory is done as follows:</p>
<pre><code>IMAGE_DATA_DIRECTORY ExpDataDir = ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
</code></pre>
<h3>Export Table (IMAGE_EXPORT_DIRECTORY)</h3>
<p>Unfortunately, this structure is not officially documented by 
Microsoft at the time of writing this module. Therefore, to understand 
the structure, unofficial documentation is used which can be found on 
the internet.</p>
<h4>Export Table Structure</h4>
<p>The export table is a structure defined as <code>IMAGE_EXPORT_DIRECTORY</code> which is shown below.</p>
<pre><code>typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     // RVA from base of image
    DWORD   AddressOfNames;         // RVA from base of image
    DWORD   AddressOfNameOrdinals;  // RVA from base of image
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;

</code></pre>
<h4>Retrieving The Export Table</h4>
<p>The <code>IMAGE_EXPORT_DIRECTORY</code> structure is used to store 
information about the functions and data that are exported from a PE 
file. This information is stored in the data directory array with the 
index <code>IMAGE_DIRECTORY_ENTRY_EXPORT</code>. To fetch it from the <code>IMAGE_OPTIONAL_HEADER</code> structure:</p>
<pre><code>PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pPE + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
</code></pre>
<p>Where <code>pPE</code> is the base address of the loaded PE in memory and <code>ImgOptHdr</code> is the <code>IMAGE_OPTIONAL_HEADER</code> structure previously calculated.</p>
<h4>Export Table Important Members</h4>
<p>The most important members of the export table are the following:</p>
<ul>
<li>
<p><code>NumberOfFunctions</code> - Specifies the number of functions that are exported by the PE file.</p>
</li>
<li>
<p><code>NumberOfNames</code> - Specifies the number of names that are exported by the PE file.</p>
</li>
<li>
<p><code>AddressOfFunctions</code> - Specifies the address of an array of addresses of the exported functions.</p>
</li>
<li>
<p><code>AddressOfNames</code> - Specifies the address of an array of addresses of the names of the exported functions.</p>
</li>
<li>
<p><code>AddressOfNameOrdinals</code> - Specifies the address of an array of ordinal numbers for the exported functions.</p>
</li>
</ul>
<h3>Import Address Table (IMAGE_IMPORT_DESCRIPTOR)</h3>
<p>The import address table is an array of <code>IMAGE_IMPORT_DESCRIPTOR</code> structures with each one being for a DLL file that contains the functions that were used from these DLLs.</p>
<h4>Import Address Table Structure</h4>
<p>The <code>IMAGE_IMPORT_DESCRIPTOR</code> structure is also not officially documented by Microsoft although it is defined in the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/" target="_blank">Winnt.h Header File</a> as follows:</p>
<pre><code>typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;
        DWORD   OriginalFirstThunk;
    } DUMMYUNIONNAME;
    DWORD   TimeDateStamp;
    DWORD   ForwarderChain;
    DWORD   Name;
    DWORD   FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
</code></pre>
<h4>Retrieving The Import Address Table</h4>
<p>To fetch the import address table from the <code>IMAGE_OPTIONAL_HEADER</code> structure:</p>
<pre><code>IMAGE_IMPORT_DESCRIPTOR* pImgImpDesc = (PIMAGE_IMPORT_DESCRIPTOR)(pPE + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
</code></pre>
<p>Where <code>pPE</code> is the base address of the loaded PE in memory and <code>ImgOptHdr</code> is the <code>IMAGE_OPTIONAL_HEADER</code> structure previously calculated.</p>
<h3>Additional Undocumented Structures</h3>
<p>Several undocumented structures can be accessed via the <code>IMAGE_DATA_DIRECTORY</code>
 array in the optional header but are not documented in the Winnt.h 
header file. These include the Import Address Table and Export Table 
discussed earlier, as well as additional structures. Below are a few 
more examples of undocumented structures.</p>
<ul>
<li>
<code>IMAGE_TLS_DIRECTORY</code> - This structure is used to store information about <a href="https://learn.microsoft.com/en-us/cpp/c-language/thread-local-storage?view=msvc-170" target="_blank">Thread-Local Storage</a> (TLS) data in the PE file. It is important to be aware of how to retrieve this structure from the <code>IMAGE_OPTIONAL_HEADER</code> structure at this time; further details will be provided in subsequent modules when necessary.</li>
</ul>
<pre><code>PIMAGE_TLS_DIRECTORY pImgTlsDir  = (PIMAGE_TLS_DIRECTORY)(pPE + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS].VirtualAddress);
</code></pre>
<ul>
<li>
<code>IMAGE_RUNTIME_FUNCTION_ENTRY</code> - This structure is used to 
store information about a runtime function in the PE file. A runtime 
function is a function that is called by the Windows operating system's 
exception handling mechanism to execute the exception handling code for 
an exception. It is important to be aware of how to retrieve this 
structure from the <code>IMAGE_OPTIONAL_HEADER</code> structure at this time; further details will be provided in subsequent modules when necessary.</li>
</ul>
<pre><code>PIMAGE_RUNTIME_FUNCTION_ENTRY pImgRunFuncEntry = (PIMAGE_RUNTIME_FUNCTION_ENTRY)(pPE + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].VirtualAddress);
</code></pre>
<ul>
<li>
<code>IMAGE_BASE_RELOCATION</code> - This structure is used to store 
information about the base relocations in the PE file. Base relocations 
are used to fix up the addresses of imported functions and variables in a
 PE file when it is loaded into memory at an address that differs from 
the address at which it was linked. It is important to be aware of how 
to retrieve this structure from the <code>IMAGE_OPTIONAL_HEADER</code> structure at this time; further details will be provided in subsequent modules when necessary.</li>
</ul>
<pre><code>PIMAGE_BASE_RELOCATION pImgBaseReloc = (PIMAGE_BASE_RELOCATION)(pPE + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
</code></pre>
<h3>PE Sections</h3>
<p>Be aware of the important PE sections such as <code>.text</code>, <code>.data</code>, <code>.reloc</code>, <code>.rsrc</code>. Additionally, there may be more PE sections depending on the compiler and its settings. Each of these sections has a <a href="https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_section_header" target="_blank">IMAGE_SECTION_HEADER</a> structure that contains information about it. The <code>IMAGE_SECTION_HEADER</code> structure is defined below.</p>
<pre><code>typedef struct _IMAGE_SECTION_HEADER {
  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];
  union {
    DWORD PhysicalAddress;
    DWORD VirtualSize;
  } Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD  NumberOfRelocations;
  WORD  NumberOfLinenumbers;
  DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
</code></pre>
<h4>IMAGE_SECTION_HEADER Important Members</h4>
<p>Some of IMAGE_SECTION_HEADER's most important members;</p>
<ul>
<li>
<p><code>Name</code> - A null-terminated ASCII string that specifies the name of the section.</p>
</li>
<li>
<p><code>VirtualAddress</code> - The virtual address of the section in memory, this is an <code>RVA</code>.</p>
</li>
<li>
<p><code>SizeOfRawData</code> - The size of the section in the PE file in bytes.</p>
</li>
<li>
<p><code>PointerToRelocations</code> - The file offset of the relocations for the section.</p>
</li>
<li>
<p><code>NumberOfRelocations</code> - The number of relocations for the section.</p>
</li>
<li>
<p><code>Characteristics</code> - Contains flags that specify the characteristics of the section.</p>
</li>
</ul>
<h4>Retrieving The IMAGE_SECTION_HEADER Structure</h4>
<p>The <code>IMAGE_SECTION_HEADER</code> structure is stored in an array within the PE file's headers. To access the first element, skip past the <code>IMAGE_NT_HEADERS</code> since the sections are located immediately after the NT headers. The following snippet shows how to retrieve the <code>IMAGE_SECTION_HEADER</code> structure, where <code>pImgNtHdrs</code> is a pointer to <code>IMAGE_NT_HEADERS</code> structure.</p>
<pre><code>PIMAGE_SECTION_HEADER pImgSectionHdr = (PIMAGE_SECTION_HEADER)(((PBYTE)pImgNtHdrs) + sizeof(IMAGE_NT_HEADERS));
</code></pre>
<h4>Looping Through The Array</h4>
<p>Looping through the array requires the array size which can be retrieved from the <code>IMAGE_FILE_HEADER.NumberOfSections</code> member. The subsequent elements in the array are located at an interval of <code>sizeof(IMAGE_SECTION_HEADER)</code> from the current element.</p>
<pre><code>PIMAGE_SECTION_HEADER pImgSectionHdr = (PIMAGE_SECTION_HEADER)(((PBYTE)pImgNtHdrs) + sizeof(IMAGE_NT_HEADERS));

for (size_t i = 0; i &lt; pImgNtHdrs-&gt;FileHeader.NumberOfSections; i++) {
	// pImgSectionHdr is a pointer to section 1
	pImgSectionHdr = (PIMAGE_SECTION_HEADER)((PBYTE)pImgSectionHdr + (DWORD)sizeof(IMAGE_SECTION_HEADER));
	// pImgSectionHdr is a pointer to section 2
}
</code></pre>
<h3>Demo</h3>
<p>This demo shows the PeParser project which is shared in this module. 
It can be used to parse PE files using the methods discussed throughout 
the module. Keep in mind, PeParser should be compiled as a 32-bit binary
 to parse a 32-bit program and 64-bit for a 64-bit program.</p>
<p><img src="Parsing%20PE%20Headers_files/pe-parser-109789281-55662de8-c252-427c-b4d0-8245e238ce10.png" alt="image"></p>
<p><img src="Parsing%20PE%20Headers_files/pe-parser-209789466-71cb09b6-7e8f-4694-b9b6-f5064aecfb9c.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with the PE Header structures</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand how to retrieve the DOS, NT, and Optional image file headers</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Learn to calculate virtual addresses (VAs) using RVAs</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Learn to fetch a binary's export and import table</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Parse an image's sections and fetch their details via the IMAGE_SECTION_HEADER structure</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/49"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/50/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/50/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/51"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Parsing%20PE%20Headers_files/jquery-3.6.0.min.js"></script>
        <script src="Parsing%20PE%20Headers_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Parsing%20PE%20Headers_files/app.4474f4d1.css"><link rel="modulepreload" href="Parsing%20PE%20Headers_files/app.5f3af5ce.js"><link rel="stylesheet" href="Parsing%20PE%20Headers_files/app.4474f4d1.css"><script type="module" src="Parsing%20PE%20Headers_files/app.5f3af5ce.js"></script><script src="Parsing%20PE%20Headers_files/navbar.js"></script>
<script src="Parsing%20PE%20Headers_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 50;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>