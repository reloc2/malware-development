<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Windows%20Memory%20Management_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Windows%20Memory%20Management_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Windows%20Memory%20Management_files/css2.css" rel="stylesheet">
        <link href="Windows%20Memory%20Management_files/css2_002.css" rel="stylesheet">
        <title>Windows Memory Management</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Windows%20Memory%20Management_files/app.fdbb573b.css"><link rel="stylesheet" href="Windows%20Memory%20Management_files/app.fdbb573b.css"><link rel="stylesheet" href="Windows%20Memory%20Management_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Windows%20Memory%20Management_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 6 - Windows Memory Management
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Windows%20Memory%20Management_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Windows%20Memory%20Management_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="Windows%20Memory%20Management_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Windows Memory Management</h2>
<h3>Introduction</h3>
<p>This module goes through the fundamentals of Windows memory. 
Understanding how Windows handles memory is crucial to building advanced
 malware.</p>
<h3>Virtual Memory &amp; Paging</h3>
<p>Memory in modern operating systems is not mapped directly to physical
 memory (i.e the RAM). Instead, virtual memory addresses are used by 
processes that are mapped to physical memory addresses. There are 
several reasons for this but ultimately the goal is to save as much 
physical memory as possible.  Virtual memory may be mapped to physical 
memory but can also be stored on disk. With virtual memory addressing it
 becomes possible for multiple processes to share the same physical 
address while having a unique virtual memory address. Virtual memory 
relies on the concept of <em>Memory paging</em> which divides memory into chunks of 4kb called "pages".</p>
<p>See the image below from the <a href="https://learn.microsoft.com/en-us/sysinternals/resources/windows-internals" target="_blank">Windows Internals 7th edition - part 1</a> book.</p>
<p><img src="Windows%20Memory%20Management_files/virtual-memory.png" alt="Virtual-Mem"></p>
<h3>Page State</h3>
<p>The pages residing within a process's virtual address space can be in one of 3 states:</p>
<ol>
<li>
<p><strong>Free</strong> - The page is neither committed nor reserved. 
The page is not accessible to the process. It is available to be 
reserved, committed, or simultaneously reserved and committed. 
Attempting to read from or write to a free page can result in an access 
violation exception.</p>
</li>
<li>
<p><strong>Reserved</strong> - The page has been reserved for future 
use. The range of addresses cannot be used by other allocation 
functions. The page is not accessible and has no physical storage 
associated with it. It is available to be committed.</p>
</li>
<li>
<p><strong>Committed</strong> - Memory charges have been allocated from 
the overall size of RAM and paging files on disk. The page is accessible
 and access is controlled by one of the memory protection constants. The
 system initializes and loads each committed page into physical memory 
only during the first attempt to read or write to that page. When the 
process terminates, the system releases the storage for committed pages.</p>
</li>
</ol>
<h3>Page Protection Options</h3>
<p>Once the pages are committed, they need to have their protection 
option set. The list of memory protection constants can be found <a href="https://learn.microsoft.com/en-us/windows/win32/memory/memory-protection-constants" target="_blank">here</a> but some examples are listed below.</p>
<ul>
<li>
<p><code>PAGE_NOACCESS</code> - Disables all access to the committed 
region of pages. An attempt to read from, write to or execute the 
committed region will result in an access violation.</p>
</li>
<li>
<p><code>PAGE_EXECUTE_READWRITE</code> - Enables Read, Write and 
Execute. This is highly discouraged from being used and is generally an 
IoC because it's uncommon for memory to be both writable and executable 
at the same time.</p>
</li>
<li>
<p><code>PAGE_READONLY</code> - Enables read-only access to the 
committed region of pages. An attempt to write to the committed region 
results in an access violation.</p>
</li>
</ul>
<h3>Memory Protection</h3>
<p>Modern operating systems generally have built-in memory protections 
to thwart exploits and attacks. These are also important to keep in mind
 as they will likely be encountered when building or debugging the 
malware.</p>
<ul>
<li>
<p><strong>Data Execution Prevention (DEP)</strong> - DEP is a 
system-level memory protection feature that is built into the operating 
system starting with Windows XP and Windows Server 2003. If the page 
protection option is set to PAGE_READONLY, then DEP will prevent code 
from executing in that memory region.</p>
</li>
<li>
<p><strong>Address space layout randomization (ASLR)</strong> - ASLR is a
 memory protection technique used to prevent the exploitation of memory 
corruption vulnerabilities. ASLR randomly arranges the address space 
positions of key data areas of a process, including the base of the 
executable and the positions of the stack, heap and libraries.</p>
</li>
</ul>
<h3>x86 vs x64 Memory Space</h3>
<p>When working with Windows processes, it's important to note whether 
the process is x86 or x64. x86 processes have a smaller memory space of 
4GB (<code>0xFFFFFFFF</code>) whereas x64 has a vastly larger memory space of 128TB (<code>0xFFFFFFFFFFFFFFFF</code>).</p>
<h3>Allocating Memory Example</h3>
<p>This example goes through small code snippets to better understand 
how one can interact with Windows memory via C functions and Windows 
APIs. The first step in interacting with memory is allocating memory. 
The snippet below demonstrates several ways to allocate memory which is 
essentially reserving a memory inside the running process.</p>
<pre><code>// Allocating a memory buffer of *100* bytes

// Method 1 - Using malloc()
PVOID pAddress = malloc(100);

// Method 2 - Using HeapAlloc()
PVOID pAddress = HeapAlloc(GetProcessHeap(), 0, 100);

// Method 3 - Using LocalAlloc()
PVOID pAddress = LocalAlloc(LPTR, 100);
</code></pre>
<p>Memory allocation functions return the <em>base address</em> which is simply a pointer to the beginning of the memory block that was allocated. Using the snippets above, <code>pAddress</code>
 will be the base address of the memory block that was allocated. Using 
this pointer several actions can be taken such as reading, writing, and 
executing. The type of actions that can be performed will depend on the 
protection assigned to the allocated memory region.</p>
<p>The image below shows what <code>pAddress</code> looks like under the debugger.</p>
<p><img src="Windows%20Memory%20Management_files/memory-mgmt-105290746-d5fa58f7-b3d7-4064-98b8-6f7ee5dcc12d.png" alt="image"></p>
<p>When memory is allocated, it may either be empty or contain random 
data. Some memory allocation functions provide an option to zero out the
 memory region during the allocation process.</p>
<p><img src="Windows%20Memory%20Management_files/memory-mgmt-205290946-31ab4c35-b0e6-4727-9d45-8e439453207d.png" alt="image"></p>
<h3>Writing To Memory Example</h3>
<p>The next step after memory allocation is generally writing to that 
buffer. Several options can be used to write to memory but for this 
example, <code>memcpy</code> is used.</p>
<pre><code>PVOID pAddress	= HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 100);

CHAR* cString	= "MalDev Academy Is The Best";

memcpy(pAddress, cString, strlen(cString));
</code></pre>
<p><code>HeapAlloc</code> uses the <code>HEAP_ZERO_MEMORY</code> flag which causes the allocated memory to be initialized to zero. The string is then copied to the allocated memory using <code>memcpy</code>. The last parameter in <code>memcpy</code> is the number of bytes to be copied. Next, recheck the buffer to verify that the data was successfully written.</p>
<p><img src="Windows%20Memory%20Management_files/memory-mgmt-305293097-6334290e-3d79-4254-9a79-cd7011ca4bbc.png" alt="image"></p>
<h3>Freeing Allocated Memory</h3>
<p>When the application is done using an allocated buffer, it is highly recommended to deallocate or free the buffer to avoid <a href="https://en.wikipedia.org/wiki/Memory_leak" target="_blank">memory leaks</a>.</p>
<p>Depending on what function was used to allocate memory, it will have a corresponding memory deallocation function. For example:</p>
<ul>
<li>
<p>Allocating with <code>malloc</code> requires the use of the <code>free</code> function.</p>
</li>
<li>
<p>Allocating with <code>HeapAlloc</code> requires the use of the <code>HeapFree</code> function.</p>
</li>
<li>
<p>Allocating with <code>LocalAlloc</code> requires the use of the <code>LocalFree</code> function.</p>
</li>
</ul>
<p>The images below show <code>HeapFree</code> in action, freeing allocated memory at address <code>0000023ADE449900</code>. Notice the address <code>0000023ADE449900</code>
 still exists within the process but its original content was 
overwritten with random data. This new data is most likely due to a new 
allocation performed by the OS inside the process.</p>
<p><img src="Windows%20Memory%20Management_files/memory-mgmt-424394866-a0dead3a-b72b-4600-8003-b8ecc2a27449.png" alt="IMAGE"></p>
<p><img src="Windows%20Memory%20Management_files/memory-mgmt-524394895-7c747075-d866-4ca8-a15f-09cb4fec7e6d.png" alt="IMAGE"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use the demonstrated memory allocation functions to allocate memory.</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Free the allocated memory buffers using the appropriate freeing function</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use the VirtualAlloc WinAPI to allocate memory</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Write to the allocated memory region using the RtlFillMemory WinAPI</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Find other memory allocation functions</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/5"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/6/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 hidden">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/6/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 ">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/7"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Windows%20Memory%20Management_files/jquery-3.6.0.min.js"></script>
        <script src="Windows%20Memory%20Management_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Windows%20Memory%20Management_files/app.4474f4d1.css"><link rel="modulepreload" href="Windows%20Memory%20Management_files/app.5f3af5ce.js"><link rel="stylesheet" href="Windows%20Memory%20Management_files/app.4474f4d1.css"><script type="module" src="Windows%20Memory%20Management_files/app.5f3af5ce.js"></script><script src="Windows%20Memory%20Management_files/navbar.js"></script>
<script src="Windows%20Memory%20Management_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 6;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>