<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/css2.css" rel="stylesheet">
        <link href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/css2_002.css" rel="stylesheet">
        <title>IAT Hiding &amp; Obfuscation - Compile Time API Hashing</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 57 - IAT Hiding &amp; Obfuscation - Compile Time API Hashing
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/CompileTimeApiHashing" target="_blank">
                    <img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>IAT Hiding &amp; Obfuscation - Compile Time API Hashing</h2>
<h3>Introduction</h3>
<p>In the previous API Hashing module, the hashes of the functions and 
modules were generated before adding them to the code. Unfortunately, 
that can be highly time-consuming and can be avoided by using <em>Compile Time API Hashing</em>.</p>
<p>Furthermore, in the previous module hashes were hard coded which can 
allow security solutions to use them as IoC, if they are not updated in 
each implementation. With compile time API hashing, however, dynamic 
hashes are generated every time the binary is compiled.</p>
<h3>Caveat</h3>
<p>This method only works with C++ projects due to the use of the <a href="https://en.cppreference.com/w/cpp/language/constexpr" target="_blank">constexpr</a> keyword. The <code>constexpr</code> operator in C++ is used to indicate that a function or variable can be evaluated at compile time. In addition, the <code>constexpr</code>
 operator on functions and variables improves the performance of an 
application by allowing the compiler to perform certain calculations at 
compile time rather than at runtime.</p>
<h3>Compile Time Hashing Walkthrough</h3>
<p>The sections below walk through the steps required to implement compile time hashing.</p>
<h4>Create Compile Time Functions</h4>
<p>The first step is to convert the hashing functions that will be used to become compile time functions using the <code>constexpr</code> operator. In this case, the Dbj2 hashing algorithm will be modified to use the <code>constexpr</code> operator.</p>
<pre><code>#define        SEED       5

// Compile time Djb2 hashing function (WIDE)
constexpr DWORD HashStringDjb2W(const wchar_t* String) {
	ULONG Hash = (ULONG)g_KEY;
	INT c = 0;
	while ((c = *String++)) {
		Hash = ((Hash &lt;&lt; SEED) + Hash) + c;
	}

	return Hash;
}

// Compile time Djb2 hashing function (ASCII)
constexpr DWORD HashStringDjb2A(const char* String) {
	ULONG Hash = (ULONG)g_KEY;
	INT c = 0;
	while ((c = *String++)) {
		Hash = ((Hash &lt;&lt; SEED) + Hash) + c;
	}

	return Hash;
}
</code></pre>
<p>The undefined variable, <code>g_KEY</code>, is used as the initial hash in both functions. <code>g_KEY</code> is a global <code>constexpr</code> variable and is randomly generated by a function named <code>RandomCompileTimeSeed</code> (explained below), on each compilation of the binary.</p>
<h4>Generating a Random Seed Value</h4>
<p><code>RandomCompileTimeSeed</code> is used to generate a random seed value based on the current time. It does this by extracting the digits from the <a href="https://www.cprogramming.com/reference/preprocessor/__TIME__.html#:~:text=__TIME__%20is%20a,moment%20a%20binary%20was%20built.&amp;text=You%20can%20also%20use%20the,to%20get%20the%20current%20date." target="_blank"><strong>TIME</strong></a> macro, which is a predefined macro in C++ that expands to the current time in the <code>HH:MM:SS</code> format. Then, the <code>RandomCompileTimeSeed</code> function multiplies each digit by a different random constant and adds them all together to produce a final seed value.</p>
<pre><code>// Generate a random key at compile time which is used as the initial hash
constexpr int RandomCompileTimeSeed(void)
{
	return '0' * -40271 +
		__TIME__[7] * 1 +
		__TIME__[6] * 10 +
		__TIME__[4] * 60 +
		__TIME__[3] * 600 +
		__TIME__[1] * 3600 +
		__TIME__[0] * 36000;
};

// The compile time random seed
constexpr auto g_KEY = RandomCompileTimeSeed() % 0xFF;
</code></pre>
<h4>Creating Macros</h4>
<p>Next, define two macros, <code>RTIME_HASHA</code> and <code>RTIME_HASHW</code>, to be used by the <code>GetProcAddressH</code> function during runtime to compare hashes. The macros should be defined as follows.</p>
<pre><code>#define RTIME_HASHA( API ) HashStringDjb2A((const char*) API)       // Calling HashStringDjb2A
#define RTIME_HASHW( API ) HashStringDjb2W((const wchar_t*) API)    // Calling HashStringDjb2W
</code></pre>
<p>Once a random compile time hashing function is established, the next 
step is to declare compile time hash values in variables. To streamline 
the process, two macros will be implemented.</p>
<pre><code>#define CTIME_HASHA( API ) constexpr auto API/_Rotr32A = HashStringDjb2A((const char*) #API);
#define CTIME_HASHW( API ) constexpr auto API/_Rotr32W = HashStringDjb2W((const wchar_t*) L#API);
</code></pre>
<h4>Stringizing Operator</h4>
<p>The <code>#</code> symbol is known as the <em>stringizing operator</em>. It is used to convert a preprocessor macro parameter into a string literal.</p>
<p>For example, if the <code>CTIME_HASHA</code> macro is called with the argument <code>SomeFunction</code>, like <code>HASHA(SomeFunction)</code>, the <code>#API</code> expression would be replaced with the string literal <code>"SomeFunction"</code>.</p>
<h4>Merging Operator</h4>
<p>The <code>/</code> operator is known as the <em>merging operator</em>. It is used to combine two preprocessor macros into a single macro. The <code>/</code> operator is used to combine the API parameter with the string <code>"_Rotr32A"</code> or <code>"_Rotr32W"</code>, respectively, to form the final name of the variable being defined.</p>
<p>For example, if the <code>CTIME_HASHA</code> macro is called with the argument <code>SomeFunction</code>, like <code>HASHA(SomeFunction)</code>, the <code>/</code> operator would combine API with <code>"_Rotr32A"</code> to form the final variable name <code>SomeFunction_Rotr32A</code>.</p>
<h3>Macro Expansion Demo</h3>
<p>To better understand how the previous macros work, the image below shows an example using the <code>CTIME_HASHA</code> macro to create a hash for <code>MessageBoxA</code> by creating a variable called <code>MessageBoxA_Rotr32A</code> that will hold the compile time hash value.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-110127028-dfa23b5b-cc3a-430a-b792-23792.png" alt="image"></p>
<h3>Compile Time Hashing - Code</h3>
<p>After putting all the pieces together, the code will be as shown below.</p>
<pre><code>#include &lt;Windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;winternl.h&gt;


#define        SEED       5

// generate a random key (used as initial hash)
constexpr int RandomCompileTimeSeed(void)
{
	return '0' * -40271 +
		__TIME__[7] * 1 +
		__TIME__[6] * 10 +
		__TIME__[4] * 60 +
		__TIME__[3] * 600 +
		__TIME__[1] * 3600 +
		__TIME__[0] * 36000;
};

constexpr auto g_KEY = RandomCompileTimeSeed() % 0xFF;


// Compile time Djb2 hashing function (WIDE)
constexpr DWORD HashStringDjb2W(const wchar_t* String) {
	ULONG Hash = (ULONG)g_KEY;
	INT c = 0;
	while ((c = *String++)) {
		Hash = ((Hash &lt;&lt; SEED) + Hash) + c;
	}

	return Hash;
}

// Compile time Djb2 hashing function (ASCII)
constexpr DWORD HashStringDjb2A(const char* String) {
	ULONG Hash = (ULONG)g_KEY;
	INT c = 0;
	while ((c = *String++)) {
		Hash = ((Hash &lt;&lt; SEED) + Hash) + c;
	}

	return Hash;
}


// runtime hashing macros 
#define RTIME_HASHA( API ) HashStringDjb2A((const char*) API)
#define RTIME_HASHW( API ) HashStringDjb2W((const wchar_t*) API)



// compile time hashing macros (used to create variables)
#define CTIME_HASHA( API ) constexpr auto API/_Rotr32A = HashStringDjb2A((const char*) #API);
#define CTIME_HASHW( API ) constexpr auto API/_Rotr32W = HashStringDjb2W((const wchar_t*) L#API);


FARPROC GetProcAddressH(HMODULE hModule, DWORD dwApiNameHash) {

	PBYTE pBase = (PBYTE)hModule;

	PIMAGE_DOS_HEADER           pImgDosHdr        = (PIMAGE_DOS_HEADER)pBase;
	if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
		return NULL;

	PIMAGE_NT_HEADERS           pImgNtHdrs        = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);
	if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
		return NULL;

	IMAGE_OPTIONAL_HEADER       ImgOptHdr         = pImgNtHdrs-&gt;OptionalHeader;

	PIMAGE_EXPORT_DIRECTORY     pImgExportDir     = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

	PDWORD      FunctionNameArray     = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);
	PDWORD      FunctionAddressArray  = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);
	PWORD       FunctionOrdinalArray  = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);

	for (DWORD i = 0; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++) {
		CHAR*	pFunctionName       = (CHAR*)(pBase + FunctionNameArray[i]);
		PVOID	pFunctionAddress    = (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);

		if (dwApiNameHash == RTIME_HASHA(pFunctionName)) { // runtime hash value check 
			return (FARPROC)pFunctionAddress;
		}
	}

	return NULL;
}
</code></pre>
<h3>Demo</h3>
<p>This demo calls <code>MessageBoxA</code> and <code>MessageBoxW</code> using compile time API hashing using the <code>MessageBoxA_Rotr32A</code> compile time variable.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-210127200-98154fdf-2810-472c-b3f8-6fa46.png" alt="image"></p>
<h4>Check for IoCs</h4>
<p>Use the Sysinternal Strings tool to search for the "MessageBox".</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-310127229-b041b0ac-e48e-4c12-88b5-cc39c.png" alt="image"></p>
<br>
<p>Use the Dumpbin tool to check the IAT for anything related to <code>MessageBox</code>.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-410127235-cfc37903-ef42-4ab6-8401-d1a20.png" alt="image"></p>
<h4>Running The Binary</h4>
<p>Run the binary and see in fact <code>MessageBox</code> is being used.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-510127264-113b5309-cdbb-4d86-9c74-7e7a0.png" alt="image"></p>
<h4>Verify Dynamic Hash Value</h4>
<p>Print the hash values to the console in order to verify it's being modified every time the code is compiled.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-610127288-887779b6-b023-4a31-8bc7-e7601.png" alt="image"></p>
<br>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-710127301-b4ad2456-74a9-4030-893a-d330d.png" alt="image"></p>
<br>
<p>Rebuild the Visual Studio Project, check the hash values again and 
notice that the hash values are different from the previous run.</p>
<p><img src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/compile-time-hashing-810127330-fd9124e2-361c-463b-bc4e-7e5ea.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the reason the constexpr C++ keyword is required</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the stringizing operator</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the merging operator</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use the 'RTIME_HASHA' and 'RTIME_HASHW' macros to initialize compile-time variables</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/56"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/57/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/57/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/58"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/jquery-3.6.0.min.js"></script>
        <script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.4474f4d1.css"><link rel="modulepreload" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.5f3af5ce.js"><link rel="stylesheet" href="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.4474f4d1.css"><script type="module" src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/app.5f3af5ce.js"></script><script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/navbar.js"></script>
<script src="IAT%20Hiding%20&amp;%20Obfuscation%20-%20Compile%20Time%20API%20Hashing_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 57;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>