<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Dynamic-Link%20Library_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Dynamic-Link%20Library_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Dynamic-Link%20Library_files/css2.css" rel="stylesheet">
        <link href="Dynamic-Link%20Library_files/css2_002.css" rel="stylesheet">
        <title>Dynamic-Link Library</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Dynamic-Link%20Library_files/app.fdbb573b.css"><link rel="stylesheet" href="Dynamic-Link%20Library_files/app.fdbb573b.css"><link rel="stylesheet" href="Dynamic-Link%20Library_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Dynamic-Link%20Library_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 9 - Dynamic-Link Library
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Dynamic-Link%20Library_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Dynamic-Link%20Library_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="Dynamic-Link%20Library_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Dynamic-Link Library (DLL)</h2>
<h3>Introduction</h3>
<p>Both <code>.exe</code> and <code>.dll</code> file types are 
considered portable executable formats but there are differences between
 the two. This module explains the difference between the two file 
types.</p>
<h3>What is a DLL?</h3>
<p>DLLs are shared libraries of executable functions or data that can be
 used by multiple applications simultaneously. They are used to export 
functions to be used by a process. Unlike EXE files, DLL files cannot 
execute code on their own. Instead, DLL libraries need to be invoked by 
other programs to execute the code. As previously mentioned, the <code>CreateFileW</code> is exported from <code>kernel32.dll</code>, therefore if a process wants to call that function it would first need to load <code>kernel32.dll</code> into its address space.</p>
<p>Some DLLs are automatically loaded into every process by default 
since these DLLs export functions that are necessary for the process to 
execute properly. A few examples of these DLLs are <code>ntdll.dll</code>, <code>kernel32.dll</code> and <code>kernelbase.dll</code>. The image below shows several DLLs that are currently loaded by the <code>explorer.exe</code> process.</p>
<p><img src="Dynamic-Link%20Library_files/loaded-libraries.png" alt="Explorer-DLLs"></p>
<h3>System-Wide DLL Base Address</h3>
<p>The Windows OS uses a system-wide DLL base address to load some DLLs 
at the same base address in the virtual address space of all processes 
on a given machine to optimize memory usage and improve system 
performance. The following image shows <code>kernel32.dll</code> being loaded at the same address (<code>0x7fff9fad0000</code>) among multiple running processes.</p>
<p><img src="Dynamic-Link%20Library_files/dll-new-221233432-97a38697-bd82-45f8-ad5f-90d674de8b17.png" alt="image"></p>
<h3>Why Use DLLs?</h3>
<p>There are several reasons why DLLs are very often used in Windows:</p>
<ol>
<li>
<p><strong>Modularization of Code</strong> - Instead of having one 
massive executable that contains the entire functionality, the code is 
divided into several independent libraries with each library being 
focused on specific functionality. Modularization makes it easier for 
developers during development and debugging.</p>
</li>
<li>
<p><strong>Code Reuse</strong> - DLLs promote code reuse since a library can be invoked by multiple processes.</p>
</li>
<li>
<p><strong>Efficient Memory Usage</strong> - When several processes need
 the same DLL, they can save memory by sharing that DLL instead of 
loading it into the process's memory.</p>
</li>
</ol>
<h3>DLL Entry Point</h3>
<p>DLLs can optionally specify an entry point function that executes 
code when a certain task occurs such as when a process loads the DLL 
library. There are 4 possibilities for the entry point being called:</p>
<ul>
<li>
<p><code>DLL_PROCESS_ATTACHED</code> - A process is loading the DLL.</p>
</li>
<li>
<p><code>DLL_THREAD_ATTACHED</code> - A process is creating a new thread.</p>
</li>
<li>
<p><code>DLL_THREAD_DETACH</code> - A thread exits normally.</p>
</li>
<li>
<p><code>DLL_PROCESS_DETACH</code> - A process unloads the DLL.</p>
</li>
</ul>
<h3>Sample DLL Code</h3>
<p>The code below shows a typical DLL code structure.</p>
<pre><code>BOOL APIENTRY DllMain(
    HANDLE hModule,             // Handle to DLL module
    DWORD ul_reason_for_call,   // Reason for calling function
    LPVOID lpReserved           // Reserved
) {
    
    switch (ul_reason_for_call) {
        case DLL_PROCESS_ATTACHED: // A process is loading the DLL.
        // Do something here
        break;
        case DLL_THREAD_ATTACHED: // A process is creating a new thread.
        // Do something here
        break;
        case DLL_THREAD_DETACH: // A thread exits normally.
        // Do something here
        break;
        case DLL_PROCESS_DETACH: // A process unloads the DLL.
        // Do something here
        break;
    }
    return TRUE;
}
</code></pre>
<h3>Exporting a Function</h3>
<p>DLLs can export functions that can then be used by the calling 
application or process. To export a function it needs to be defined 
using the keywords <code>extern</code> and <code>__declspec(dllexport)</code>. An example exported function <code>HelloWorld</code> is shown below.</p>
<pre><code>////// sampleDLL.dll //////

extern __declspec(dllexport) void HelloWorld(){
// Function code here
}
</code></pre>
<h3>Dynamic Linking</h3>
<p>It's possible to use the <code>LoadLibrary</code>, <code>GetModuleHandle</code> and <code>GetProcAddress</code> WinAPIs to import a function from a DLL. This is referred to as <a href="https://learn.microsoft.com/en-us/windows/win32/dlls/load-time-dynamic-linking" target="_blank">dynamic linking</a>.
 This is a method of loading and linking code (DLLs) at runtime rather 
than linking them at compile time using the linker and import address 
table.</p>
<p>There are several advantages of using dynamic linking, these are documented by Microsoft <a href="https://learn.microsoft.com/en-us/windows/win32/dlls/advantages-of-dynamic-linking" target="_blank">here</a>.</p>
<p>This section walks through the steps of loading a DLL, retrieving the
 DLL's handle, retrieving the exported function's address and then 
invoking the function.</p>
<h4>Loading a DLL</h4>
<p>Calling a function such as <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa" target="_blank">MessageBoxA</a> in an application will force the Windows OS to load the DLL exporting the <code>MessageBoxA</code> function into the calling process's memory address space, which in this case is <code>user32.dll</code>. Loading <code>user32.dll</code> was done automatically by the OS when the process started and not by the code.</p>
<p>However, in some cases such as the <code>HelloWorld</code> function in <code>sampleDLL.dll</code>, the DLL may not be loaded into memory. For the application to call the <code>HelloWorld</code> function, it first needs to retrieve the DLL's handle that is exporting the function. If the application doesn't have <code>sampleDLL.dll</code> loaded into memory, it would require the usage of the <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya" target="_blank">LoadLibrary</a> WinAPI, as shown below.</p>
<pre><code>HMODULE hModule = LoadLibraryA("sampleDLL.dll"); // hModule now contain sampleDLL.dll's handle
</code></pre>
<h4>Retrieving a DLL's Handle</h4>
<p>If <code>sampleDLL.dll</code> is already loaded into the application's memory, one can retrieve its handle via the <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea" target="_blank">GetModuleHandle</a> WinAPI function without leveraging the <code>LoadLibrary</code> function.</p>
<pre><code>HMODULE hModule = GetModuleHandleA("sampleDLL.dll");
</code></pre>
<h4>Retrieving a Function's Address</h4>
<p>Once the DLL is loaded into memory and the handle is retrieved, the 
next step is to retrieve the function's address. This is done using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress" target="_blank">GetProcAddress</a> WinAPI which takes the handle of the DLL that exports the function and the function name.</p>
<pre><code>PVOID pHelloWorld = GetProcAddress(hModule, "HelloWorld");
</code></pre>
<h4>Invoking The Function</h4>
<p>Once <code>HelloWorld</code>'s address is saved into the <code>pHelloWorld</code> variable, the next step is to perform a type-cast on this address to <code>HelloWorld</code>'s function pointer. This function pointer is required in order to invoke the function.</p>
<pre><code>// Constructing a new data type that represents HelloWorld's function pointer 
typedef void (WINAPI* HelloWorldFunctionPointer)();  

void call(){
    HMODULE hModule = LoadLibraryA("sampleDLL.dll");
    PVOID pHelloWorld = GetProcAddress(hModule, "HelloWorld");
    // Type-casting the 'pHelloWorld' variable to be of type 'HelloWorldFunctionPointer' 
    HelloWorldFunctionPointer HelloWorld = (HelloWorldFunctionPointer)pHelloWorld;
    HelloWorld();   // Calling the 'HelloWorld' function via its function pointer 
}
</code></pre>
<h3>Dynamic Linking Example</h3>
<p>The code below demonstrates another simple example of dynamic linking where <code>MessageBoxA</code> is called. The code assumes that <code>user32.dll</code>, the DLL that exports that function, isn't loaded into memory. Recall that if a DLL isn't loaded into memory the usage of <code>LoadLibrary</code> is required to load that DLL into the process's address space.</p>
<pre><code>typedef int (WINAPI* MessageBoxAFunctionPointer)( // Constructing a new data type, that will represent MessageBoxA's function pointer 
  HWND          hWnd,
  LPCSTR        lpText,
  LPCSTR        lpCaption,
  UINT          uType
);

void call(){
    // Retrieving MessageBox's address, and saving it to 'pMessageBoxA' (MessageBoxA's function pointer)
    MessageBoxAFunctionPointer pMessageBoxA = (MessageBoxAFunctionPointer)GetProcAddress(LoadLibraryA("user32.dll"), "MessageBoxA");
    if (pMessageBoxA != NULL){
        // Calling MessageBox via its function pointer if not null    
        pMessageBoxA(NULL, "MessageBox's Text", "MessageBox's Caption", MB_OK); 
    }
}
</code></pre>
<h3>Function Pointers</h3>
<p>For the remainder of the course, the function pointer data types will
 have a naming convention that uses the WinAPI's name prefixed with <code>fn</code>, which stands for "function pointer". For example, the above <code>MessageBoxAFunctionPointer</code> data type will be represented as <code>fnMessageBoxA</code>. This is used to maintain simplicity and improve clarity throughout the course.</p>
<h3>Rundll32.exe</h3>
<p>There are a couple of ways to run exported functions without using a programmatical method. One common technique is to use the <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/rundll32" target="_blank">rundll32.exe</a> binary. <code>Rundll32.exe</code>
 is a built-in Windows binary that is used to run an exported function 
of a DLL file. To run an exported function use the following command:</p>
<pre><code>rundll32.exe &lt;dllname&gt;, &lt;function exported to run&gt;
</code></pre>
<p>For example, <code>User32.dll</code> exports the function <code>LockWorkStation</code> which locks the machine. To run the function, use the following command:</p>
<pre><code>rundll32.exe user32.dll,LockWorkStation
</code></pre>
<h3>Creating a DLL File With Visual Studio</h3>
<p>To create a DLL file, launch Visual studio and create a new project. When given the project templates, select the <code>Dynamic-Link Library (DLL)</code> option.</p>
<p><img src="Dynamic-Link%20Library_files/create-dll-1.png" alt="image"></p>
<br>
<p>Next, select the location where to save the project files. When that's done, the following C code should appear.</p>
<p><img src="Dynamic-Link%20Library_files/create-dll-2.png" alt="image"></p>
<br>
<p>The provided DLL template comes with <code>framework.h</code>, <code>pch.h</code> and <code>pch.cpp</code> which are known as <a href="https://en.wikipedia.org/wiki/Precompiled_header" target="_blank">Precompiled Headers</a>.
 These are files used to make the project compilation faster for large 
projects. It is unlikely that these will be required in this situation 
and therefore it is recommended to delete these files. To do so, 
highlight the file and press the delete key and select the 'Delete' 
option.</p>
<p><img src="Dynamic-Link%20Library_files/create-dll-3-1.png" alt="image"></p>
<br>
<p><img src="Dynamic-Link%20Library_files/create-dll-3.png" alt="image"></p>
<br>
<p>After deleting the precompiled headers, the compiler's default 
settings must be changed to confirm that precompiled headers should not 
be used in the project.</p>
<p><img src="Dynamic-Link%20Library_files/create-dll-4.png" alt="image"></p>
<br>
<p>Go to <strong>C/C++ &gt; Advanced Tab</strong></p>
<p><img src="Dynamic-Link%20Library_files/create-dll-5.png" alt="image"></p>
<br>
<p>Change the 'Precompiled Header' option to 'Not Using Precompiled Headers' and press 'Apply'.</p>
<p><img src="Dynamic-Link%20Library_files/create-dll-6.png" alt="image"></p>
<br>
<p>Finally, change the <code>dllmain.cpp</code> file to <code>dllmain.c</code>.
 This is required since the provided code snippets in Maldev Academy use
 C instead of C++. To compile the program, click Build &gt; Build 
Solution and a DLL will be created under the <em>Release</em> or <em>Debug</em> folder, depending on the compile configuration.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Review the 4 entry points for a DLL</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Read the documentation on LoadLibrary, GetModuleHandle and GetProcAddress</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Create a DLL that exports a function</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Invoke the function using Rundll32.exe</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Create an EXE program that loads a DLL. Verify the DLL was loaded using Process Hacker</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/8"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/9/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 hidden">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/9/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 ">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/10"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Dynamic-Link%20Library_files/jquery-3.6.0.min.js"></script>
        <script src="Dynamic-Link%20Library_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Dynamic-Link%20Library_files/app.4474f4d1.css"><link rel="modulepreload" href="Dynamic-Link%20Library_files/app.5f3af5ce.js"><link rel="stylesheet" href="Dynamic-Link%20Library_files/app.4474f4d1.css"><script type="module" src="Dynamic-Link%20Library_files/app.5f3af5ce.js"></script><script src="Dynamic-Link%20Library_files/navbar.js"></script>
<script src="Dynamic-Link%20Library_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 9;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>