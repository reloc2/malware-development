<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Syscalls%20-%20Userland%20Hooking_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Syscalls%20-%20Userland%20Hooking_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Syscalls%20-%20Userland%20Hooking_files/css2.css" rel="stylesheet">
        <link href="Syscalls%20-%20Userland%20Hooking_files/css2_002.css" rel="stylesheet">
        <title>Syscalls - Userland Hooking</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Syscalls%20-%20Userland%20Hooking_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Userland%20Hooking_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Userland%20Hooking_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Syscalls%20-%20Userland%20Hooking_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 64 - Syscalls - Userland Hooking
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Syscalls%20-%20Userland%20Hooking_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Syscalls%20-%20Userland%20Hooking_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Syscalls%20-%20Userland%20Hooking_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/MalDevEdr" target="_blank">
                    <img src="Syscalls%20-%20Userland%20Hooking_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Syscalls - Userland Hooking</h2>
<h3>Introduction</h3>
<p>Host-based security solutions frequently perform API hooking on 
syscalls to enable analysis and monitoring of programs at runtime. For 
instance, by hooking the <code>NtProtectVirtualMemory</code> syscall, the security solution can detect higher-level WinAPI calls such as <code>VirtualProtect</code>,
 even when it is concealed from the import address table of the binary. 
Furthermore, security solutions can access any memory region that is set
 to executable and scan it in search of signatures. Userland hooks are 
generally installed before the <code>syscall</code> instruction, which is the last step for a syscall function in user mode.</p>
<p>Kernel mode hooks can be implemented post-execution flow transfer to 
the kernel, however, Windows Patch Guard and other mitigations make it 
difficult for third-party applications to patch kernel memory, making 
the task difficult if not impossible. Placing kernel mode hooks may also
 result in stability implications and cause unexpected behavior, which 
is why it is rarely implemented.</p>
<h3>Showcasing Userland Hooking</h3>
<p>This section utilizes a DLL file which, when injected into a process, will use the Minhook Library to install a hook on <code>NtProtectVirtualMemory</code>
 in order to gain insight into the operations of EDRs about syscall 
hooking. The hook installed is equipped with the capability of dumping 
the memory's contents if it is set to be executable (<code>RX</code> or <code>RWX</code>). Furthermore, the process will be terminated if a <code>RWX</code> memory region is detected.</p>
<p>The DLL source code is available for download for testing purposes. 
It is not necessary to understand the code at this time, however, it 
contains extensive comments to make it easier to understand.</p>
<h4>EDR Hooking Demonstration</h4>
<p>This section demonstrates how an EDR can block the execution of a certain payload using syscall hooking. The <em>APC Injection</em> code will be the malicious binary in this demo.</p>
<p>1.Running the program without hooking <code>NtProtectVirtualMemory</code>.</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-113914292-072b98f1-dd82-4ccc-b111-2a.png" alt="image"></p>
<p>2.Injecting <em>MalDevEdr.dll</em> into ApcInjection.exe using Process Hacker</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-213914403-878e7988-5106-49dd-95fd-11.png" alt="image"></p>
<p>3.The DLL is injected, and it detects <code>RX</code> (this is related to the DLL injection)</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-313917466-28dfea35-3e7d-489f-9575-92.png" alt="image"></p>
<p>4.Pressing the Enter key on the ApcInjection.exe console, triggers a call to <code>NtProtectVirtualMemory</code>, setting <code>0x0000025041080000</code> as <code>RWX</code> memory, this address is then dumped by the DLL to the screen. The content that was dumped is the Msfvenom calc payload.</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-413917672-f8a15753-f95d-4236-98e0-d5.png" alt="image"></p>
<h4>Explanation</h4>
<p>When <code>ApcInjection.exe</code> uses <code>VirtualProtect</code> with a <code>PAGE_EXECUTE_READWRITE</code> argument, it's intercepted by <code>MalDevEdr.dll</code>. <code>MalDevEdr.dll</code> will use the base address passed to <code>VirtualProtect</code> to dump the contents of that memory region. Since the memory region is being changed to <code>RWX</code>, <code>MalDevEdr.dll</code>
 terminates the program and blocks the payload from being executed, 
which is something Windows Defender Antivirus was not able to do.</p>
<p>This proof of concept demonstrates the power of API hooking in 
detecting and monitoring a program at runtime. In real-world scenarios, 
EDRs will typically hook a wider range of syscalls, enhancing their 
ability to detect malicious actions.</p>
<h3>Bypassing Userland Syscall Hooks</h3>
<p>Using syscalls directly is one method of bypassing userland hooks. For example, using <code>NtAllocateVirtualMemory</code> instead of the <code>VirtualAlloc/Ex</code> WinAPIs when allocating memory for the payload. There are other several ways that syscalls can be called stealthily:</p>
<ul>
<li>
<p>Using Direct Syscalls</p>
</li>
<li>
<p>Using Indirect Syscalls</p>
</li>
<li>
<p>Unhooking</p>
</li>
</ul>
<h3>Direct Syscalls</h3>
<p>Evasion of userland syscall hooking can be achieved by obtaining a 
version of the syscall function coded in the assembly language and 
calling that crafted syscall directly from within the assembly file. The
 challenge lies in determining the syscall service number (SSN), as this
 number varies from one system to another. To overcome this, the SSN can
 be either hard-coded in the assembly file or calculated dynamically 
during runtime. A sample crafted syscall in an assembly file (<code>.asm</code>) is presented below.</p>
<p>Rather than calling <code>NtAllocateVirtualMemory</code> with <code>GetProcAddress</code> and <code>GetModuleHandle</code>
 as previously done in this course, the assembly function below can be 
utilized for the same result. This eliminates the need to call <code>NtAllocateVirtualMemory</code> from within the NTDLL address space where hooks are installed, thereby avoiding the hooks.</p>
<pre><code>NtAllocateVirtualMemory PROC
    mov r10, rcx
    mov eax, (ssn of NtAllocateVirtualMemory)
    syscall
    ret
NtAllocateVirtualMemory ENDP

NtProtectVirtualMemory PROC
    mov r10, rcx
    mov eax, (ssn of NtProtectVirtualMemory)
    syscall
    ret
NtProtectVirtualMemory ENDP

// other syscalls ...
</code></pre>
<p>This method is utilized in tools such as <a href="https://github.com/jthuraisamy/SysWhispers" target="_blank">SysWhispers</a> and <a href="https://github.com/am0nsec/HellsGate" target="_blank">HellsGate</a> both of which are discussed in upcoming modules.</p>
<h3>Indirect Syscalls</h3>
<p>Indirect syscalls are implemented similarly to direct syscalls where 
the assembly files must be manually crafted first. The distinction lies 
in the absence of the <code>syscall</code> instruction within the assembly function, which is instead jumped to. A visual representation is shown below.</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-516898739-a3e3c7e6-68d7-4e8f-a424-15.png" alt="image"></p>
<p>The assembly functions for <code>NtAllocateVirtualMemory</code> and <code>NtProtectVirtualMemory</code> are shown below.</p>
<pre><code>NtAllocateVirtualMemory PROC
    mov r10, rcx
    mov eax, (ssn of NtAllocateVirtualMemory)
    jmp (address of a syscall instruction)
    ret
NtAllocateVirtualMemory ENDP

NtProtectVirtualMemory PROC
    mov r10, rcx
    mov eax, (ssn of NtProtectVirtualMemory)
    jmp (address of a syscall instruction)
    ret
NtProtectVirtualMemory ENDP

// other syscalls ...
</code></pre>
<h4>Indirect Syscalls Benefit</h4>
<p>The benefit of performing indirect syscalls over direct syscalls is 
that security solutions will look for syscalls being called from outside
 of the NTDLL address space and consider them suspicious. With indirect 
syscalls, the syscall instruction is being executed from NTDLL's address
 space as how normal syscalls should be. Therefore, indirect syscalls 
are more likely to slip past security solutions than direct syscalls.</p>
<p>Indirect syscalls will be covered in the advanced modules.</p>
<h3>Unhooking</h3>
<p>Unhooking is another approach to evade hooks in which the hooked 
NTDLL library loaded in memory is replaced with an unhooked version. The
 unhooked version can be obtained from several places, but one of the 
common approaches is to load it directly from disk. Doing so will remove
 all the hooks placed inside the NTDLL library.</p>
<p><img src="Syscalls%20-%20Userland%20Hooking_files/syscalls-userland-hooks-616902643-50621da8-9220-413d-9a46-ff.png" alt="image"></p>
<p>Unhooking will be covered in the advanced modules.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Search online for articles discussing direct syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Search online for articles discussing indirect syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Search online for articles discussing NTDLL unhooking</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the difference between direct and indirect syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Optional: Review and understand the DLL source code provided in this module</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/63"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/64/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/64/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/65"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Syscalls%20-%20Userland%20Hooking_files/jquery-3.6.0.min.js"></script>
        <script src="Syscalls%20-%20Userland%20Hooking_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Syscalls%20-%20Userland%20Hooking_files/app.4474f4d1.css"><link rel="modulepreload" href="Syscalls%20-%20Userland%20Hooking_files/app.5f3af5ce.js"><link rel="stylesheet" href="Syscalls%20-%20Userland%20Hooking_files/app.4474f4d1.css"><script type="module" src="Syscalls%20-%20Userland%20Hooking_files/app.5f3af5ce.js"></script><script src="Syscalls%20-%20Userland%20Hooking_files/navbar.js"></script>
<script src="Syscalls%20-%20Userland%20Hooking_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 64;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>