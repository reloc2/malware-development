<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Windows%20Processes_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Windows%20Processes_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Windows%20Processes_files/css2.css" rel="stylesheet">
        <link href="Windows%20Processes_files/css2_002.css" rel="stylesheet">
        <title>Windows Processes</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Windows%20Processes_files/app.fdbb573b.css"><link rel="stylesheet" href="Windows%20Processes_files/app.fdbb573b.css"><link rel="stylesheet" href="Windows%20Processes_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Windows%20Processes_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 11 - Windows Processes
            </div>
            <div class="ml-2 w-4 h-4 bg-green-800 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Windows%20Processes_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Windows%20Processes_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="Windows%20Processes_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Windows Processes</h2>
<h3>What is a Windows Process?</h3>
<p>A Windows process is a program or application that is running on a 
Windows machine. A process can be started by either a user or by the 
system itself. The process consumes resources such as memory, disk 
space, and processor time to complete a task.</p>
<h3>Process Threads</h3>
<p>Windows processes are made up of one or more threads that are all 
running concurrently. A thread is a set of instructions that can be 
executed independently within a process. Threads within a process can 
communicate and share data. Threads are scheduled for execution by the 
operating system and managed in the context of a process.</p>
<h3>Process Memory</h3>
<p>Windows processes also use memory to store data and instructions. 
Memory is allocated to a process when it is created and the amount that 
is allocated can be set by the process itself. The operating system 
manages memory using both virtual and physical memory. Virtual memory 
allows the operating system to use more memory than what is physically 
available by creating a virtual address space that can be accessed by 
the applications. These virtual address spaces are divided into "pages" 
which are then allocated to processes.</p>
<h3>Memory Types</h3>
<p>Processes can have different types of memory:</p>
<ul>
<li>
<p><strong>Private memory</strong> is dedicated to a single process and 
cannot be shared by other processes. This type of memory is used to 
store data that is specific to the process.</p>
</li>
<li>
<p><strong>Mapped memory</strong> can be shared between two or more 
processes. It is used to share data between processes, such as shared 
libraries, shared memory segments, and shared files. Mapped memory is 
visible to other processes, but is protected from being modified by 
other processes.</p>
</li>
<li>
<p><strong>Image memory</strong> contains the code and data of an 
executable file. It is used to store the code and data that is used by 
the process, such as the program's code, data, and resources. Image 
memory is often related to DLL files loaded into a process's address 
space.</p>
</li>
</ul>
<h3>Process Environment Block (PEB)</h3>
<p>The Process Environment Block (PEB) is a data structure in Windows 
that contains information about a process such as its parameters, 
startup information, allocated heap information, and loaded DLLs, in 
addition to others. It is used by the operating system to store 
information about processes as they are running, and is used by the 
Windows loader to launch applications. It also stores information about 
the process such as the process ID (PID) and the path to the executable.</p>
<p>Every process created has its own PEB data structure, that will contain its own set of information about it.</p>
<h3>PEB Structure</h3>
<p>The PEB struct in C is shown below. The reserved members of this struct can be ignored.</p>
<pre><code>typedef struct _PEB {
  BYTE                          Reserved1[2];
  BYTE                          BeingDebugged;
  BYTE                          Reserved2[1];
  PVOID                         Reserved3[2];
  PPEB_LDR_DATA                 Ldr;
  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
  PVOID                         Reserved4[3];
  PVOID                         AtlThunkSListPtr;
  PVOID                         Reserved5;
  ULONG                         Reserved6;
  PVOID                         Reserved7;
  ULONG                         Reserved8;
  ULONG                         AtlThunkSListPtr32;
  PVOID                         Reserved9[45];
  BYTE                          Reserved10[96];
  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
  BYTE                          Reserved11[128];
  PVOID                         Reserved12[1];
  ULONG                         SessionId;
} PEB, *PPEB;
</code></pre>
<p>The non-reserved members are explained below.</p>
<h4>BeingDebugged</h4>
<p>BeingDebugged is a flag in the PEB structure that indicates whether 
the process is being debugged or not. It is set to 1 (TRUE) when the 
process is being debugged and 0 (FALSE) when it is not. It is used by 
the Windows loader to determine whether to launch the application with a
 debugger attached or not.</p>
<h4>Ldr</h4>
<p>Ldr is a pointer to a <code>PEB_LDR_DATA</code> structure in the 
Process Environment Block (PEB). This structure contains information 
about the process's loaded dynamic link library (DLL) modules. It 
includes a list of the DLLs loaded in the process, the base address of 
each DLL, and the size of each module. It is used by the Windows loader 
to keep track of DLLs loaded in the process. The <code>PEB_LDR_DATA</code> struct is shown below.</p>
<pre><code>typedef struct _PEB_LDR_DATA {
  BYTE       Reserved1[8];
  PVOID      Reserved2[3];
  LIST_ENTRY InMemoryOrderModuleList;
} PEB_LDR_DATA, *PPEB_LDR_DATA;
</code></pre>
<p><code>Ldr</code> can be leveraged to find the base address of a 
particular DLL, as well as which functions reside within its memory 
space. This will be used in future modules to build a custom version of <a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea" target="_blank">GetModuleHandleA/W</a> for added stealth.</p>
<h4>ProcessParameters</h4>
<p>ProcessParameters is a data structure in the PEB. It contains the 
command line parameters passed to the process when created. The Windows 
loader adds these parameters to the process's PEB structure. 
ProcessParameters is a pointer to the <code>RTL_USER_PROCESS_PARAMETERS</code> struct that's shown below.</p>
<pre><code>typedef struct _RTL_USER_PROCESS_PARAMETERS {
  BYTE           Reserved1[16];
  PVOID          Reserved2[10];
  UNICODE_STRING ImagePathName;
  UNICODE_STRING CommandLine;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;
</code></pre>
<p><code>ProcessParameters</code> will be leveraged in future modules to perform actions such as command line spoofing.</p>
<h4>AtlThunkSListPtr &amp; AtlThunkSListPtr32</h4>
<p><code>AtlThunkSListPtr</code> and <code>AtlThunkSListPtr32</code> are used by the ATL (Active Template Library) module to store a pointer to a linked list of <em>thunking functions</em>.
 Thunking functions are used to call functions that are implemented in a
 different address space, these often represent functions exported from a
 DLL (Dynamic Link Library) file. The linked list of thunking functions 
is used by the ATL module to manage the thunking process.</p>
<h4>PostProcessInitRoutine</h4>
<p>The <code>PostProcessInitRoutine</code> field in the PEB structure is
 used to store a pointer to a function that is called by the operating 
system after TLS (Thread Local Storage) initialization has been 
completed for all threads in the process. This function can be used to 
perform any additional initialization tasks that are required for the 
process.</p>
<p>TLS and TLS callbacks will be discussed in more detail later when required.</p>
<h4>SessionId</h4>
<p>The SessionID in the PEB is a unique identifier assigned to a single 
session. It is used to track the activity of the user during the 
session.</p>
<h3>Thread Environment Block (TEB)</h3>
<p>Thread Environment Block (TEB) is a data structure in Windows that 
stores information about a thread. It contains the thread's environment,
 security context, and other related information. It is stored in the 
thread's stack and is used by the Windows kernel to manage threads.</p>
<h3>TEB Structure</h3>
<p>The TEB struct in C is shown below. The reserved members of this struct can be ignored.</p>
<pre><code>typedef struct _TEB {
  PVOID Reserved1[12];
  PPEB  ProcessEnvironmentBlock;
  PVOID Reserved2[399];
  BYTE  Reserved3[1952];
  PVOID TlsSlots[64];
  BYTE  Reserved4[8];
  PVOID Reserved5[26];
  PVOID ReservedForOle;
  PVOID Reserved6[4];
  PVOID TlsExpansionSlots;
} TEB, *PTEB;
</code></pre>
<h4>ProcessEnvironmentBlock (PEB)</h4>
<p>Is a pointer to the PEB structure explained above, PEB is located 
inside the Thread Environment Block (TEB) and is used to store 
information about the currently running process.</p>
<h4>TlsSlots</h4>
<p>The TLS (Thread Local Storage) Slots are locations in the TEB that 
are used to store thread-specific data. Each thread in Windows has its 
own TEB, and each TEB has a set of TLS slots. Applications can use these
 slots to store data that is specific to that thread, such as 
thread-specific variables, thread-specific handles, thread-specific 
states, and so on.</p>
<h4>TlsExpansionSlots</h4>
<p>The TLS Expansion Slots in the TEB are a set of pointers used to 
store thread-local storage data for a thread. The TLS Expansion Slots 
are reserved for use by system DLLs.</p>
<h3>Process And Thread Handles</h3>
<p>On the Windows operating system, each process has a distinct process 
identifier or process ID (PID) which the operating system assigns when 
the process is created. PIDs are used to distinguish one running process
 from another. The same concept applies to a running thread, where a 
running thread has a unique ID that is used to differentiate it from the
 rest of the existing threads (in any process) on the system.</p>
<p>These identifiers can be used to open a handle to a process or a thread using the WinAPIs below.</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess" target="_blank">OpenProcess</a> - Opens an existing process object handle via its identifier.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openthread" target="_blank">OpenThread</a> - Opens an existing thread object handle via its identifier.</p>
</li>
</ul>
<p>These WinAPIs will be discussed in further detail later on when 
required. For now, it's enough to know that the opened handle can be 
used to perform further actions to its relative Windows object, such as 
suspending a process or thread.</p>
<p>Handles should always be closed once their use is no longer required to avoid <a href="https://en.wikipedia.org/wiki/Handle_leak" target="_blank">handle leaking</a>. This is achieved via the <a href="https://learn.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle" target="_blank">CloseHandle</a> WinAPI call.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Open Process Hacker and double click on a process, select the 'Threads' tab and look at the number of threads running</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Click the 'Memory' tab and view the different memory regions</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Read Microsoft's documentation for OpenProcess and OpenThread</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-3" data-objective-id="3" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Optional: Run notepad.exe and then use OpenProcess to get a handle to the process (Hint: copy notepad's PID from Process Hacker)</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-4" data-objective-id="4" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Review the different memory types</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-5" data-objective-id="5" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Review the PEB and TEB structures</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/10"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/11/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/11/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/12"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Windows%20Processes_files/jquery-3.6.0.min.js"></script>
        <script src="Windows%20Processes_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Windows%20Processes_files/app.4474f4d1.css"><link rel="modulepreload" href="Windows%20Processes_files/app.5f3af5ce.js"><link rel="stylesheet" href="Windows%20Processes_files/app.4474f4d1.css"><script type="module" src="Windows%20Processes_files/app.5f3af5ce.js"></script><script src="Windows%20Processes_files/navbar.js"></script>
<script src="Windows%20Processes_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 11;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>