<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Introduction%20To%20EDRs_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Introduction%20To%20EDRs_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Introduction%20To%20EDRs_files/css2_002.css" rel="stylesheet">
        <link href="Introduction%20To%20EDRs_files/css2.css" rel="stylesheet">
        <title>Introduction To EDRs</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Introduction%20To%20EDRs_files/app.fdbb573b.css"><link rel="stylesheet" href="Introduction%20To%20EDRs_files/app.fdbb573b.css"><link rel="stylesheet" href="Introduction%20To%20EDRs_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Introduction%20To%20EDRs_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 82 - Introduction To EDRs
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Introduction%20To%20EDRs_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Introduction%20To%20EDRs_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container ">
                <img src="Introduction%20To%20EDRs_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                    </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Introduction to EDRs</h2>
<h3>Introduction</h3>
<p>Endpoint Detection and Response (EDR) is a security solution that 
detects and responds to threats like ransomware and malware. It works by
 continuously monitoring endpoints for suspicious activity by collecting
 data on events such as system logs, network traffic, interprocess 
communications (IPCs), RPC calls, authentication attempts, and user 
activity.</p>
<p>EDRs will collect data when installed on endpoints and then analyze 
and correlate them to identify potential threats. When a threat is 
detected, EDR solutions can automatically respond by containing and 
isolating the affected endpoint from the network or by taking other 
predefined actions such as deleting malicious files or terminating 
suspicious processes.</p>
<p>Additionally, EDRs will run programs in sandboxes when executed and 
then continue to monitor them while they are running in search of 
malicious behavior.</p>
<p>EDRs should be used as a part of a larger cyber security strategy and
 used alongside other solutions such as firewalls, intrusion detection 
systems (IDS), intrusion prevention systems (IPS), and security 
information and event management (SIEM) solutions. Blue teamers also use
 EDR logs to perform threat hunting and search for IoCs that could have 
potentially been missed by the solution.</p>
<h3>How EDRs Work</h3>
<p>An EDR agent typically consists of two parts: a user-mode application
 and a kernel-mode driver. These parts gather information using the 
variety of methods mentioned earlier. The collected data is then 
analyzed and matched against signatures and malicious behavior. Upon 
detecting malicious or suspicious behavior, the EDR will log the finding
 in the security dashboard. EDR settings are highly customizable and 
depending on its settings, it may either take an action on its own or 
simply provide an alert. Below is an image from one of Microsoft's <a href="https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/alerts-queue?view=o365-worldwide" target="_blank">articles</a> showing the security dashboard for Microsoft Defender For Endpoint with a few alerts.</p>
<p><img src="Introduction%20To%20EDRs_files/edr-dashboard.png" alt="image"></p>
<h3>Signature Detection</h3>
<p>Recall that antiviruses are generally limited to basic signature 
detection and can be easily bypassed. Although an EDR is far more 
complex and contains more functionality, it does incorporate AV features
 to detect known malware. Furthermore, defenders can expand their EDR 
detection capabilities by creating custom rules.</p>
<h3>Detection Based on Behavior</h3>
<p>Behavior and runtime detection are one of the main features of an 
EDR. It can monitor running processes using several methods which are 
mentioned below.</p>
<h4>Userland Hooking</h4>
<p>EDRs utilize userland hooking to detect malicious arguments passed to
 functions as well as see payloads after their decryption. Userland 
hooking was previously explained in the <em>Syscalls - Userland Hooking</em> module. The image below further illustrates userland hooking in action.</p>
<p><img src="Introduction%20To%20EDRs_files/intro-edr-120017985-26bd0e42-0d73-4b1f-81da-b14b76e9efef.png" alt="image"></p>
<h4>Event Tracing for Windows (ETW)</h4>
<p>ETW or <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-" target="_blank">Event Tracing for Windows</a>
 is a kernel mode mechanism built into the Windows operating system that
 tracks and records events that are triggered by drivers and user-mode 
applications on the current system.</p>
<p>The following image is from Microsoft's <a href="https://learn.microsoft.com/en-us/windows-hardware/test/weg/instrumenting-your-code-with-etw" target="_blank">Instrumenting Your Code with ETW</a> article, which shows the ETW architecture.</p>
<img src="Introduction%20To%20EDRs_files/intro-edr-219966477-a29ed0b1-e7af-4e89-8461-98d570ab8e1b.png" width="1000px">
<p>ETW can log events like process creation and termination, device 
driver loading and unloading, file and registry access, and user input 
events. It can also capture network events by logging established 
connections and authentication requests.</p>
<p>EDRs can utilize this built-in mechanism to further enhance their 
ability in collecting information about a specific endpoint. On the 
other hand, several tools also utilize ETW such as <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon" target="_blank">Sysmon</a> and <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/procmon" target="_blank">Procmon</a>.</p>
<p>Bypassing ETW will be discussed in future modules.</p>
<h4>Antimalware Scan Interface (AMSI)</h4>
<p>AMSI or <a href="https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal" target="_blank">Antimalware Scan Interface</a>
 is another security mechanism built into the Windows OS starting from 
Windows 10. It allows third-party software to integrate with it and scan
 and detect malicious applications.</p>
<p>The following image is from Microsoft's <a href="https://learn.microsoft.com/en-us/windows/win32/amsi/how-amsi-helps" target="_blank">How the Antimalware Scan Interface (AMSI) helps you defend against malware</a> article in which AMSI's architecture is visualized.</p>
<p><img src="Introduction%20To%20EDRs_files/intro-edr-320010420-0de272ee-4b02-4394-b79f-6bd29770d8da.png" alt="image"></p>
<p>Through the use of AMSI, security software is capable of examining 
scripts, code, and .NET assemblies being executed and injected 
dynamically, such as those written in JavaScript, VBScript, PowerShell, 
or other scripting languages. Additionally, AMSI can scan .NET 
assemblies, which are programs built with Microsoft's .NET framework and
 programmed in C# and VB.NET.</p>
<p>AMSI is utilized through a group of APIs that are categorized by Microsoft as follows:</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-enumerations" target="_blank">Antimalware Scan Interface Enumerations</a> - Enumerations used by AMSI programming elements.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-functions" target="_blank">Antimalware Scan Interface Functions</a> - Functions that an application can call to request a scan. The image below shows the available AMSI scanning functions.</p>
</li>
</ul>
<p><img src="Introduction%20To%20EDRs_files/amsi-functions.png" alt="image"></p>
<ul>
<li>
<a href="https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-interfaces" target="_blank">Antimalware Scan Interface Interfaces</a> - COM interfaces that make up the AMSI API.</li>
</ul>
<p>The core implementation of the AMSI API is provided by <code>amsi.dll</code>
 which is the main DLL that AMSI uses to carry out its operations 
(reference the above-mentioned functions). The operating system's 
security subsystem and third-party security products that integrate with
 AMSI are two other sets of DLLs that are used by AMSI.</p>
<h4>Memory-Based Detection</h4>
<p>Memory-based detections refer to the IoCs and signatures that are 
generated after executing your payload and are often created by it. 
These IoCs can be heap allocations, trampolines when hooking APIs, 
thread stacks, and RWX memory sections.</p>
<p>Bypassing such measures take place post-execution as the payload is 
running where adjustments can be made to the payload's layout in memory.
 Memory-based detection is an advanced concept and is one of the most 
effective ways to detect malicious code execution.</p>
<p>Bypassing memory-based detections will be covered in future modules.</p>
<h4>Kernel CallBacks and Minifilter Drivers</h4>
<p>Kernel callbacks are a mechanism used in the Windows OS to allow 
kernel-mode code to register functions to be called by the OS at 
specific times or when an event occurs. Some example events are file 
creation, registry key modification, and a DLL being loaded.</p>
<p>When the event takes place, the OS will call the registered callback 
function and notify the kernel-mode code that it occurred. This 
"kernel-mode code" can be a device driver that is created by security 
products, which in this case is an EDR.</p>
<p>It is worth noting that poorly written or misconfigured callbacks can
 cause system instability, performance issues, or even security 
vulnerabilities therefore this isn't a method used by all EDR vendors.</p>
<p>Some example callbacks are listed below.</p>
<ul>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetcreateprocessnotifyroutine" target="_blank">PspCreateProcessNotifyRoutine</a> - Registers a driver-supplied callback to be called whenever a process is created or deleted.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetloadimagenotifyroutine" target="_blank">PspLoadImageNotifyRoutine</a> - Registers a driver-supplied callback to be called whenever an image (DLL or EXE) is loaded (or mapped) into memory.</p>
</li>
<li>
<p><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-cmregistercallbackex" target="_blank">CmRegisterCallbackEx</a> - Registers a driver-supplied callback to be called whenever a thread operates on the registry.</p>
</li>
</ul>
<p>To intercept, examine, and potentially block I/O events, Microsoft advises security vendors to use <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ifs/filter-manager-concepts" target="_blank">minifilter drivers</a>.
 Minifilter drivers are used in the Windows OS to intercept and modify 
I/O requests between applications and the file system. These drivers 
operate at a layer between the file system and the device driver that 
handles the physical I/O requests. EDRs can utilize minifilter drivers 
to register a callback for each I/O operation which will notify the 
driver of specific actions, such as process creation, registry 
modification, etc.</p>
<p>Additionally, kernel callbacks can be registered by the EDR's 
Minifilter component in order to get unmodified data directly from the 
kernel, instead of having data coming from user-land resources, since 
these can be tampered with and modified.</p>
<p>An example of how EDRs could use minifilter drivers and kernel callbacks is by calling <code>PspCreateProcessNotifyRoutine</code>
 to trigger the EDR to load its user-mode DLL into the created 
processes, in which it can perform system call hooking, and then using 
the minifilter driver functionality to monitor I/O file system requests 
by this newly created process.</p>
<h4>Network IoCs</h4>
<p>Processes that establish network connections possess a higher degree 
of suspicion due to the possibility of the connection being to an 
attacker-controlled C&amp;C server. Network connections will be 
monitored by EDRs and an alert will be triggered when a process that 
would not normally use a network connection begins doing so. For 
example, if process injection was done on <code>notepad.exe</code> and 
it began reaching out to the internet this is considered highly 
suspicious. Furthermore, aspects of the network connection are analyzed 
such as the target IP address, domain name, port number and network 
traffic.</p>
<h3>Bypassing EDRs</h3>
<p>Bypassing EDRs can be difficult to pull off at first and requires a 
group of methods and techniques instead of relying on a single approach.
 The reason multiple methods are required is that EDRs use more than one
 technique to monitor the process. For example, unhooking doesn't block 
ETWs events but will solve the userland hooking problem. Sometimes 
multiple implementations will be required to solve the same problem 
(this will be demonstrated in the NTDLL unhooking modules).</p>
<p>It is important to bear in mind that some EDR bypass techniques allow
 the loader to evade detection but not the C&amp;C payload in use. This 
can be the case due to several reasons:</p>
<ul>
<li>
<p>The C&amp;C network anomalies are well-known and signatured by the EDR.</p>
</li>
<li>
<p>The loader uses direct/indirect syscalls and successfully evaded 
detection, but the C&amp;C payload doesn't and still uses hooked 
functions.</p>
</li>
<li>
<p>The C&amp;C payload executed a noisy command, either intentionally or
 unintentionally. Such commands will catch the attention of an EDR, and 
thus your implementation will be detected (e.g. spawn cmd.exe and 
execute the <code>whoami</code> command).</p>
</li>
<li>
<p>The C&amp;C uses recognizable named IPCs handles or open specific 
ones (recall that IPCs are Pipes - Events - Metaphors - Semaphores). For
 example, executing the "load powershell" command using Meterpreter 
results in the following.</p>
</li>
</ul>
<p><img src="Introduction%20To%20EDRs_files/intro-edr-419941044-badc629b-fa34-4dfc-95e4-db9f22c94612.png" alt="image"></p>
<p>For such reasons, and more, there would be a lot of cases where your 
implementation would succeed in returning a connection to your C2 
server, but would get detected when running some specific commands. So 
choosing your C2 is an important decision for runtime evasion. It is 
always advised to use a highly flexible and malleable C2 framework 
rather than a limited one.</p>
<p>In the following modules, multiple strategies will be presented to 
address EDR detection mechanisms. One may select the method that best 
fits their needs and combine it with other previously shown techniques 
to create successful implementations that can bypass EDR solutions.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand an EDR's components and the ways it detects and mitigates malicious activities</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/81"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/82/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/82/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/83"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Introduction%20To%20EDRs_files/jquery-3.6.0.min.js"></script>
        <script src="Introduction%20To%20EDRs_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Introduction%20To%20EDRs_files/app.4474f4d1.css"><link rel="modulepreload" href="Introduction%20To%20EDRs_files/app.5f3af5ce.js"><link rel="stylesheet" href="Introduction%20To%20EDRs_files/app.4474f4d1.css"><script type="module" src="Introduction%20To%20EDRs_files/app.5f3af5ce.js"></script><script src="Introduction%20To%20EDRs_files/navbar.js"></script>
<script src="Introduction%20To%20EDRs_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 82;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>