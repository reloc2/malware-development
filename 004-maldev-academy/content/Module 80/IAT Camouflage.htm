<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="IAT%20Camouflage_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="IAT%20Camouflage_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="IAT%20Camouflage_files/css2.css" rel="stylesheet">
        <link href="IAT%20Camouflage_files/css2_002.css" rel="stylesheet">
        <title>IAT Camouflage</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="IAT%20Camouflage_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Camouflage_files/app.fdbb573b.css"><link rel="stylesheet" href="IAT%20Camouflage_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="IAT%20Camouflage_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 80 - IAT Camouflage
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="IAT%20Camouflage_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="IAT%20Camouflage_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="IAT%20Camouflage_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/IatCamouflage" target="_blank">
                    <img src="IAT%20Camouflage_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>IAT Camouflage</h2>
<h3>Introduction</h3>
<p>By removing the C Runtime Library from the final binary file, the IAT
 is cleared of any unused WinAPI functions. However, this may raise 
suspicion if the binary file imports very few WinAPI functions, 
particularly when combined with API hashing which can even result in 
zero imported functions.</p>
<p>As a malware developer, it is important to make the malware 
implementation appear normal. Having an implementation with a fake IAT 
is more effective than having no imported functions. This module will 
discuss this concept in detail.</p>
<p>Let's start with a binary called <code>IatCamouflage.exe</code> that does not use the CRT library and was compiled similarly to that demonstrated in the previous module.</p>
<pre><code>#include &lt;Windows.h&gt;

int main() {

  	// infinite wait
	WaitForSingleObject((HANDLE)-1, INFINITE);
	return 0;
}
</code></pre>
<p>When the binary is executed, Process Hacker will highlight the 
process with a pinkish color and display a note when the mouse hovers 
over the process. Process hacker assumes the binary is packed due to the
 lack of imports in the IAT.</p>
<p><img src="IAT%20Camouflage_files/iat-camo-0222202369-4ec0c257-3f73-4563-8611-6a367e668455.png" alt="image"></p>
<p>Verify that <code>IatCamouflage.exe</code> is importing one function using <code>dumpbin.exe</code>.</p>
<p><img src="IAT%20Camouflage_files/iat-camo-116296566-e54ef1c8-582f-4114-8f76-7992d4c69358.png" alt="image"></p>
<h3>Manipulating The IAT</h3>
<p>Manipulating the IAT can be easily done by using benign WinAPIs that 
do not change the behavior of the program. This can be done by calling 
the WinAPIs with <code>NULL</code> parameters or using the WinAPIs on 
dummy data that will not affect the program. Additionally, these 
functions can be placed in if-statements that will never execute however
 some compilers can modify the flow of the code using <a href="https://en.wikipedia.org/wiki/Dead-code_elimination" target="_blank">Dead-code elimination</a>. This is a compiler optimization setting to remove code that does not affect the program.</p>
<h3>Dead-Code Elimination Example</h3>
<p>The following code snippet calls several WinAPIs inside an if-statement which can never be satisfied.</p>
<pre><code>        int z = 4;

	// Impossible if-statement that will never run
	if (z &gt; 5) {
  
		// Random benign WinAPIs
		unsigned __int64 i = MessageBoxA(NULL, NULL, NULL, NULL);
		i = GetLastError();
		i = SetCriticalSectionSpinCount(NULL, NULL);
		i = GetWindowContextHelpId(NULL);
		i = GetWindowLongPtrW(NULL, NULL);
		i = RegisterClassW(NULL);
		i = IsWindowVisible(NULL);
		i = ConvertDefaultLocale(NULL);
		i = MultiByteToWideChar(NULL, NULL, NULL, NULL, NULL, NULL);
		i = IsDialogMessageW(NULL, NULL);
	}
</code></pre>
<p>If the Visual Studio project does not have the CRT Library dependency
 and compiles the code above, then the WinAPIs will not be visible in 
the binary's IAT. The compiler is aware that the if-statement is 
impossible to satisfy and therefore the entirety of the if-statement 
logic is not included in the compiled binary resulting in the WinAPIs 
not being in the binary's IAT. There are two ways to resolve this 
problem:</p>
<ol>
<li>
<p>Disabling code optimization.</p>
</li>
<li>
<p>Tricking the compiler to think that this code is used.</p>
</li>
</ol>
<h3>Disabling code optimization</h3>
<p>This method is easy and simply requires Visual Studio's <em>Optimization</em>
 option to be disabled as shown in the image below. This will disable 
the dead-code elimination compiler optimization property resulting in 
the WinAPIs being visible in the IAT. However, disabling optimization on
 larger programs can negatively impact performance since the compiler is
 no longer improving the efficiency and speed of the code. Therefore the
 program may consume more memory or operate slower.</p>
<p><img src="IAT%20Camouflage_files/iat-camo-216316282-a383829c-9589-4081-a581-9bedc4f4f3f8.png" alt="image"></p>
<h3>Tricking The Compiler</h3>
<p>This method requires the use of logic to trick the compiler into 
believing that the if-statement may be valid. The code snippet below 
uses logic that makes it difficult for the compiler to know whether the 
if-statement will execute thus forcing it to include the logic in the 
compiled binary even though the if-statement will never be satisfied.</p>
<p>Below are a few points about the code snippet to make it easier to understand.</p>
<ul>
<li>
<p>The <code>RandomCompileTimeSeed</code> function is used to generate a random compile-time seed via the <code>__TIME__</code> macro.</p>
</li>
<li>
<p>The <code>Helper</code> function allocates a heap buffer and sets the first 4 bytes to <code>RandomCompileTimeSeed() % 0xFF</code>, which limits the seed value to be less than <code>0xFF</code> (in hex) or 255 (in decimal).</p>
</li>
<li>
<p>The <code>IatCamouflage</code> function contains the variable <code>A</code> which is an integer pointer and is set to be equal to the first four bytes of the buffer returned by the <code>Helper</code> function.</p>
</li>
<li>
<p>Since the helper function will always return a value less than 255, the if statement, <code>if (*A &gt; 350)</code>,
 will always be false. The catch here is that the compiler does not know
 this and will therefore include this logic in the compiled binary.</p>
</li>
</ul>
<pre><code>// Generate a random compile-time seed
int RandomCompileTimeSeed(void)
{
	return '0' * -40271
		__TIME__[7] * 1
		__TIME__[6] * 10
		__TIME__[4] * 60
		__TIME__[3] * 600
		__TIME__[1] * 3600
		__TIME__[0] * 36000;
}


// A dummy function that makes the if-statement in 'IatCamouflage' interesting
PVOID Helper(PVOID *ppAddress) {

	PVOID pAddress = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0xFF);
	if (!pAddress)
		return NULL;
	
	// setting the first 4 bytes in pAddress to be equal to a random number (less than 255)
	*(int*)pAddress = RandomCompileTimeSeed() % 0xFF;
	
	// saving the base address by pointer, and returning it 
	*ppAddress = pAddress;
	return pAddress;
}


// Function that imports WinAPIs but never uses them
VOID IatCamouflage() {

	PVOID		pAddress	= NULL;
	int*		A		    = (int*)Helper(&amp;pAddress);
	
	// Impossible if-statement that will never run
	if (*A &gt; 350) {

		// some random whitelisted WinAPIs
		unsigned __int64 i = MessageBoxA(NULL, NULL, NULL, NULL);
		i = GetLastError();
		i = SetCriticalSectionSpinCount(NULL, NULL);
		i = GetWindowContextHelpId(NULL);
		i = GetWindowLongPtrW(NULL, NULL);
		i = RegisterClassW(NULL);
		i = IsWindowVisible(NULL);
		i = ConvertDefaultLocale(NULL);
		i = MultiByteToWideChar(NULL, NULL, NULL, NULL, NULL, NULL);
		i = IsDialogMessageW(NULL, NULL);
	}

	// Freeing the buffer allocated in 'Helper'
	HeapFree(GetProcessHeap(), 0, pAddress);
}

</code></pre>
<h3>Results</h3>
<p>Compile the code snippet above and check the IAT of the binary. As 
expected, the benign WinAPIs inside the if-statement are now visible.</p>
<p><img src="IAT%20Camouflage_files/iat-camo-316322305-990ecd45-33a8-45d7-8f93-826ef0d18ad3.png" alt="image"></p>
<p>These imported functions are enough to make the binary appear benign 
when statically analyzed. On the other hand, the malicious WinAPIs 
should be removed from the IAT by using API Hashing.</p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Use Process Hacker to analyze a binary that has a single imported function in its IAT</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Create a function that tricks the compiler into thinking the code is used</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/79"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/80/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/80/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/81"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="IAT%20Camouflage_files/jquery-3.6.0.min.js"></script>
        <script src="IAT%20Camouflage_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="IAT%20Camouflage_files/app.4474f4d1.css"><link rel="modulepreload" href="IAT%20Camouflage_files/app.5f3af5ce.js"><link rel="stylesheet" href="IAT%20Camouflage_files/app.4474f4d1.css"><script type="module" src="IAT%20Camouflage_files/app.5f3af5ce.js"></script><script src="IAT%20Camouflage_files/navbar.js"></script>
<script src="IAT%20Camouflage_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 80;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>