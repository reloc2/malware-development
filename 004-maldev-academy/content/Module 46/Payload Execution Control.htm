<!DOCTYPE html>
<html class="dark"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="csrf-token" content="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">
        <link rel="stylesheet" href="Payload%20Execution%20Control_files/template.css">
        <link rel="shortcut icon" href="#favicon.ico">
        <!-- fontawesome for icons -->
        <link rel="stylesheet" href="Payload%20Execution%20Control_files/font-awesome.min.css">
        <!-- google fonts -->
        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="Payload%20Execution%20Control_files/css2.css" rel="stylesheet">
        <link href="Payload%20Execution%20Control_files/css2_002.css" rel="stylesheet">
        <title>Payload Execution Control</title>
        <!-- Custom css files, order matters -->
        <link rel="preload" as="style" href="Payload%20Execution%20Control_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Execution%20Control_files/app.fdbb573b.css"><link rel="stylesheet" href="Payload%20Execution%20Control_files/viewer.css">
    </head>
    <body>
        <nav id="navbar" class="px-2 sm:px-4 py-2.5 bg-gray-900 sticky hidden">
    <div class="container flex flex-wrap justify-between mx-auto">
      <a data-target="_self" href="#" class="flex items-center">
        <div class="main-logo flex flex-row items-center">
            <span class="text-xl logo-font text-white">MALDEV</span>
            <img class="w-[25px] mx-2 relative bottom-1" src="Payload%20Execution%20Control_files/logo-bug-2.png" alt="Logo">   
            <span class="text-xl logo-font text-white">ACADEMY</span>          
        </div>
      </a>
      <button data-collapse-toggle="navbar-default" id="navbar-phone-btn" type="button" class="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
      </button>
      <div class="hidden w-full md:block md:w-auto" id="navbar-default">
        <ul class="flex flex-col items-center p-4 mt-4 bg-gray-50 rounded-lg border border-gray-100 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a data-target="_self" href="#" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Home</a>
          </li>
          <li>
            <a data-target="_self" href="#faq" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">FAQ</a>
          </li>
          <li>
            <a data-target="_self" href="#syllabus" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Syllabus</a>
          </li>
                              <li>
            <a data-target="_self" href="#pricing" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Pricing</a>
          </li>
                                        <li>
            <a data-target="_self" href="#profile" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Profile</a>
          </li>
          <li>
            <form action="#logout" method="POST">
            <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">              <button type="submit" class="block py-2 pr-4 pl-3 text-gray-400 md:p-0">Logout</button>
            </form>
          </li>
          <li class="mt-4 md:mt-0">
            <a data-target="_self" href="#modules" class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center md:mr-3 mr-0 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Modules</a>
          </li>
                  </ul>
      </div>
    </div>
  </nav>        <div class="bg-gray-900 p-4">
    <div class="flex">
        <div class="md:flex-row flex-col flex md:items-center w-1/2 bg-gray-700 border-l border-t border-gray-600 pl-4 pt-2 pb-2 rounded-tl">
            <div>
                Module 46 - Payload Execution Control
            </div>
            <div class="ml-2 w-4 h-4 bg-orange-600 rounded-full"></div>
        </div>
        <div class="flex justify-end items-center w-1/2 bg-gray-700 pr-4 pt-2 pb-2 rounded-tr border-t border-r border-gray-600">
            <div class="enlarge-container pr-4">
                <img src="Payload%20Execution%20Control_files/enlarge.svg" onclick="toggleScreenWidth()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="enlargeToggle" alt="Screen Width" width="20px">
            </div>
            <div class="objectives-container pr-4">
                <img src="Payload%20Execution%20Control_files/objectives.svg" onclick="toggleObjectives()" class="hover:bg-gray-600 cursor-pointer" id="objectivesToggle" alt="Objectives" width="20px">
            </div>
            <div class="terminal-container  pr-4 ">
                <img src="Payload%20Execution%20Control_files/ide.svg" onclick="toggleIde()" class="hover:bg-gray-600 rounded-sm cursor-pointer" id="terminalToggle" alt="Terminal" width="22px">
            </div>
                                    <div class="dl-container">
                <a href="#download/file/PayloadExecutionControl" target="_blank">
                    <img src="Payload%20Execution%20Control_files/dl.svg" class="hover:bg-gray-600 rounded-full cursor-pointer" alt="Download" width="20px">
                </a>
            </div>
                                </div>
    </div>
    <div id="height-container" class="flex h-full min-h-[800px]">
        <div class="flex max-w-full min-w-full">
            <div id="description-container" class="viewer code-description h-full bg-gray-800 p-4 border-r border-l border-b border-gray-600 px-5 md:px-10 lg:px-20 w-full"><div class="toastui-editor-contents" style="overflow-wrap: break-word;">
            <h2>Payload Execution Control</h2>
<h3>Introduction</h3>
<p>In real-world scenarios, it is important to limit the actions 
performed by a malware and focus on essential tasks. The more actions 
performed by the malware, the more likely it'll be picked up by 
monitoring systems.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/sync/synchronization-objects" target="_blank">Windows Synchronization Objects</a>
 can be utilized to control the execution of a payload. These objects 
coordinate the access of shared resources by multiple threads or 
processes, ensuring that shared resources are accessed in a controlled 
manner and preventing conflicts or race conditions when multiple threads
 or processes attempt to access the same resource simultaneously. By 
using synchronization objects, it's possible to control the number of 
times the payload is executed on a system.</p>
<p>There are several types of synchronization objects, including <a href="https://learn.microsoft.com/en-us/windows/win32/sync/semaphore-objects" target="_blank">semaphores</a>, <a href="https://learn.microsoft.com/en-us/windows/win32/sync/mutex-objects" target="_blank">mutexes</a>, and <a href="https://learn.microsoft.com/en-us/windows/win32/sync/event-objects" target="_blank">events</a>.
 Each type of synchronization object works in a slightly different 
manner but ultimately they all serve the same purpose which is to 
coordinate access of shared resources.</p>
<h3>Semaphores</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/sync/semaphore-objects" target="_blank">Semaphores</a>
 are synchronization tools that utilize a value stored in memory to 
control access to a shared resource. There are two types of semaphores: 
binary and counting. A binary semaphore has a value of 1 or 0, 
indicating whether the resource is available or unavailable, 
respectively. A counting semaphore, on the other hand, has a value 
greater than 1, representing the number of available resources or the 
number of processes that can access the resource concurrently.</p>
<p>To control execution of a payload, a named semaphore object will be 
created each time the payload is executed. If the binary is executed 
multiple times, the first execution will create the named semaphore and 
the payload will be executed as intended. On subsequent executions, the 
semaphore creation will fail as the semaphore with the same name is 
already running. This indicates that the payload is currently being 
executed from a previous run and therefore should not be run again to 
avoid duplication.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsemaphorea" target="_blank">CreateSemaphoreA</a>
 will be used to create a semaphore object. It is important to create it
 as a named semaphore to prevent executions after the initial binary 
run. If the named semaphore is already running, <code>CreateSemaphoreA</code> will return a handle to the existing object and <code>GetLastError</code> will return <code>ERROR_ALREADY_EXISTS</code>. In the code below, if a "ControlString" semaphore is already running, <code>GetLastError</code> will return <code>ERROR_ALREADY_EXISTS</code>.</p>
<pre><code>HANDLE hSemaphore = CreateSemaphoreA(NULL, 10, 10, "ControlString");

if (hSemaphore != NULL &amp;&amp; GetLastError() == ERROR_ALREADY_EXISTS)
	// Payload is already running
else
	// Payload is not running

</code></pre>
<h3>Mutexes</h3>
<p>A <a href="https://learn.microsoft.com/en-us/windows/win32/sync/mutex-objects" target="_blank">Mutex</a>,
 short for "mutual exclusion", is a synchronization tool used to manage 
access to shared resources among processes and threads. In practical 
use, a thread attempting to access a shared resource checks the status 
of the mutex. If it is locked, the thread waits until the mutex is 
unlocked before proceeding. If the mutex is not locked, the thread locks
 it, performs the necessary operations on the shared resource, and then 
unlocks the mutex upon completion. This ensures that only one thread can
 access the shared resource at a time, preventing conflicts and data 
corruption.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createmutexa" target="_blank">CreateMutexA</a> is used to created a named mutex as follows:</p>
<pre><code>HANDLE hMutex = CreateMutexA(NULL, FALSE, "ControlString");

if (hMutex != NULL &amp;&amp; GetLastError() == ERROR_ALREADY_EXISTS)
	// Payload is already running
else
	// Payload is not running
</code></pre>
<h3>Events</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/sync/event-objects" target="_blank">Events</a>
 are another synchronization tool that can be used to coordinate the 
execution of threads or processes. They can be either manual or 
automatic, with manual events requiring explicit set or reset actions 
and automatic events being triggered by external conditions such as 
timer expiration or task completion.</p>
<p>To use events in a program, the <a href="https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-createeventa" target="_blank">CreateEventA</a> WinAPI can be employed. The usage of the function is demonstrated below:</p>
<pre><code>HANDLE hEvent = CreateEventA(NULL, FALSE, FALSE, "ControlString");

if (hEvent != NULL &amp;&amp; GetLastError() == ERROR_ALREADY_EXISTS)
	// Payload is already running
else
	// Payload is not running
</code></pre>
<h3>Demo</h3>
<p>Using Semaphores.</p>
<p><img src="Payload%20Execution%20Control_files/control-109459156-0c97cf3a-c176-46da-bd31-afb2d2161b9f.png" alt="Image"></p>
<br>
<p>Using Mutexes.</p>
<p><img src="Payload%20Execution%20Control_files/control-209459157-cda5268b-bd34-47ed-874b-a799e0680fb8.png" alt="Image"></p>
<br>
<p>Using Events.</p>
<p><img src="Payload%20Execution%20Control_files/control-309459160-66750edb-600a-4fef-a1f2-ef2deec92d5e.png" alt="Image"></p>

            </div></div>
            <div id="accessory-container" class="hidden flex flex-col w-1/4 min-w-1/4 h-full">
                <div id="objectives" class="hidden p-4 border-r border-b bg-gray-900 border-gray-600 font-code w-full h-1/2">
                    <div class="w-full bg-gray-700 text-center mb-4 font-sans text-lg">Objectives</div>
                                                                        
                                                                        
            <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-0" data-objective-id="0" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Understand how Windows synchronization objects can be used to control a payload's execution</label>
                            </div>
                                                                        
                                                                        
                    <div class="flex items-center mb-2 font-sans">
                                <input type="checkbox" id="objective-1" data-objective-id="1" class="flex-none w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                <label class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Is there any other form of synchronization objects to be used? (Hint: check the CreateNamedPipeA WinAPI)</label>
                            </div>
                                                                                  
                </div>
                <div id="ide" class="hidden p-4 border-r border-b border-gray-600 font-code w-full h-1/2">
                    <textarea class="bg-gray-900 outline-0 w-full h-full resize-none font-sans" placeholder="Write temporary notes or code here"></textarea>
                </div>
            </div>  
        </div>
      </div>
      <div class="flex">
        <div class="flex flex-row flex-wrap justify-center items-center w-full bg-gray-700 border-r border-l border-gray-600 pl-4 pt-2 pb-2 rounded-bl rounded-br">
                        <div class="mr-2">
                <a data-target="_self" href="#modules/45"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Previous</button></a>           
            </div>
                        <div class="mr-2">
                <a data-target="_self" href="#modules"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Modules</button></a>           
            </div>
            <div class="my-2 mr-2">
            <form id="complete-module" action="#modules/46/complete" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="complete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-green-700 rounded-lg focus:shadow-outline hover:bg-green-800 ">Complete</button>
            </form>
            <form id="uncomplete-module" action="#modules/46/progress" method="POST">
                <input type="hidden" name="_token" value="aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk">                <button id="uncomplete-btn" class="w-[100px] h-10 px-5 text-white text-sm duration-150 bg-red-700 rounded-lg focus:shadow-outline hover:bg-red-800 hidden">Undo</button>
            </form>
            </div>
                                    <div class="mr-2">
                <a data-target="_self" href="#modules/47"><button class="w-[100px] h-10 px-5 text-sm duration-150 text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:shadow-outline">Next</button></a>           
            </div>
                    </div>
    </div>
</div>

<footer id="footer" class="text-gray-400 border-t-[1px] border-gray-700 bg-gray-900 body-font hidden">
    <div class="container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col">
      <p class="text-sm text-gray-400 sm:ml-4 sm:pl-4 sm:border-gray-800 sm:py-2 sm:mt-0 mt-4">© 2023 MalDev Academy</p>
        <a href="#" target="_blank" class="text-gray-500 hover:text-white ml-2">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
        </a>
      <span class="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
        <a class="text-gray-400 text-sm" href="/" target="_blank">
#      </a></span><a class="text-gray-400 text-sm" href="/" target="_blank">
    </a></div><a class="text-gray-400 text-sm" href="/" target="_blank">
  </a></footer><a class="text-gray-400 text-sm" href="/" target="_blank">        

        <script src="Payload%20Execution%20Control_files/jquery-3.6.0.min.js"></script>
        <script src="Payload%20Execution%20Control_files/bootstrap.min.js"></script>
        <link rel="preload" as="style" href="Payload%20Execution%20Control_files/app.4474f4d1.css"><link rel="modulepreload" href="Payload%20Execution%20Control_files/app.5f3af5ce.js"><link rel="stylesheet" href="Payload%20Execution%20Control_files/app.4474f4d1.css"><script type="module" src="Payload%20Execution%20Control_files/app.5f3af5ce.js"></script><script src="Payload%20Execution%20Control_files/navbar.js"></script>
<script src="Payload%20Execution%20Control_files/moduleviewer.js"></script>

 
<script>
$(document).ready(function() {
    $('a:not([data-target="_self"])').attr('target', '_blank');

    $('input[type=checkbox]').change(function() {
    var checked = $(this).is(':checked');
    var userId = 260;
    var moduleId = 46;
    var objectiveId = $(this).data('objective-id');
    $.ajax({
        url: checked ? "#complete/objective" : "#remove/objective",
        type: "POST",
        data: {
        _token: "aHzsquahomm2Bo0anbhiCgbZ1siEurCTfma8L6Pk",
        user_id: userId,
        module_id: moduleId,
        objective_id: objectiveId
        },
        success: function(response) {

        },
        error: function(xhr) {
        console.log('Error');
        }
    });
    });

    $('#complete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = form.find('#complete-btn');
    var uncompleteBtn = $('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            completeBtn.addClass('hidden');
            uncompleteBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});

$('#uncomplete-module').submit(function(event) {
    event.preventDefault(); // Prevent default form submission

    var form = $(this);
    var url = form.attr('action');
    var data = form.serialize();
    var completeBtn = $('#complete-btn');
    var uncompleteBtn = form.find('#uncomplete-btn');

    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        success: function(response) {
            uncompleteBtn.addClass('hidden');
            completeBtn.removeClass('hidden');
        },
        error: function(xhr) {
            console.log('Error');
        }
    });
});
});
</script>
    
</a></body></html>